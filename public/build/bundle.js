
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$1() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$1;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$1;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop$1;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_custom_element_data(node, prop, value) {
        if (prop in node) {
            node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
        }
        else {
            attr(node, prop, value);
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Schedules a callback to run immediately before the component is unmounted.
     *
     * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
     * only one that runs inside a server-side component.
     *
     * https://svelte.dev/docs#run-time-svelte-ondestroy
     */
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    /**
     * Associates an arbitrary `context` object with the current component and the specified `key`
     * and returns that object. The context is then available to children of the component
     * (including slotted content) with `getContext`.
     *
     * Like lifecycle functions, this must be called during component initialisation.
     *
     * https://svelte.dev/docs#run-time-svelte-setcontext
     */
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
        return context;
    }
    /**
     * Retrieves the context that belongs to the closest parent component with the specified `key`.
     * Must be called during component initialisation.
     *
     * https://svelte.dev/docs#run-time-svelte-getcontext
     */
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }
    function update_await_block_branch(info, ctx, dirty) {
        const child_ctx = ctx.slice();
        const { resolved } = info;
        if (info.current === info.then) {
            child_ctx[info.value] = resolved;
        }
        if (info.current === info.catch) {
            child_ctx[info.error] = resolved;
        }
        info.block.p(child_ctx, dirty);
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop$1,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$1;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop$1;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.52.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    function construct_svelte_component_dev(component, props) {
        const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
        try {
            const instance = new component(props);
            if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
                throw new Error(error_message);
            }
            return instance;
        }
        catch (err) {
            const { message } = err;
            if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
                throw new Error(error_message);
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable$1(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable$1(value, start = noop$1) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$1) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop$1;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop$1;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop$1;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    const LOCATION = {};
    const ROUTER = {};

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    function getLocation(source) {
      return {
        ...source.location,
        state: source.history.state,
        key: (source.history.state && source.history.state.key) || "initial"
      };
    }

    function createHistory(source, options) {
      const listeners = [];
      let location = getLocation(source);

      return {
        get location() {
          return location;
        },

        listen(listener) {
          listeners.push(listener);

          const popstateListener = () => {
            location = getLocation(source);
            listener({ location, action: "POP" });
          };

          source.addEventListener("popstate", popstateListener);

          return () => {
            source.removeEventListener("popstate", popstateListener);

            const index = listeners.indexOf(listener);
            listeners.splice(index, 1);
          };
        },

        navigate(to, { state, replace = false } = {}) {
          state = { ...state, key: Date.now() + "" };
          // try...catch iOS Safari limits to 100 pushState calls
          try {
            if (replace) {
              source.history.replaceState(state, null, to);
            } else {
              source.history.pushState(state, null, to);
            }
          } catch (e) {
            source.location[replace ? "replace" : "assign"](to);
          }

          location = getLocation(source);
          listeners.forEach(listener => listener({ location, action: "PUSH" }));
        }
      };
    }

    // Stores history entries in memory for testing or other platforms like Native
    function createMemorySource(initialPathname = "/") {
      let index = 0;
      const stack = [{ pathname: initialPathname, search: "" }];
      const states = [];

      return {
        get location() {
          return stack[index];
        },
        addEventListener(name, fn) {},
        removeEventListener(name, fn) {},
        history: {
          get entries() {
            return stack;
          },
          get index() {
            return index;
          },
          get state() {
            return states[index];
          },
          pushState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            index++;
            stack.push({ pathname, search });
            states.push(state);
          },
          replaceState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            stack[index] = { pathname, search };
            states[index] = state;
          }
        }
      };
    }

    // Global history uses window.history as the source if available,
    // otherwise a memory history
    const canUseDOM = Boolean(
      typeof window !== "undefined" &&
        window.document &&
        window.document.createElement
    );
    const globalHistory = createHistory(canUseDOM ? window : createMemorySource());

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    const paramRe = /^:(.+)/;

    const SEGMENT_POINTS = 4;
    const STATIC_POINTS = 3;
    const DYNAMIC_POINTS = 2;
    const SPLAT_PENALTY = 1;
    const ROOT_POINTS = 1;

    /**
     * Check if `segment` is a root segment
     * @param {string} segment
     * @return {boolean}
     */
    function isRootSegment(segment) {
      return segment === "";
    }

    /**
     * Check if `segment` is a dynamic segment
     * @param {string} segment
     * @return {boolean}
     */
    function isDynamic(segment) {
      return paramRe.test(segment);
    }

    /**
     * Check if `segment` is a splat
     * @param {string} segment
     * @return {boolean}
     */
    function isSplat(segment) {
      return segment[0] === "*";
    }

    /**
     * Split up the URI into segments delimited by `/`
     * @param {string} uri
     * @return {string[]}
     */
    function segmentize(uri) {
      return (
        uri
          // Strip starting/ending `/`
          .replace(/(^\/+|\/+$)/g, "")
          .split("/")
      );
    }

    /**
     * Strip `str` of potential start and end `/`
     * @param {string} str
     * @return {string}
     */
    function stripSlashes(str) {
      return str.replace(/(^\/+|\/+$)/g, "");
    }

    /**
     * Score a route depending on how its individual segments look
     * @param {object} route
     * @param {number} index
     * @return {object}
     */
    function rankRoute(route, index) {
      const score = route.default
        ? 0
        : segmentize(route.path).reduce((score, segment) => {
            score += SEGMENT_POINTS;

            if (isRootSegment(segment)) {
              score += ROOT_POINTS;
            } else if (isDynamic(segment)) {
              score += DYNAMIC_POINTS;
            } else if (isSplat(segment)) {
              score -= SEGMENT_POINTS + SPLAT_PENALTY;
            } else {
              score += STATIC_POINTS;
            }

            return score;
          }, 0);

      return { route, score, index };
    }

    /**
     * Give a score to all routes and sort them on that
     * @param {object[]} routes
     * @return {object[]}
     */
    function rankRoutes(routes) {
      return (
        routes
          .map(rankRoute)
          // If two routes have the exact same score, we go by index instead
          .sort((a, b) =>
            a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index
          )
      );
    }

    /**
     * Ranks and picks the best route to match. Each segment gets the highest
     * amount of points, then the type of segment gets an additional amount of
     * points where
     *
     *  static > dynamic > splat > root
     *
     * This way we don't have to worry about the order of our routes, let the
     * computers do it.
     *
     * A route looks like this
     *
     *  { path, default, value }
     *
     * And a returned match looks like:
     *
     *  { route, params, uri }
     *
     * @param {object[]} routes
     * @param {string} uri
     * @return {?object}
     */
    function pick(routes, uri) {
      let match;
      let default_;

      const [uriPathname] = uri.split("?");
      const uriSegments = segmentize(uriPathname);
      const isRootUri = uriSegments[0] === "";
      const ranked = rankRoutes(routes);

      for (let i = 0, l = ranked.length; i < l; i++) {
        const route = ranked[i].route;
        let missed = false;

        if (route.default) {
          default_ = {
            route,
            params: {},
            uri
          };
          continue;
        }

        const routeSegments = segmentize(route.path);
        const params = {};
        const max = Math.max(uriSegments.length, routeSegments.length);
        let index = 0;

        for (; index < max; index++) {
          const routeSegment = routeSegments[index];
          const uriSegment = uriSegments[index];

          if (routeSegment !== undefined && isSplat(routeSegment)) {
            // Hit a splat, just grab the rest, and return a match
            // uri:   /files/documents/work
            // route: /files/* or /files/*splatname
            const splatName = routeSegment === "*" ? "*" : routeSegment.slice(1);

            params[splatName] = uriSegments
              .slice(index)
              .map(decodeURIComponent)
              .join("/");
            break;
          }

          if (uriSegment === undefined) {
            // URI is shorter than the route, no match
            // uri:   /users
            // route: /users/:userId
            missed = true;
            break;
          }

          let dynamicMatch = paramRe.exec(routeSegment);

          if (dynamicMatch && !isRootUri) {
            const value = decodeURIComponent(uriSegment);
            params[dynamicMatch[1]] = value;
          } else if (routeSegment !== uriSegment) {
            // Current segments don't match, not dynamic, not splat, so no match
            // uri:   /users/123/settings
            // route: /users/:id/profile
            missed = true;
            break;
          }
        }

        if (!missed) {
          match = {
            route,
            params,
            uri: "/" + uriSegments.slice(0, index).join("/")
          };
          break;
        }
      }

      return match || default_ || null;
    }

    /**
     * Check if the `path` matches the `uri`.
     * @param {string} path
     * @param {string} uri
     * @return {?object}
     */
    function match(route, uri) {
      return pick([route], uri);
    }

    /**
     * Combines the `basepath` and the `path` into one path.
     * @param {string} basepath
     * @param {string} path
     */
    function combinePaths(basepath, path) {
      return `${stripSlashes(
    path === "/" ? basepath : `${stripSlashes(basepath)}/${stripSlashes(path)}`
  )}/`;
    }

    /* node_modules\svelte-routing\src\Router.svelte generated by Svelte v3.52.0 */

    function create_fragment$v(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let $location;
    	let $routes;
    	let $base;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, ['default']);
    	let { basepath = "/" } = $$props;
    	let { url = null } = $$props;
    	const locationContext = getContext(LOCATION);
    	const routerContext = getContext(ROUTER);
    	const routes = writable$1([]);
    	validate_store(routes, 'routes');
    	component_subscribe($$self, routes, value => $$invalidate(6, $routes = value));
    	const activeRoute = writable$1(null);
    	let hasActiveRoute = false; // Used in SSR to synchronously set that a Route is active.

    	// If locationContext is not set, this is the topmost Router in the tree.
    	// If the `url` prop is given we force the location to it.
    	const location = locationContext || writable$1(url ? { pathname: url } : globalHistory.location);

    	validate_store(location, 'location');
    	component_subscribe($$self, location, value => $$invalidate(5, $location = value));

    	// If routerContext is set, the routerBase of the parent Router
    	// will be the base for this Router's descendants.
    	// If routerContext is not set, the path and resolved uri will both
    	// have the value of the basepath prop.
    	const base = routerContext
    	? routerContext.routerBase
    	: writable$1({ path: basepath, uri: basepath });

    	validate_store(base, 'base');
    	component_subscribe($$self, base, value => $$invalidate(7, $base = value));

    	const routerBase = derived([base, activeRoute], ([base, activeRoute]) => {
    		// If there is no activeRoute, the routerBase will be identical to the base.
    		if (activeRoute === null) {
    			return base;
    		}

    		const { path: basepath } = base;
    		const { route, uri } = activeRoute;

    		// Remove the potential /* or /*splatname from
    		// the end of the child Routes relative paths.
    		const path = route.default
    		? basepath
    		: route.path.replace(/\*.*$/, "");

    		return { path, uri };
    	});

    	function registerRoute(route) {
    		const { path: basepath } = $base;
    		let { path } = route;

    		// We store the original path in the _path property so we can reuse
    		// it when the basepath changes. The only thing that matters is that
    		// the route reference is intact, so mutation is fine.
    		route._path = path;

    		route.path = combinePaths(basepath, path);

    		if (typeof window === "undefined") {
    			// In SSR we should set the activeRoute immediately if it is a match.
    			// If there are more Routes being registered after a match is found,
    			// we just skip them.
    			if (hasActiveRoute) {
    				return;
    			}

    			const matchingRoute = match(route, $location.pathname);

    			if (matchingRoute) {
    				activeRoute.set(matchingRoute);
    				hasActiveRoute = true;
    			}
    		} else {
    			routes.update(rs => {
    				rs.push(route);
    				return rs;
    			});
    		}
    	}

    	function unregisterRoute(route) {
    		routes.update(rs => {
    			const index = rs.indexOf(route);
    			rs.splice(index, 1);
    			return rs;
    		});
    	}

    	if (!locationContext) {
    		// The topmost Router in the tree is responsible for updating
    		// the location store and supplying it through context.
    		onMount(() => {
    			const unlisten = globalHistory.listen(history => {
    				location.set(history.location);
    			});

    			return unlisten;
    		});

    		setContext(LOCATION, location);
    	}

    	setContext(ROUTER, {
    		activeRoute,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute
    	});

    	const writable_props = ['basepath', 'url'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('basepath' in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ('url' in $$props) $$invalidate(4, url = $$props.url);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		setContext,
    		onMount,
    		writable: writable$1,
    		derived,
    		LOCATION,
    		ROUTER,
    		globalHistory,
    		pick,
    		match,
    		stripSlashes,
    		combinePaths,
    		basepath,
    		url,
    		locationContext,
    		routerContext,
    		routes,
    		activeRoute,
    		hasActiveRoute,
    		location,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute,
    		$location,
    		$routes,
    		$base
    	});

    	$$self.$inject_state = $$props => {
    		if ('basepath' in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ('url' in $$props) $$invalidate(4, url = $$props.url);
    		if ('hasActiveRoute' in $$props) hasActiveRoute = $$props.hasActiveRoute;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$base*/ 128) {
    			// This reactive statement will update all the Routes' path when
    			// the basepath changes.
    			{
    				const { path: basepath } = $base;

    				routes.update(rs => {
    					rs.forEach(r => r.path = combinePaths(basepath, r._path));
    					return rs;
    				});
    			}
    		}

    		if ($$self.$$.dirty & /*$routes, $location*/ 96) {
    			// This reactive statement will be run when the Router is created
    			// when there are no Routes and then again the following tick, so it
    			// will not find an active Route in SSR and in the browser it will only
    			// pick an active Route after all Routes have been registered.
    			{
    				const bestMatch = pick($routes, $location.pathname);
    				activeRoute.set(bestMatch);
    			}
    		}
    	};

    	return [
    		routes,
    		location,
    		base,
    		basepath,
    		url,
    		$location,
    		$routes,
    		$base,
    		$$scope,
    		slots
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, { basepath: 3, url: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$v.name
    		});
    	}

    	get basepath() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set basepath(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-routing\src\Route.svelte generated by Svelte v3.52.0 */

    const get_default_slot_changes$1 = dirty => ({
    	params: dirty & /*routeParams*/ 4,
    	location: dirty & /*$location*/ 16
    });

    const get_default_slot_context$1 = ctx => ({
    	params: /*routeParams*/ ctx[2],
    	location: /*$location*/ ctx[4]
    });

    // (40:0) {#if $activeRoute !== null && $activeRoute.route === route}
    function create_if_block$5(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$4, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*component*/ ctx[0] !== null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(40:0) {#if $activeRoute !== null && $activeRoute.route === route}",
    		ctx
    	});

    	return block;
    }

    // (43:2) {:else}
    function create_else_block$2(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, routeParams, $location*/ 532)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$1),
    						get_default_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(43:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (41:2) {#if component !== null}
    function create_if_block_1$4(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{ location: /*$location*/ ctx[4] },
    		/*routeParams*/ ctx[2],
    		/*routeProps*/ ctx[3]
    	];

    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) mount_component(switch_instance, target, anchor);
    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*$location, routeParams, routeProps*/ 28)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*$location*/ 16 && { location: /*$location*/ ctx[4] },
    					dirty & /*routeParams*/ 4 && get_spread_object(/*routeParams*/ ctx[2]),
    					dirty & /*routeProps*/ 8 && get_spread_object(/*routeProps*/ ctx[3])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(41:2) {#if component !== null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$u(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$activeRoute*/ ctx[1] !== null && /*$activeRoute*/ ctx[1].route === /*route*/ ctx[7] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$activeRoute*/ ctx[1] !== null && /*$activeRoute*/ ctx[1].route === /*route*/ ctx[7]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$activeRoute*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let $activeRoute;
    	let $location;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Route', slots, ['default']);
    	let { path = "" } = $$props;
    	let { component = null } = $$props;
    	const { registerRoute, unregisterRoute, activeRoute } = getContext(ROUTER);
    	validate_store(activeRoute, 'activeRoute');
    	component_subscribe($$self, activeRoute, value => $$invalidate(1, $activeRoute = value));
    	const location = getContext(LOCATION);
    	validate_store(location, 'location');
    	component_subscribe($$self, location, value => $$invalidate(4, $location = value));

    	const route = {
    		path,
    		// If no path prop is given, this Route will act as the default Route
    		// that is rendered if no other Route in the Router is a match.
    		default: path === ""
    	};

    	let routeParams = {};
    	let routeProps = {};
    	registerRoute(route);

    	// There is no need to unregister Routes in SSR since it will all be
    	// thrown away anyway.
    	if (typeof window !== "undefined") {
    		onDestroy(() => {
    			unregisterRoute(route);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('path' in $$new_props) $$invalidate(8, path = $$new_props.path);
    		if ('component' in $$new_props) $$invalidate(0, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onDestroy,
    		ROUTER,
    		LOCATION,
    		path,
    		component,
    		registerRoute,
    		unregisterRoute,
    		activeRoute,
    		location,
    		route,
    		routeParams,
    		routeProps,
    		$activeRoute,
    		$location
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), $$new_props));
    		if ('path' in $$props) $$invalidate(8, path = $$new_props.path);
    		if ('component' in $$props) $$invalidate(0, component = $$new_props.component);
    		if ('routeParams' in $$props) $$invalidate(2, routeParams = $$new_props.routeParams);
    		if ('routeProps' in $$props) $$invalidate(3, routeProps = $$new_props.routeProps);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$activeRoute*/ 2) {
    			if ($activeRoute && $activeRoute.route === route) {
    				$$invalidate(2, routeParams = $activeRoute.params);
    			}
    		}

    		{
    			const { path, component, ...rest } = $$props;
    			$$invalidate(3, routeProps = rest);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		component,
    		$activeRoute,
    		routeParams,
    		routeProps,
    		$location,
    		activeRoute,
    		location,
    		route,
    		path,
    		$$scope,
    		slots
    	];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, { path: 8, component: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment$u.name
    		});
    	}

    	get path() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }

    // index.ts
    var stores = {};
    function writable(key, initialValue, options) {
      const browser = typeof localStorage != "undefined" && typeof window != "undefined";
      const serializer = (options == null ? void 0 : options.serializer) || JSON;
      function updateStorage(key2, value) {
        if (!browser)
          return;
        localStorage.setItem(key2, serializer.stringify(value));
      }
      if (!stores[key]) {
        const store = writable$1(initialValue, (set2) => {
          const json = browser ? localStorage.getItem(key) : null;
          if (json) {
            set2(serializer.parse(json));
          }
          if (browser) {
            const handleStorage = (event) => {
              if (event.key === key)
                set2(event.newValue ? serializer.parse(event.newValue) : null);
            };
            window.addEventListener("storage", handleStorage);
            return () => window.removeEventListener("storage", handleStorage);
          }
        });
        const { subscribe, set } = store;
        stores[key] = {
          set(value) {
            updateStorage(key, value);
            set(value);
          },
          update(updater) {
            const value = updater(get_store_value(store));
            updateStorage(key, value);
            set(value);
          },
          subscribe
        };
      }
      return stores[key];
    }

    // First param `preferences` is the local storage key.
    // Second param is the initial value.
    const preferences = writable('preferences', {
      session: 0
    });

    const dataActiveUser = writable('dataActiveUser', {
      data: {}
    });

    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }

    // utils is a library of generic helper functions non-specific to axios

    const {toString: toString$1} = Object.prototype;
    const {getPrototypeOf} = Object;

    const kindOf = (cache => thing => {
        const str = toString$1.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(Object.create(null));

    const kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type
    };

    const typeOfTest = type => thing => typeof thing === type;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     *
     * @returns {boolean} True if value is an Array, otherwise false
     */
    const {isArray: isArray$1} = Array;

    /**
     * Determine if a value is undefined
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    const isUndefined = typeOfTest('undefined');

    /**
     * Determine if a value is a Buffer
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    const isArrayBuffer = kindOfTest('ArrayBuffer');


    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      let result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a String, otherwise false
     */
    const isString = typeOfTest('string');

    /**
     * Determine if a value is a Function
     *
     * @param {*} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    const isFunction$1 = typeOfTest('function');

    /**
     * Determine if a value is a Number
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Number, otherwise false
     */
    const isNumber = typeOfTest('number');

    /**
     * Determine if a value is an Object
     *
     * @param {*} thing The value to test
     *
     * @returns {boolean} True if value is an Object, otherwise false
     */
    const isObject$1 = (thing) => thing !== null && typeof thing === 'object';

    /**
     * Determine if a value is a Boolean
     *
     * @param {*} thing The value to test
     * @returns {boolean} True if value is a Boolean, otherwise false
     */
    const isBoolean = thing => thing === true || thing === false;

    /**
     * Determine if a value is a plain Object
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a plain Object, otherwise false
     */
    const isPlainObject = (val) => {
      if (kindOf(val) !== 'object') {
        return false;
      }

      const prototype = getPrototypeOf(val);
      return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };

    /**
     * Determine if a value is a Date
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Date, otherwise false
     */
    const isDate = kindOfTest('Date');

    /**
     * Determine if a value is a File
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a File, otherwise false
     */
    const isFile = kindOfTest('File');

    /**
     * Determine if a value is a Blob
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    const isBlob = kindOfTest('Blob');

    /**
     * Determine if a value is a FileList
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a File, otherwise false
     */
    const isFileList = kindOfTest('FileList');

    /**
     * Determine if a value is a Stream
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);

    /**
     * Determine if a value is a FormData
     *
     * @param {*} thing The value to test
     *
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    const isFormData = (thing) => {
      const pattern = '[object FormData]';
      return thing && (
        (typeof FormData === 'function' && thing instanceof FormData) ||
        toString$1.call(thing) === pattern ||
        (isFunction$1(thing.toString) && thing.toString() === pattern)
      );
    };

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    const isURLSearchParams = kindOfTest('URLSearchParams');

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     *
     * @returns {String} The String freed of excess whitespace
     */
    const trim = (str) => str.trim ?
      str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     *
     * @param {Boolean} [allOwnKeys = false]
     * @returns {void}
     */
    function forEach(obj, fn, {allOwnKeys = false} = {}) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      let i;
      let l;

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray$1(obj)) {
        // Iterate over array values
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;

        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     *
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      const result = {};
      const assignValue = (val, key) => {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray$1(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      };

      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     *
     * @param {Boolean} [allOwnKeys]
     * @returns {Object} The resulting value of object a
     */
    const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction$1(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, {allOwnKeys});
      return a;
    };

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     *
     * @returns {string} content value without BOM
     */
    const stripBOM = (content) => {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    };

    /**
     * Inherit the prototype methods from one constructor into another
     * @param {function} constructor
     * @param {function} superConstructor
     * @param {object} [props]
     * @param {object} [descriptors]
     *
     * @returns {void}
     */
    const inherits = (constructor, superConstructor, props, descriptors) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, 'super', {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };

    /**
     * Resolve object with deep prototype chain to a flat object
     * @param {Object} sourceObj source object
     * @param {Object} [destObj]
     * @param {Function|Boolean} [filter]
     * @param {Function} [propFilter]
     *
     * @returns {Object}
     */
    const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};

      destObj = destObj || {};
      // eslint-disable-next-line no-eq-null,eqeqeq
      if (sourceObj == null) return destObj;

      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

      return destObj;
    };

    /**
     * Determines whether a string ends with the characters of a specified string
     *
     * @param {String} str
     * @param {String} searchString
     * @param {Number} [position= 0]
     *
     * @returns {boolean}
     */
    const endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === undefined || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };


    /**
     * Returns new array from array like object or null if failed
     *
     * @param {*} [thing]
     *
     * @returns {?Array}
     */
    const toArray = (thing) => {
      if (!thing) return null;
      if (isArray$1(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };

    /**
     * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
     * thing passed in is an instance of Uint8Array
     *
     * @param {TypedArray}
     *
     * @returns {Array}
     */
    // eslint-disable-next-line func-names
    const isTypedArray = (TypedArray => {
      // eslint-disable-next-line func-names
      return thing => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

    /**
     * For each entry in the object, call the function with the key and value.
     *
     * @param {Object<any, any>} obj - The object to iterate over.
     * @param {Function} fn - The function to call for each entry.
     *
     * @returns {void}
     */
    const forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];

      const iterator = generator.call(obj);

      let result;

      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };

    /**
     * It takes a regular expression and a string, and returns an array of all the matches
     *
     * @param {string} regExp - The regular expression to match against.
     * @param {string} str - The string to search.
     *
     * @returns {Array<boolean>}
     */
    const matchAll = (regExp, str) => {
      let matches;
      const arr = [];

      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }

      return arr;
    };

    /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
    const isHTMLForm = kindOfTest('HTMLFormElement');

    const toCamelCase = str => {
      return str.toLowerCase().replace(/[_-\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };

    /* Creating a function that will check if an object has a property. */
    const hasOwnProperty$1 = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

    /**
     * Determine if a value is a RegExp object
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a RegExp object, otherwise false
     */
    const isRegExp = kindOfTest('RegExp');

    const reduceDescriptors = (obj, reducer) => {
      const descriptors = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};

      forEach(descriptors, (descriptor, name) => {
        if (reducer(descriptor, name, obj) !== false) {
          reducedDescriptors[name] = descriptor;
        }
      });

      Object.defineProperties(obj, reducedDescriptors);
    };

    /**
     * Makes all methods read-only
     * @param {Object} obj
     */

    const freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        const value = obj[name];

        if (!isFunction$1(value)) return;

        descriptor.enumerable = false;

        if ('writable' in descriptor) {
          descriptor.writable = false;
          return;
        }

        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error('Can not read-only method \'' + name + '\'');
          };
        }
      });
    };

    const toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};

      const define = (arr) => {
        arr.forEach(value => {
          obj[value] = true;
        });
      };

      isArray$1(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

      return obj;
    };

    const noop = () => {};

    const toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };

    var utils = {
      isArray: isArray$1,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject: isObject$1,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction: isFunction$1,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty: hasOwnProperty$1,
      hasOwnProp: hasOwnProperty$1, // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [config] The config.
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     *
     * @returns {Error} The created error.
     */
    function AxiosError(message, code, config, request, response) {
      Error.call(this);

      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = (new Error()).stack;
      }

      this.message = message;
      this.name = 'AxiosError';
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }

    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });

    const prototype$1 = AxiosError.prototype;
    const descriptors = {};

    [
      'ERR_BAD_OPTION_VALUE',
      'ERR_BAD_OPTION',
      'ECONNABORTED',
      'ETIMEDOUT',
      'ERR_NETWORK',
      'ERR_FR_TOO_MANY_REDIRECTS',
      'ERR_DEPRECATED',
      'ERR_BAD_RESPONSE',
      'ERR_BAD_REQUEST',
      'ERR_CANCELED',
      'ERR_NOT_SUPPORT',
      'ERR_INVALID_URL'
    // eslint-disable-next-line func-names
    ].forEach(code => {
      descriptors[code] = {value: code};
    });

    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

    // eslint-disable-next-line func-names
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);

      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, prop => {
        return prop !== 'isAxiosError';
      });

      AxiosError.call(axiosError, error.message, code, config, request, response);

      axiosError.cause = error;

      axiosError.name = error.name;

      customProps && Object.assign(axiosError, customProps);

      return axiosError;
    };

    /* eslint-env browser */
    var browser = typeof self == 'object' ? self.FormData : window.FormData;

    /**
     * Determines if the given thing is a array or js object.
     *
     * @param {string} thing - The object or array to be visited.
     *
     * @returns {boolean}
     */
    function isVisitable(thing) {
      return utils.isPlainObject(thing) || utils.isArray(thing);
    }

    /**
     * It removes the brackets from the end of a string
     *
     * @param {string} key - The key of the parameter.
     *
     * @returns {string} the key without the brackets.
     */
    function removeBrackets(key) {
      return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;
    }

    /**
     * It takes a path, a key, and a boolean, and returns a string
     *
     * @param {string} path - The path to the current key.
     * @param {string} key - The key of the current object being iterated over.
     * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
     *
     * @returns {string} The path to the current key.
     */
    function renderKey(path, key, dots) {
      if (!path) return key;
      return path.concat(key).map(function each(token, i) {
        // eslint-disable-next-line no-param-reassign
        token = removeBrackets(token);
        return !dots && i ? '[' + token + ']' : token;
      }).join(dots ? '.' : '');
    }

    /**
     * If the array is an array and none of its elements are visitable, then it's a flat array.
     *
     * @param {Array<any>} arr - The array to check
     *
     * @returns {boolean}
     */
    function isFlatArray(arr) {
      return utils.isArray(arr) && !arr.some(isVisitable);
    }

    const predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });

    /**
     * If the thing is a FormData object, return true, otherwise return false.
     *
     * @param {unknown} thing - The thing to check.
     *
     * @returns {boolean}
     */
    function isSpecCompliant(thing) {
      return thing && utils.isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator];
    }

    /**
     * Convert a data object to FormData
     *
     * @param {Object} obj
     * @param {?Object} [formData]
     * @param {?Object} [options]
     * @param {Function} [options.visitor]
     * @param {Boolean} [options.metaTokens = true]
     * @param {Boolean} [options.dots = false]
     * @param {?Boolean} [options.indexes = false]
     *
     * @returns {Object}
     **/

    /**
     * It converts an object into a FormData object
     *
     * @param {Object<any, any>} obj - The object to convert to form data.
     * @param {string} formData - The FormData object to append to.
     * @param {Object<string, any>} options
     *
     * @returns
     */
    function toFormData(obj, formData, options) {
      if (!utils.isObject(obj)) {
        throw new TypeError('target must be an object');
      }

      // eslint-disable-next-line no-param-reassign
      formData = formData || new (browser || FormData)();

      // eslint-disable-next-line no-param-reassign
      options = utils.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        // eslint-disable-next-line no-eq-null,eqeqeq
        return !utils.isUndefined(source[option]);
      });

      const metaTokens = options.metaTokens;
      // eslint-disable-next-line no-use-before-define
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
      const useBlob = _Blob && isSpecCompliant(formData);

      if (!utils.isFunction(visitor)) {
        throw new TypeError('visitor must be a function');
      }

      function convertValue(value) {
        if (value === null) return '';

        if (utils.isDate(value)) {
          return value.toISOString();
        }

        if (!useBlob && utils.isBlob(value)) {
          throw new AxiosError('Blob is not supported. Use a Buffer instead.');
        }

        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
        }

        return value;
      }

      /**
       * Default visitor.
       *
       * @param {*} value
       * @param {String|Number} key
       * @param {Array<String|Number>} path
       * @this {FormData}
       *
       * @returns {boolean} return true to visit the each prop of the value recursively
       */
      function defaultVisitor(value, key, path) {
        let arr = value;

        if (value && !path && typeof value === 'object') {
          if (utils.endsWith(key, '{}')) {
            // eslint-disable-next-line no-param-reassign
            key = metaTokens ? key : key.slice(0, -2);
            // eslint-disable-next-line no-param-reassign
            value = JSON.stringify(value);
          } else if (
            (utils.isArray(value) && isFlatArray(value)) ||
            (utils.isFileList(value) || utils.endsWith(key, '[]') && (arr = utils.toArray(value))
            )) {
            // eslint-disable-next-line no-param-reassign
            key = removeBrackets(key);

            arr.forEach(function each(el, index) {
              !(utils.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
                convertValue(el)
              );
            });
            return false;
          }
        }

        if (isVisitable(value)) {
          return true;
        }

        formData.append(renderKey(path, key, dots), convertValue(value));

        return false;
      }

      const stack = [];

      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });

      function build(value, path) {
        if (utils.isUndefined(value)) return;

        if (stack.indexOf(value) !== -1) {
          throw Error('Circular reference detected in ' + path.join('.'));
        }

        stack.push(value);

        utils.forEach(value, function each(el, key) {
          const result = !(utils.isUndefined(el) || el === null) && visitor.call(
            formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers
          );

          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });

        stack.pop();
      }

      if (!utils.isObject(obj)) {
        throw new TypeError('data must be an object');
      }

      build(obj);

      return formData;
    }

    /**
     * It encodes a string by replacing all characters that are not in the unreserved set with
     * their percent-encoded equivalents
     *
     * @param {string} str - The string to encode.
     *
     * @returns {string} The encoded string.
     */
    function encode$1(str) {
      const charMap = {
        '!': '%21',
        "'": '%27',
        '(': '%28',
        ')': '%29',
        '~': '%7E',
        '%20': '+',
        '%00': '\x00'
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }

    /**
     * It takes a params object and converts it to a FormData object
     *
     * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
     * @param {Object<string, any>} options - The options object passed to the Axios constructor.
     *
     * @returns {void}
     */
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];

      params && toFormData(params, this, options);
    }

    const prototype = AxiosURLSearchParams.prototype;

    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };

    prototype.toString = function toString(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;

      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + '=' + _encode(pair[1]);
      }, '').join('&');
    };

    /**
     * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
     * URI encoded counterparts
     *
     * @param {string} val The value to be encoded.
     *
     * @returns {string} The encoded value.
     */
    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @param {?object} options
     *
     * @returns {string} The formatted url
     */
    function buildURL(url, params, options) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }
      
      const _encode = options && options.encode || encode;

      const serializeFn = options && options.serialize;

      let serializedParams;

      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils.isURLSearchParams(params) ?
          params.toString() :
          new AxiosURLSearchParams(params, options).toString(_encode);
      }

      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");

        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    }

    class InterceptorManager {
      constructor() {
        this.handlers = [];
      }

      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }

      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }

      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }

      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    }

    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };

    var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

    var FormData$1 = FormData;

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     *
     * @returns {boolean}
     */
    const isStandardBrowserEnv = (() => {
      let product;
      if (typeof navigator !== 'undefined' && (
        (product = navigator.product) === 'ReactNative' ||
        product === 'NativeScript' ||
        product === 'NS')
      ) {
        return false;
      }

      return typeof window !== 'undefined' && typeof document !== 'undefined';
    })();

    var platform = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob
      },
      isStandardBrowserEnv,
      protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
    };

    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils.isBuffer(value)) {
            this.append(key, value.toString('base64'));
            return false;
          }

          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }

    /**
     * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
     *
     * @param {string} name - The name of the property to get.
     *
     * @returns An array of strings.
     */
    function parsePropPath(name) {
      // foo[x][y][z]
      // foo.x.y.z
      // foo-x-y-z
      // foo x y z
      return utils.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
        return match[0] === '[]' ? '' : match[1] || match[0];
      });
    }

    /**
     * Convert an array to an object.
     *
     * @param {Array<any>} arr - The array to convert to an object.
     *
     * @returns An object with the same keys and values as the array.
     */
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }

    /**
     * It takes a FormData object and returns a JavaScript object
     *
     * @param {string} formData The FormData object to convert to JSON.
     *
     * @returns {Object<string, any> | null} The converted object.
     */
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils.isArray(target) ? target.length : name;

        if (isLast) {
          if (utils.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }

          return !isNumericKey;
        }

        if (!target[name] || !utils.isObject(target[name])) {
          target[name] = [];
        }

        const result = buildPath(path, value, target[name], index);

        if (result && utils.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }

        return !isNumericKey;
      }

      if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
        const obj = {};

        utils.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });

        return obj;
      }

      return null;
    }

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     *
     * @returns {object} The response.
     */
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          'Request failed with status code ' + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }

    var cookies = platform.isStandardBrowserEnv ?

    // Standard browser envs support document.cookie
      (function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            const cookie = [];
            cookie.push(name + '=' + encodeURIComponent(value));

            if (utils.isNumber(expires)) {
              cookie.push('expires=' + new Date(expires).toGMTString());
            }

            if (utils.isString(path)) {
              cookie.push('path=' + path);
            }

            if (utils.isString(domain)) {
              cookie.push('domain=' + domain);
            }

            if (secure === true) {
              cookie.push('secure');
            }

            document.cookie = cookie.join('; ');
          },

          read: function read(name) {
            const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return (match ? decodeURIComponent(match[3]) : null);
          },

          remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
          }
        };
      })() :

    // Non standard browser env (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return {
          write: function write() {},
          read: function read() { return null; },
          remove: function remove() {}
        };
      })();

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     *
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     *
     * @returns {string} The combined URL
     */
    function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    }

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     *
     * @returns {string} The combined full path
     */
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }

    var isURLSameOrigin = platform.isStandardBrowserEnv ?

    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
      (function standardBrowserEnv() {
        const msie = /(msie|trident)/i.test(navigator.userAgent);
        const urlParsingNode = document.createElement('a');
        let originURL;

        /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
        function resolveURL(url) {
          let href = url;

          if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
          }

          urlParsingNode.setAttribute('href', href);

          // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
              urlParsingNode.pathname :
              '/' + urlParsingNode.pathname
          };
        }

        originURL = resolveURL(window.location.href);

        /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
        return function isURLSameOrigin(requestURL) {
          const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
          return (parsed.protocol === originURL.protocol &&
              parsed.host === originURL.host);
        };
      })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      })();

    /**
     * A `CanceledError` is an object that is thrown when an operation is canceled.
     *
     * @param {string=} message The message.
     * @param {Object=} config The config.
     * @param {Object=} request The request.
     *
     * @returns {CanceledError} The created error.
     */
    function CanceledError(message, config, request) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
      this.name = 'CanceledError';
    }

    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });

    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || '';
    }

    // RawAxiosHeaders whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    const ignoreDuplicateOf = utils.toObjectSet([
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ]);

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} rawHeaders Headers needing to be parsed
     *
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = rawHeaders => {
      const parsed = {};
      let key;
      let val;
      let i;

      rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
        i = line.indexOf(':');
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();

        if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
          return;
        }

        if (key === 'set-cookie') {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
      });

      return parsed;
    };

    const $internals = Symbol('internals');
    const $defaults = Symbol('defaults');

    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }

    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }

      return utils.isArray(value) ? value.map(normalizeValue) : String(value);
    }

    function parseTokens(str) {
      const tokens = Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;

      while ((match = tokensRE.exec(str))) {
        tokens[match[1]] = match[2];
      }

      return tokens;
    }

    function matchHeaderValue(context, value, header, filter) {
      if (utils.isFunction(filter)) {
        return filter.call(this, value, header);
      }

      if (!utils.isString(value)) return;

      if (utils.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }

      if (utils.isRegExp(filter)) {
        return filter.test(value);
      }
    }

    function formatHeader(header) {
      return header.trim()
        .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
          return char.toUpperCase() + str;
        });
    }

    function buildAccessors(obj, header) {
      const accessorName = utils.toCamelCase(' ' + header);

      ['get', 'set', 'has'].forEach(methodName => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }

    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }

    function AxiosHeaders(headers, defaults) {
      headers && this.set(headers);
      this[$defaults] = defaults || null;
    }

    Object.assign(AxiosHeaders.prototype, {
      set: function(header, valueOrRewrite, rewrite) {
        const self = this;

        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);

          if (!lHeader) {
            throw new Error('header name must be a non-empty string');
          }

          const key = findKey(self, lHeader);

          if (key && _rewrite !== true && (self[key] === false || _rewrite === false)) {
            return;
          }

          self[key || _header] = normalizeValue(_value);
        }

        if (utils.isPlainObject(header)) {
          utils.forEach(header, (_value, _header) => {
            setHeader(_value, _header, valueOrRewrite);
          });
        } else {
          setHeader(valueOrRewrite, header, rewrite);
        }

        return this;
      },

      get: function(header, parser) {
        header = normalizeHeader(header);

        if (!header) return undefined;

        const key = findKey(this, header);

        if (key) {
          const value = this[key];

          if (!parser) {
            return value;
          }

          if (parser === true) {
            return parseTokens(value);
          }

          if (utils.isFunction(parser)) {
            return parser.call(this, value, key);
          }

          if (utils.isRegExp(parser)) {
            return parser.exec(value);
          }

          throw new TypeError('parser must be boolean|regexp|function');
        }
      },

      has: function(header, matcher) {
        header = normalizeHeader(header);

        if (header) {
          const key = findKey(this, header);

          return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }

        return false;
      },

      delete: function(header, matcher) {
        const self = this;
        let deleted = false;

        function deleteHeader(_header) {
          _header = normalizeHeader(_header);

          if (_header) {
            const key = findKey(self, _header);

            if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
              delete self[key];

              deleted = true;
            }
          }
        }

        if (utils.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }

        return deleted;
      },

      clear: function() {
        return Object.keys(this).forEach(this.delete.bind(this));
      },

      normalize: function(format) {
        const self = this;
        const headers = {};

        utils.forEach(this, (value, header) => {
          const key = findKey(headers, header);

          if (key) {
            self[key] = normalizeValue(value);
            delete self[header];
            return;
          }

          const normalized = format ? formatHeader(header) : String(header).trim();

          if (normalized !== header) {
            delete self[header];
          }

          self[normalized] = normalizeValue(value);

          headers[normalized] = true;
        });

        return this;
      },

      toJSON: function(asStrings) {
        const obj = Object.create(null);

        utils.forEach(Object.assign({}, this[$defaults] || null, this),
          (value, header) => {
            if (value == null || value === false) return;
            obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value;
          });

        return obj;
      }
    });

    Object.assign(AxiosHeaders, {
      from: function(thing) {
        if (utils.isString(thing)) {
          return new this(parseHeaders(thing));
        }
        return thing instanceof this ? thing : new this(thing);
      },

      accessor: function(header) {
        const internals = this[$internals] = (this[$internals] = {
          accessors: {}
        });

        const accessors = internals.accessors;
        const prototype = this.prototype;

        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);

          if (!accessors[lHeader]) {
            buildAccessors(prototype, _header);
            accessors[lHeader] = true;
          }
        }

        utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

        return this;
      }
    });

    AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent']);

    utils.freezeMethods(AxiosHeaders.prototype);
    utils.freezeMethods(AxiosHeaders);

    /**
     * Calculate data maxRate
     * @param {Number} [samplesCount= 10]
     * @param {Number} [min= 1000]
     * @returns {Function}
     */
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;

      min = min !== undefined ? min : 1000;

      return function push(chunkLength) {
        const now = Date.now();

        const startedAt = timestamps[tail];

        if (!firstSampleTS) {
          firstSampleTS = now;
        }

        bytes[head] = chunkLength;
        timestamps[head] = now;

        let i = tail;
        let bytesCount = 0;

        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }

        head = (head + 1) % samplesCount;

        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }

        if (now - firstSampleTS < min) {
          return;
        }

        const passed = startedAt && now - startedAt;

        return  passed ? Math.round(bytesCount * 1000 / passed) : undefined;
      };
    }

    function progressEventReducer(listener, isDownloadStream) {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);

      return e => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : undefined;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;

        bytesNotified = loaded;

        const data = {
          loaded,
          total,
          progress: total ? (loaded / total) : undefined,
          bytes: progressBytes,
          rate: rate ? rate : undefined,
          estimated: rate && total && inRange ? (total - loaded) / rate : undefined
        };

        data[isDownloadStream ? 'download' : 'upload'] = true;

        listener(data);
      };
    }

    function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders.from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils.isFormData(requestData) && platform.isStandardBrowserEnv) {
          requestHeaders.setContentType(false); // Let the browser set it
        }

        let request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          const username = config.auth.username || '';
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
        }

        const fullPath = buildFullPath(config.baseURL, config.url);

        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          const responseHeaders = AxiosHeaders.from(
            'getAllResponseHeaders' in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };

          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          const transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (platform.isStandardBrowserEnv) {
          // Add xsrf header
          const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))
            && config.xsrfCookieName && cookies.read(config.xsrfCookieName);

          if (xsrfValue) {
            requestHeaders.set(config.xsrfHeaderName, xsrfValue);
          }
        }

        // Remove Content-Type if data is undefined
        requestData === undefined && requestHeaders.setContentType(null);

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = cancel => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        const protocol = parseProtocol(fullPath);

        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
          return;
        }


        // Send the request
        request.send(requestData || null);
      });
    }

    const adapters = {
      http: xhrAdapter,
      xhr: xhrAdapter
    };

    var adapters$1 = {
      getAdapter: (nameOrAdapter) => {
        if(utils.isString(nameOrAdapter)){
          const adapter = adapters[nameOrAdapter];

          if (!nameOrAdapter) {
            throw Error(
              utils.hasOwnProp(nameOrAdapter) ?
                `Adapter '${nameOrAdapter}' is not available in the build` :
                `Can not resolve adapter '${nameOrAdapter}'`
            );
          }

          return adapter
        }

        if (!utils.isFunction(nameOrAdapter)) {
          throw new TypeError('adapter is not a function');
        }

        return nameOrAdapter;
      },
      adapters
    };

    const DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    /**
     * If the browser has an XMLHttpRequest object, use the XHR adapter, otherwise use the HTTP
     * adapter
     *
     * @returns {Function}
     */
    function getDefaultAdapter() {
      let adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = adapters$1.getAdapter('xhr');
      } else if (typeof process !== 'undefined' && utils.kindOf(process) === 'process') {
        // For node use HTTP adapter
        adapter = adapters$1.getAdapter('http');
      }
      return adapter;
    }

    /**
     * It takes a string, tries to parse it, and if it fails, it returns the stringified version
     * of the input
     *
     * @param {any} rawValue - The value to be stringified.
     * @param {Function} parser - A function that parses a string into a JavaScript object.
     * @param {Function} encoder - A function that takes a value and returns a string.
     *
     * @returns {string} A stringified version of the rawValue.
     */
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    const defaults = {

      transitional: transitionalDefaults,

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || '';
        const hasJSONContentType = contentType.indexOf('application/json') > -1;
        const isObjectPayload = utils.isObject(data);

        if (isObjectPayload && utils.isHTMLForm(data)) {
          data = new FormData(data);
        }

        const isFormData = utils.isFormData(data);

        if (isFormData) {
          if (!hasJSONContentType) {
            return data;
          }
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }

        if (utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
          return data.toString();
        }

        let isFileList;

        if (isObjectPayload) {
          if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }

          if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
            const _FormData = this.env && this.env.FormData;

            return toFormData(
              isFileList ? {'files[]': data} : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }

        if (isObjectPayload || hasJSONContentType ) {
          headers.setContentType('application/json', false);
          return stringifySafely(data);
        }

        return data;
      }],

      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === 'json';

        if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;

          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    /**
     * Transform the data for a request or a response
     *
     * @param {Array|Function} fns A single function or Array of functions
     * @param {?Object} response The response object
     *
     * @returns {*} The resulting transformed data
     */
    function transformData(fns, response) {
      const config = this || defaults;
      const context = response || config;
      const headers = AxiosHeaders.from(context.headers);
      let data = context.data;

      utils.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
      });

      headers.normalize();

      return data;
    }

    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     *
     * @param {Object} config The config that is to be used for the request
     *
     * @returns {void}
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new CanceledError();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      config.headers = AxiosHeaders.from(config.headers);

      // Transform request data
      config.data = transformData.call(
        config,
        config.transformRequest
      );

      const adapter = config.adapter || defaults.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );

        response.headers = AxiosHeaders.from(response.headers);

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders.from(reason.response.headers);
          }
        }

        return Promise.reject(reason);
      });
    }

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     *
     * @returns {Object} New object resulting from merging config2 to config1
     */
    function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      const config = {};

      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      const mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'beforeRedirect': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        const merge = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge(prop);
        (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    }

    const VERSION = "1.1.3";

    const validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    const deprecatedWarnings = {};

    /**
     * Transitional option validator
     *
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     *
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return (value, opt, opts) => {
        if (validator === false) {
          throw new AxiosError(
            formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
            AxiosError.ERR_DEPRECATED
          );
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     *
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     *
     * @returns {object}
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator = schema[opt];
        if (validator) {
          const value = options[opt];
          const result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }

    var validator = {
      assertOptions,
      validators: validators$1
    };

    const validators = validator.validators;

    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     *
     * @return {Axios} A new instance of Axios
     */
    class Axios {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }

      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      request(configOrUrl, config) {
        /*eslint no-param-reassign:0*/
        // Allow for axios('example/url'[, config]) a la fetch API
        if (typeof configOrUrl === 'string') {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }

        config = mergeConfig(this.defaults, config);

        const {transitional, paramsSerializer} = config;

        if (transitional !== undefined) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }

        if (paramsSerializer !== undefined) {
          validator.assertOptions(paramsSerializer, {
            encode: validators.function,
            serialize: validators.function
          }, true);
        }

        // Set config.method
        config.method = (config.method || this.defaults.method || 'get').toLowerCase();

        // Flatten headers
        const defaultHeaders = config.headers && utils.merge(
          config.headers.common,
          config.headers[config.method]
        );

        defaultHeaders && utils.forEach(
          ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
          function cleanHeaderConfig(method) {
            delete config.headers[method];
          }
        );

        config.headers = new AxiosHeaders(config.headers, defaultHeaders);

        // filter out skipped interceptors
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
            return;
          }

          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });

        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });

        let promise;
        let i = 0;
        let len;

        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), undefined];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;

          promise = Promise.resolve(config);

          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }

          return promise;
        }

        len = requestInterceptorChain.length;

        let newConfig = config;

        i = 0;

        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }

        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }

        i = 0;
        len = responseInterceptorChain.length;

        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }

        return promise;
      }

      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    }

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/

      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              'Content-Type': 'multipart/form-data'
            } : {},
            url,
            data
          }));
        };
      }

      Axios.prototype[method] = generateHTTPMethod();

      Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
    });

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @param {Function} executor The executor function.
     *
     * @returns {CancelToken}
     */
    class CancelToken {
      constructor(executor) {
        if (typeof executor !== 'function') {
          throw new TypeError('executor must be a function.');
        }

        let resolvePromise;

        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });

        const token = this;

        // eslint-disable-next-line func-names
        this.promise.then(cancel => {
          if (!token._listeners) return;

          let i = token._listeners.length;

          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });

        // eslint-disable-next-line func-names
        this.promise.then = onfulfilled => {
          let _resolve;
          // eslint-disable-next-line func-names
          const promise = new Promise(resolve => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);

          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };

          return promise;
        };

        executor(function cancel(message, config, request) {
          if (token.reason) {
            // Cancellation has already been requested
            return;
          }

          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }

      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }

      /**
       * Subscribe to the cancel signal
       */

      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }

        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }

      /**
       * Unsubscribe from the cancel signal
       */

      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }

      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    }

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     *
     * @returns {Function}
     */
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     *
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    function isAxiosError(payload) {
      return utils.isObject(payload) && (payload.isAxiosError === true);
    }

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     *
     * @returns {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      const context = new Axios(defaultConfig);
      const instance = bind(Axios.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});

      // Copy context to instance
      utils.extend(instance, context, null, {allOwnKeys: true});

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    const axios = createInstance(defaults);

    // Expose Axios class to allow class inheritance
    axios.Axios = Axios;

    // Expose Cancel & CancelToken
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;

    // Expose AxiosError class
    axios.AxiosError = AxiosError;

    // alias for CanceledError for backward compatibility
    axios.Cancel = axios.CanceledError;

    // Expose all/spread
    axios.all = function all(promises) {
      return Promise.all(promises);
    };

    axios.spread = spread;

    // Expose isAxiosError
    axios.isAxiosError = isAxiosError;

    axios.formToJSON = thing => {
      return formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);
    };

    /* src\views\Login.svelte generated by Svelte v3.52.0 */

    const { console: console_1$8 } = globals;

    const file$t = "src\\views\\Login.svelte";

    function create_fragment$t(ctx) {
    	let t0;
    	let script0;
    	let script0_src_value;
    	let link0;
    	let link1;
    	let link2;
    	let link3;
    	let t1;
    	let main;
    	let div25;
    	let div2;
    	let div0;
    	let t2;
    	let div1;
    	let svg;
    	let path;
    	let t3;
    	let div20;
    	let div19;
    	let div6;
    	let div5;
    	let div4;
    	let div3;
    	let a0;
    	let img;
    	let img_src_value;
    	let t4;
    	let p0;
    	let t6;
    	let div18;
    	let div17;
    	let div15;
    	let div14;
    	let div7;
    	let h5;
    	let t8;
    	let p1;
    	let t10;
    	let div13;
    	let div9;
    	let label0;
    	let t11;
    	let span0;
    	let t13;
    	let input0;
    	let t14;
    	let div8;
    	let t16;
    	let div11;
    	let label1;
    	let t17;
    	let span1;
    	let t19;
    	let div10;
    	let input1;
    	let t20;
    	let div12;
    	let button;
    	let t22;
    	let input2;
    	let t23;
    	let div16;
    	let p2;
    	let t24;
    	let a1;
    	let t26;
    	let footer;
    	let div24;
    	let div23;
    	let div22;
    	let div21;
    	let p3;
    	let t27;
    	let script1;
    	let t29;
    	let i;
    	let t30;
    	let t31;
    	let div26;
    	let script2;
    	let script2_src_value;
    	let t32;
    	let script3;
    	let script3_src_value;
    	let t33;
    	let script4;
    	let script4_src_value;
    	let t34;
    	let script5;
    	let script5_src_value;
    	let t35;
    	let script6;
    	let script6_src_value;
    	let t36;
    	let script7;
    	let script7_src_value;
    	let t37;
    	let script8;
    	let script8_src_value;
    	let t38;
    	let script9;
    	let script9_src_value;
    	let t39;
    	let script10;
    	let script10_src_value;
    	let main_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			t0 = text("//verificado \r\n\r\n\r\n");
    			script0 = element("script");
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			link3 = element("link");
    			t1 = space();
    			main = element("main");
    			div25 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t2 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t3 = space();
    			div20 = element("div");
    			div19 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			a0 = element("a");
    			img = element("img");
    			t4 = space();
    			p0 = element("p");
    			p0.textContent = "DevStore";
    			t6 = space();
    			div18 = element("div");
    			div17 = element("div");
    			div15 = element("div");
    			div14 = element("div");
    			div7 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Bienvenido !";
    			t8 = space();
    			p1 = element("p");
    			p1.textContent = "Logueate para continuar en DevStore";
    			t10 = space();
    			div13 = element("div");
    			div9 = element("div");
    			label0 = element("label");
    			t11 = text("Correo\r\n                                            ");
    			span0 = element("span");
    			span0.textContent = "*";
    			t13 = space();
    			input0 = element("input");
    			t14 = space();
    			div8 = element("div");
    			div8.textContent = "Por favor, ingresa tu Correo.";
    			t16 = space();
    			div11 = element("div");
    			label1 = element("label");
    			t17 = text("Contraseña\r\n                                            ");
    			span1 = element("span");
    			span1.textContent = "*";
    			t19 = space();
    			div10 = element("div");
    			input1 = element("input");
    			t20 = space();
    			div12 = element("div");
    			button = element("button");
    			button.textContent = "Iniciar Sesión";
    			t22 = space();
    			input2 = element("input");
    			t23 = space();
    			div16 = element("div");
    			p2 = element("p");
    			t24 = text("No tienes una cuenta? ");
    			a1 = element("a");
    			a1.textContent = "Registrate";
    			t26 = space();
    			footer = element("footer");
    			div24 = element("div");
    			div23 = element("div");
    			div22 = element("div");
    			div21 = element("div");
    			p3 = element("p");
    			t27 = text("©\r\n                                ");
    			script1 = element("script");
    			script1.textContent = "document.write(new Date().getFullYear());";
    			t29 = text("\r\n                                Creado por\r\n                                ");
    			i = element("i");
    			t30 = text("\r\n                               DevStore");
    			t31 = space();
    			div26 = element("div");
    			script2 = element("script");
    			t32 = space();
    			script3 = element("script");
    			t33 = space();
    			script4 = element("script");
    			t34 = space();
    			script5 = element("script");
    			t35 = space();
    			script6 = element("script");
    			t36 = space();
    			script7 = element("script");
    			t37 = space();
    			script8 = element("script");
    			t38 = space();
    			script9 = element("script");
    			t39 = space();
    			script10 = element("script");
    			document.title = "DevEcommerce | Iniciar Sesión";
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$t, 44, 4, 1530);
    			attr_dev(link0, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link0, "rel", "stylesheet");
    			attr_dev(link0, "type", "text/css");
    			add_location(link0, file$t, 46, 4, 1622);
    			attr_dev(link1, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$t, 52, 4, 1776);
    			attr_dev(link2, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$t, 58, 4, 1923);
    			attr_dev(link3, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$t, 64, 4, 2071);
    			attr_dev(div0, "class", "bg-overlay");
    			add_location(div0, file$t, 75, 12, 2397);
    			attr_dev(path, "d", "M 0,36 C 144,53.6 432,123.2 720,124 C 1008,124.8 1296,56.8 1440,40L1440 140L0 140z");
    			add_location(path, file$t, 84, 20, 2720);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg, "viewBox", "0 0 1440 120");
    			add_location(svg, file$t, 78, 16, 2476);
    			attr_dev(div1, "class", "shape");
    			add_location(div1, file$t, 77, 12, 2439);
    			attr_dev(div2, "class", "auth-one-bg-position auth-one-bg");
    			attr_dev(div2, "id", "auth-particles");
    			add_location(div2, file$t, 74, 8, 2317);
    			if (!src_url_equal(img.src, img_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "height", "20");
    			add_location(img, file$t, 102, 36, 3464);
    			attr_dev(a0, "href", "index.html");
    			attr_dev(a0, "class", "d-inline-block auth-logo");
    			add_location(a0, file$t, 98, 32, 3264);
    			add_location(div3, file$t, 97, 28, 3225);
    			attr_dev(p0, "class", "mt-3 fs-15 fw-medium");
    			add_location(p0, file$t, 109, 28, 3804);
    			attr_dev(div4, "class", "text-center mt-sm-5 mb-4 text-white-50");
    			add_location(div4, file$t, 96, 24, 3143);
    			attr_dev(div5, "class", "col-lg-12");
    			add_location(div5, file$t, 95, 20, 3094);
    			attr_dev(div6, "class", "row");
    			add_location(div6, file$t, 94, 16, 3055);
    			attr_dev(h5, "class", "text-primary");
    			add_location(h5, file$t, 122, 36, 4360);
    			attr_dev(p1, "class", "text-muted");
    			add_location(p1, file$t, 123, 36, 4440);
    			attr_dev(div7, "class", "text-center mt-2");
    			add_location(div7, file$t, 121, 32, 4292);
    			attr_dev(span0, "class", "text-danger");
    			add_location(span0, file$t, 133, 44, 5005);
    			attr_dev(label0, "for", "useremail");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$t, 129, 40, 4775);
    			attr_dev(input0, "type", "email");
    			attr_dev(input0, "class", "form-control");
    			attr_dev(input0, "id", "useremail");
    			attr_dev(input0, "placeholder", "Ingresa tu correo");
    			input0.required = true;
    			attr_dev(input0, "name", "email");
    			add_location(input0, file$t, 135, 40, 5131);
    			attr_dev(div8, "class", "invalid-feedback");
    			add_location(div8, file$t, 144, 40, 5672);
    			attr_dev(div9, "class", "mb-3");
    			add_location(div9, file$t, 128, 36, 4715);
    			attr_dev(span1, "class", "text-danger");
    			add_location(span1, file$t, 155, 44, 6248);
    			attr_dev(label1, "class", "form-label");
    			attr_dev(label1, "for", "password-input");
    			add_location(label1, file$t, 151, 40, 6009);
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "class", "form-control pe-5 password-input");
    			attr_dev(input1, "placeholder", "Ingresa tu contraseña");
    			attr_dev(input1, "id", "password-input");
    			attr_dev(input1, "name", "password");
    			input1.required = true;
    			add_location(input1, file$t, 161, 44, 6610);
    			attr_dev(div10, "class", "position-relative auth-pass-inputgroup mb-3");
    			add_location(div10, file$t, 158, 40, 6420);
    			attr_dev(div11, "class", "mb-3");
    			add_location(div11, file$t, 149, 36, 5908);
    			attr_dev(button, "class", "btn btn-success w-100");
    			add_location(button, file$t, 183, 40, 8052);
    			attr_dev(div12, "class", "mt-4");
    			add_location(div12, file$t, 182, 36, 7992);
    			attr_dev(input2, "type", "hidden");
    			attr_dev(input2, "name", "action");
    			input2.value = "access";
    			add_location(input2, file$t, 190, 36, 8432);
    			attr_dev(div13, "class", "p-2 mt-4");
    			add_location(div13, file$t, 127, 32, 4655);
    			attr_dev(div14, "class", "card-body p-4");
    			add_location(div14, file$t, 120, 28, 4231);
    			attr_dev(div15, "class", "card mt-4");
    			add_location(div15, file$t, 119, 24, 4178);
    			attr_dev(a1, "href", "/registerUser");
    			attr_dev(a1, "class", "fw-semibold text-primary text-decoration-underline");
    			add_location(a1, file$t, 203, 54, 9007);
    			attr_dev(p2, "class", "mb-0");
    			add_location(p2, file$t, 202, 28, 8935);
    			attr_dev(div16, "class", "mt-4 text-center");
    			add_location(div16, file$t, 201, 24, 8875);
    			attr_dev(div17, "class", "col-md-8 col-lg-6 col-xl-5");
    			add_location(div17, file$t, 118, 20, 4112);
    			attr_dev(div18, "class", "row justify-content-center");
    			add_location(div18, file$t, 117, 16, 4050);
    			attr_dev(div19, "class", "container");
    			add_location(div19, file$t, 93, 12, 3014);
    			attr_dev(div20, "class", "auth-page-content");
    			add_location(div20, file$t, 92, 8, 2969);
    			add_location(script1, file$t, 227, 32, 9907);
    			attr_dev(i, "class", "mdi mdi-heart text-danger");
    			add_location(i, file$t, 231, 32, 10115);
    			attr_dev(p3, "class", "mb-0 text-muted");
    			add_location(p3, file$t, 225, 28, 9806);
    			attr_dev(div21, "class", "text-center");
    			add_location(div21, file$t, 224, 24, 9751);
    			attr_dev(div22, "class", "col-lg-12");
    			add_location(div22, file$t, 223, 20, 9702);
    			attr_dev(div23, "class", "row");
    			add_location(div23, file$t, 222, 16, 9663);
    			attr_dev(div24, "class", "container");
    			add_location(div24, file$t, 221, 12, 9622);
    			attr_dev(footer, "class", "footer");
    			add_location(footer, file$t, 220, 8, 9585);
    			attr_dev(div25, "class", "auth-page-wrapper pt-5");
    			add_location(div25, file$t, 72, 4, 2240);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$t, 246, 8, 10572);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$t, 249, 8, 10692);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$t, 252, 8, 10802);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$t, 255, 8, 10909);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$t, 258, 8, 11021);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$t, 261, 8, 11135);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/libs/particles.js/particles.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$t, 262, 8, 11204);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/particles.app.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$t, 265, 8, 11313);
    			if (!src_url_equal(script10.src, script10_src_value = "http://localhost:8080/js/pages/password-addon.init.js")) attr_dev(script10, "src", script10_src_value);
    			add_location(script10, file$t, 266, 8, 11394);
    			add_location(div26, file$t, 241, 4, 10399);
    			add_location(main, file$t, 71, 0, 2212);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, script0);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div25);
    			append_dev(div25, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path);
    			append_dev(div25, t3);
    			append_dev(div25, div20);
    			append_dev(div20, div19);
    			append_dev(div19, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, a0);
    			append_dev(a0, img);
    			append_dev(div4, t4);
    			append_dev(div4, p0);
    			append_dev(div19, t6);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, div15);
    			append_dev(div15, div14);
    			append_dev(div14, div7);
    			append_dev(div7, h5);
    			append_dev(div7, t8);
    			append_dev(div7, p1);
    			append_dev(div14, t10);
    			append_dev(div14, div13);
    			append_dev(div13, div9);
    			append_dev(div9, label0);
    			append_dev(label0, t11);
    			append_dev(label0, span0);
    			append_dev(div9, t13);
    			append_dev(div9, input0);
    			set_input_value(input0, /*dataUsuario*/ ctx[0].email);
    			append_dev(div9, t14);
    			append_dev(div9, div8);
    			append_dev(div13, t16);
    			append_dev(div13, div11);
    			append_dev(div11, label1);
    			append_dev(label1, t17);
    			append_dev(label1, span1);
    			append_dev(div11, t19);
    			append_dev(div11, div10);
    			append_dev(div10, input1);
    			set_input_value(input1, /*dataUsuario*/ ctx[0].password);
    			append_dev(div13, t20);
    			append_dev(div13, div12);
    			append_dev(div12, button);
    			append_dev(div13, t22);
    			append_dev(div13, input2);
    			append_dev(div17, t23);
    			append_dev(div17, div16);
    			append_dev(div16, p2);
    			append_dev(p2, t24);
    			append_dev(p2, a1);
    			append_dev(div25, t26);
    			append_dev(div25, footer);
    			append_dev(footer, div24);
    			append_dev(div24, div23);
    			append_dev(div23, div22);
    			append_dev(div22, div21);
    			append_dev(div21, p3);
    			append_dev(p3, t27);
    			append_dev(p3, script1);
    			append_dev(p3, t29);
    			append_dev(p3, i);
    			append_dev(p3, t30);
    			append_dev(main, t31);
    			append_dev(main, div26);
    			append_dev(div26, script2);
    			append_dev(div26, t32);
    			append_dev(div26, script3);
    			append_dev(div26, t33);
    			append_dev(div26, script4);
    			append_dev(div26, t34);
    			append_dev(div26, script5);
    			append_dev(div26, t35);
    			append_dev(div26, script6);
    			append_dev(div26, t36);
    			append_dev(div26, script7);
    			append_dev(div26, t37);
    			append_dev(div26, script8);
    			append_dev(div26, t38);
    			append_dev(div26, script9);
    			append_dev(div26, t39);
    			append_dev(div26, script10);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[2]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[3]),
    					listen_dev(button, "click", /*login*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dataUsuario*/ 1 && input0.value !== /*dataUsuario*/ ctx[0].email) {
    				set_input_value(input0, /*dataUsuario*/ ctx[0].email);
    			}

    			if (dirty & /*dataUsuario*/ 1 && input1.value !== /*dataUsuario*/ ctx[0].password) {
    				set_input_value(input1, /*dataUsuario*/ ctx[0].password);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!main_transition) main_transition = create_bidirectional_transition(main, fade, {}, true);
    				main_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!main_transition) main_transition = create_bidirectional_transition(main, fade, {}, false);
    			main_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(script0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			detach_dev(link3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(main);
    			if (detaching && main_transition) main_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Login', slots, []);
    	get_store_value(preferences);
    	preferences.set(0);
    	let dataUsuario = { email: '', password: '' };

    	function login() {
    		let bodyForm = new FormData();
    		bodyForm.append('action', 'access');
    		bodyForm.append('email', dataUsuario.email);
    		bodyForm.append('password', dataUsuario.password);

    		axios.post('https://newphpecommercejona.herokuapp.com/app/AuthController.php', bodyForm).then(function (response) {
    			if (response.data) {
    				preferences.set(response.data.data.id);
    				location.href = '/home'; // Redireccion a home
    			} else {
    				console.log('Nel');
    			}
    		}).catch(resp => console.log(resp));
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$8.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		dataUsuario.email = this.value;
    		$$invalidate(0, dataUsuario);
    	}

    	function input1_input_handler() {
    		dataUsuario.password = this.value;
    		$$invalidate(0, dataUsuario);
    	}

    	$$self.$capture_state = () => ({
    		fade,
    		get: get_store_value,
    		preferences,
    		axios,
    		dataUsuario,
    		login
    	});

    	$$self.$inject_state = $$props => {
    		if ('dataUsuario' in $$props) $$invalidate(0, dataUsuario = $$props.dataUsuario);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [dataUsuario, login, input0_input_handler, input1_input_handler];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$t.name
    		});
    	}
    }

    /* src\components\HeaderApp.svelte generated by Svelte v3.52.0 */

    const file$s = "src\\components\\HeaderApp.svelte";

    function create_fragment$s(ctx) {
    	let t0;
    	let header;
    	let div8;
    	let div7;
    	let div1;
    	let div0;
    	let a0;
    	let span0;
    	let img0;
    	let img0_src_value;
    	let t1;
    	let span1;
    	let img1;
    	let img1_src_value;
    	let t2;
    	let a1;
    	let span2;
    	let img2;
    	let img2_src_value;
    	let t3;
    	let span3;
    	let img3;
    	let img3_src_value;
    	let t4;
    	let div6;
    	let div2;
    	let button0;
    	let i0;
    	let t5;
    	let div5;
    	let button1;
    	let span7;
    	let img4;
    	let img4_src_value;
    	let t6;
    	let span6;
    	let span4;
    	let t7_value = /*data*/ ctx[0].name + "";
    	let t7;
    	let t8;
    	let t9_value = /*data*/ ctx[0].lastname + "";
    	let t9;
    	let t10;
    	let span5;
    	let t11_value = /*data*/ ctx[0].role + "";
    	let t11;
    	let t12;
    	let div4;
    	let h6;
    	let t13;
    	let t14_value = /*data*/ ctx[0].name + "";
    	let t14;
    	let t15;
    	let t16;
    	let a2;
    	let i1;
    	let t17;
    	let span8;
    	let t19;
    	let div3;
    	let t20;
    	let a3;
    	let i2;
    	let t21;
    	let span9;

    	const block = {
    		c: function create() {
    			t0 = text("r\r\n\r\n");
    			header = element("header");
    			div8 = element("div");
    			div7 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			span0 = element("span");
    			img0 = element("img");
    			t1 = space();
    			span1 = element("span");
    			img1 = element("img");
    			t2 = space();
    			a1 = element("a");
    			span2 = element("span");
    			img2 = element("img");
    			t3 = space();
    			span3 = element("span");
    			img3 = element("img");
    			t4 = space();
    			div6 = element("div");
    			div2 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t5 = space();
    			div5 = element("div");
    			button1 = element("button");
    			span7 = element("span");
    			img4 = element("img");
    			t6 = space();
    			span6 = element("span");
    			span4 = element("span");
    			t7 = text(t7_value);
    			t8 = space();
    			t9 = text(t9_value);
    			t10 = space();
    			span5 = element("span");
    			t11 = text(t11_value);
    			t12 = space();
    			div4 = element("div");
    			h6 = element("h6");
    			t13 = text("Bienvenido ");
    			t14 = text(t14_value);
    			t15 = text("!");
    			t16 = space();
    			a2 = element("a");
    			i1 = element("i");
    			t17 = space();
    			span8 = element("span");
    			span8.textContent = "Perfil";
    			t19 = space();
    			div3 = element("div");
    			t20 = space();
    			a3 = element("a");
    			i2 = element("i");
    			t21 = space();
    			span9 = element("span");
    			span9.textContent = "Salir";
    			if (!src_url_equal(img0.src, img0_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "");
    			attr_dev(img0, "height", "22");
    			add_location(img0, file$s, 12, 28, 408);
    			attr_dev(span0, "class", "logo-sm");
    			add_location(span0, file$s, 11, 24, 356);
    			if (!src_url_equal(img1.src, img1_src_value = "http://localhost:8080/images/logo-dark.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "");
    			attr_dev(img1, "height", "17");
    			add_location(img1, file$s, 19, 28, 720);
    			attr_dev(span1, "class", "logo-lg");
    			add_location(span1, file$s, 18, 24, 668);
    			attr_dev(a0, "href", "/home");
    			attr_dev(a0, "class", "logo logo-dark");
    			add_location(a0, file$s, 10, 20, 291);
    			if (!src_url_equal(img2.src, img2_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "");
    			attr_dev(img2, "height", "22");
    			add_location(img2, file$s, 29, 28, 1124);
    			attr_dev(span2, "class", "logo-sm");
    			add_location(span2, file$s, 28, 24, 1072);
    			if (!src_url_equal(img3.src, img3_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "");
    			attr_dev(img3, "height", "17");
    			add_location(img3, file$s, 36, 28, 1436);
    			attr_dev(span3, "class", "logo-lg");
    			add_location(span3, file$s, 35, 24, 1384);
    			attr_dev(a1, "href", "/home");
    			attr_dev(a1, "class", "logo logo-light");
    			add_location(a1, file$s, 27, 20, 1006);
    			attr_dev(div0, "class", "navbar-brand-box horizontal-logo");
    			add_location(div0, file$s, 9, 16, 223);
    			attr_dev(div1, "class", "d-flex");
    			add_location(div1, file$s, 7, 12, 154);
    			attr_dev(i0, "class", "bx bx-fullscreen fs-22");
    			add_location(i0, file$s, 53, 24, 2138);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-icon btn-topbar btn-ghost-secondary rounded-circle shadow-none");
    			attr_dev(button0, "datauser-toggle", "fullscreen");
    			add_location(button0, file$s, 48, 20, 1885);
    			attr_dev(div2, "class", "ms-1 header-item d-none d-sm-flex");
    			add_location(div2, file$s, 47, 16, 1816);
    			attr_dev(img4, "class", "rounded-circle header-profile-user");
    			if (!src_url_equal(img4.src, img4_src_value = /*data*/ ctx[0].avatar)) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "Header Avatar");
    			add_location(img4, file$s, 76, 28, 3137);
    			attr_dev(span4, "class", "d-none d-xl-inline-block ms-1 fw-medium user-name-text");
    			add_location(span4, file$s, 82, 32, 3450);
    			attr_dev(span5, "class", "d-none d-xl-block ms-1 fs-12 text-muted user-name-sub-text");
    			add_location(span5, file$s, 86, 32, 3696);
    			attr_dev(span6, "class", "text-start ms-xl-2");
    			add_location(span6, file$s, 81, 28, 3383);
    			attr_dev(span7, "class", "d-flex align-items-center");
    			add_location(span7, file$s, 75, 24, 3067);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn shadow-none");
    			attr_dev(button1, "id", "page-header-user-dropdown");
    			attr_dev(button1, "data-bs-toggle", "dropdown");
    			attr_dev(button1, "aria-haspopup", "true");
    			attr_dev(button1, "aria-expanded", "false");
    			add_location(button1, file$s, 67, 20, 2723);
    			attr_dev(h6, "class", "dropdown-header");
    			add_location(h6, file$s, 95, 24, 4128);
    			attr_dev(i1, "class", "mdi mdi-account-circle text-muted fs-16 align-middle me-1");
    			add_location(i1, file$s, 97, 29, 4281);
    			attr_dev(span8, "class", "align-middle");
    			add_location(span8, file$s, 100, 28, 4444);
    			attr_dev(a2, "class", "dropdown-item");
    			attr_dev(a2, "href", "/profile");
    			add_location(a2, file$s, 96, 24, 4210);
    			attr_dev(div3, "class", "dropdown-divider");
    			add_location(div3, file$s, 103, 24, 4542);
    			attr_dev(i2, "class", "mdi mdi-logout text-muted fs-16 align-middle me-1");
    			add_location(i2, file$s, 106, 29, 4666);
    			attr_dev(span9, "class", "align-middle");
    			attr_dev(span9, "datauser-key", "t-logout");
    			add_location(span9, file$s, 109, 28, 4821);
    			attr_dev(a3, "class", "dropdown-item");
    			attr_dev(a3, "href", "/");
    			add_location(a3, file$s, 105, 24, 4602);
    			attr_dev(div4, "class", "dropdown-menu dropdown-menu-end");
    			add_location(div4, file$s, 93, 20, 4019);
    			attr_dev(div5, "class", "dropdown ms-sm-3 header-item topbar-user");
    			add_location(div5, file$s, 66, 16, 2647);
    			attr_dev(div6, "class", "d-flex align-items-center");
    			add_location(div6, file$s, 46, 12, 1759);
    			attr_dev(div7, "class", "navbar-header");
    			add_location(div7, file$s, 6, 8, 113);
    			attr_dev(div8, "class", "layout-width");
    			add_location(div8, file$s, 5, 4, 77);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$s, 4, 0, 46);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, header, anchor);
    			append_dev(header, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(a0, span0);
    			append_dev(span0, img0);
    			append_dev(a0, t1);
    			append_dev(a0, span1);
    			append_dev(span1, img1);
    			append_dev(div0, t2);
    			append_dev(div0, a1);
    			append_dev(a1, span2);
    			append_dev(span2, img2);
    			append_dev(a1, t3);
    			append_dev(a1, span3);
    			append_dev(span3, img3);
    			append_dev(div7, t4);
    			append_dev(div7, div6);
    			append_dev(div6, div2);
    			append_dev(div2, button0);
    			append_dev(button0, i0);
    			append_dev(div6, t5);
    			append_dev(div6, div5);
    			append_dev(div5, button1);
    			append_dev(button1, span7);
    			append_dev(span7, img4);
    			append_dev(span7, t6);
    			append_dev(span7, span6);
    			append_dev(span6, span4);
    			append_dev(span4, t7);
    			append_dev(span4, t8);
    			append_dev(span4, t9);
    			append_dev(span6, t10);
    			append_dev(span6, span5);
    			append_dev(span5, t11);
    			append_dev(div5, t12);
    			append_dev(div5, div4);
    			append_dev(div4, h6);
    			append_dev(h6, t13);
    			append_dev(h6, t14);
    			append_dev(h6, t15);
    			append_dev(div4, t16);
    			append_dev(div4, a2);
    			append_dev(a2, i1);
    			append_dev(a2, t17);
    			append_dev(a2, span8);
    			append_dev(div4, t19);
    			append_dev(div4, div3);
    			append_dev(div4, t20);
    			append_dev(div4, a3);
    			append_dev(a3, i2);
    			append_dev(a3, t21);
    			append_dev(a3, span9);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*data*/ 1 && !src_url_equal(img4.src, img4_src_value = /*data*/ ctx[0].avatar)) {
    				attr_dev(img4, "src", img4_src_value);
    			}

    			if (dirty & /*data*/ 1 && t7_value !== (t7_value = /*data*/ ctx[0].name + "")) set_data_dev(t7, t7_value);
    			if (dirty & /*data*/ 1 && t9_value !== (t9_value = /*data*/ ctx[0].lastname + "")) set_data_dev(t9, t9_value);
    			if (dirty & /*data*/ 1 && t11_value !== (t11_value = /*data*/ ctx[0].role + "")) set_data_dev(t11, t11_value);
    			if (dirty & /*data*/ 1 && t14_value !== (t14_value = /*data*/ ctx[0].name + "")) set_data_dev(t14, t14_value);
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(header);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HeaderApp', slots, []);
    	let { data } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (data === undefined && !('data' in $$props || $$self.$$.bound[$$self.$$.props['data']])) {
    			console.warn("<HeaderApp> was created without expected prop 'data'");
    		}
    	});

    	const writable_props = ['data'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HeaderApp> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    	};

    	$$self.$capture_state = () => ({ data });

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [data];
    }

    class HeaderApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, { data: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HeaderApp",
    			options,
    			id: create_fragment$s.name
    		});
    	}

    	get data() {
    		throw new Error("<HeaderApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<HeaderApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Sidebar.svelte generated by Svelte v3.52.0 */

    const file$r = "src\\components\\Sidebar.svelte";

    function create_fragment$r(ctx) {
    	let div0;
    	let a0;
    	let span0;
    	let img0;
    	let img0_src_value;
    	let t0;
    	let span1;
    	let img1;
    	let img1_src_value;
    	let t1;
    	let a1;
    	let span2;
    	let img2;
    	let img2_src_value;
    	let t2;
    	let span3;
    	let img3;
    	let img3_src_value;
    	let t3;
    	let button;
    	let i0;
    	let t4;
    	let div3;
    	let div2;
    	let div1;
    	let t5;
    	let ul;
    	let li0;
    	let span4;
    	let t7;
    	let li1;
    	let a2;
    	let i1;
    	let t8;
    	let span5;
    	let t10;
    	let li2;
    	let a3;
    	let i2;
    	let t11;
    	let span6;
    	let t13;
    	let li3;
    	let a4;
    	let i3;
    	let t14;
    	let span7;
    	let t16;
    	let li4;
    	let a5;
    	let i4;
    	let t17;
    	let span8;
    	let t19;
    	let li5;
    	let a6;
    	let i5;
    	let t20;
    	let span9;
    	let t22;
    	let li6;
    	let a7;
    	let i6;
    	let t23;
    	let span10;
    	let t25;
    	let div4;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			a0 = element("a");
    			span0 = element("span");
    			img0 = element("img");
    			t0 = space();
    			span1 = element("span");
    			img1 = element("img");
    			t1 = space();
    			a1 = element("a");
    			span2 = element("span");
    			img2 = element("img");
    			t2 = space();
    			span3 = element("span");
    			img3 = element("img");
    			t3 = space();
    			button = element("button");
    			i0 = element("i");
    			t4 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			t5 = space();
    			ul = element("ul");
    			li0 = element("li");
    			span4 = element("span");
    			span4.textContent = "Menu";
    			t7 = space();
    			li1 = element("li");
    			a2 = element("a");
    			i1 = element("i");
    			t8 = space();
    			span5 = element("span");
    			span5.textContent = "Usuarios";
    			t10 = space();
    			li2 = element("li");
    			a3 = element("a");
    			i2 = element("i");
    			t11 = space();
    			span6 = element("span");
    			span6.textContent = "Clientes";
    			t13 = space();
    			li3 = element("li");
    			a4 = element("a");
    			i3 = element("i");
    			t14 = space();
    			span7 = element("span");
    			span7.textContent = "Productos";
    			t16 = space();
    			li4 = element("li");
    			a5 = element("a");
    			i4 = element("i");
    			t17 = space();
    			span8 = element("span");
    			span8.textContent = "Catálogos";
    			t19 = space();
    			li5 = element("li");
    			a6 = element("a");
    			i5 = element("i");
    			t20 = space();
    			span9 = element("span");
    			span9.textContent = "Cupones";
    			t22 = space();
    			li6 = element("li");
    			a7 = element("a");
    			i6 = element("i");
    			t23 = space();
    			span10 = element("span");
    			span10.textContent = "Ordenes";
    			t25 = space();
    			div4 = element("div");
    			if (!src_url_equal(img0.src, img0_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "");
    			attr_dev(img0, "height", "22");
    			add_location(img0, file$r, 5, 12, 159);
    			attr_dev(span0, "class", "logo-sm");
    			add_location(span0, file$r, 4, 8, 123);
    			if (!src_url_equal(img1.src, img1_src_value = "http://localhost:8080/images/logo-dark.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "");
    			attr_dev(img1, "height", "17");
    			add_location(img1, file$r, 12, 12, 359);
    			attr_dev(span1, "class", "logo-lg");
    			add_location(span1, file$r, 11, 8, 323);
    			attr_dev(a0, "href", "/home");
    			attr_dev(a0, "class", "logo logo-dark");
    			add_location(a0, file$r, 3, 4, 74);
    			if (!src_url_equal(img2.src, img2_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "");
    			attr_dev(img2, "height", "22");
    			add_location(img2, file$r, 22, 12, 641);
    			attr_dev(span2, "class", "logo-sm");
    			add_location(span2, file$r, 21, 8, 605);
    			if (!src_url_equal(img3.src, img3_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "");
    			attr_dev(img3, "height", "17");
    			add_location(img3, file$r, 29, 12, 841);
    			attr_dev(span3, "class", "logo-lg");
    			add_location(span3, file$r, 28, 8, 805);
    			attr_dev(a1, "href", "/home");
    			attr_dev(a1, "class", "logo logo-light");
    			add_location(a1, file$r, 20, 4, 555);
    			attr_dev(i0, "class", "ri-record-circle-line");
    			add_location(i0, file$r, 41, 8, 1172);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "btn btn-sm p-0 fs-20 header-item float-end btn-vertical-sm-hover");
    			attr_dev(button, "id", "vertical-hover");
    			add_location(button, file$r, 36, 4, 1014);
    			attr_dev(div0, "class", "navbar-brand-box");
    			add_location(div0, file$r, 1, 0, 15);
    			attr_dev(div1, "id", "two-column-menu");
    			add_location(div1, file$r, 47, 8, 1299);
    			attr_dev(span4, "data-key", "t-menu");
    			add_location(span4, file$r, 50, 16, 1431);
    			attr_dev(li0, "class", "menu-title");
    			add_location(li0, file$r, 49, 12, 1390);
    			attr_dev(i1, "class", "mdi mdi-speedometer");
    			add_location(i1, file$r, 54, 20, 1604);
    			attr_dev(span5, "data-key", "t-dashboards");
    			add_location(span5, file$r, 55, 20, 1659);
    			attr_dev(a2, "class", "nav-link menu-link");
    			attr_dev(a2, "href", "/users");
    			add_location(a2, file$r, 53, 16, 1538);
    			attr_dev(li1, "class", "nav-item");
    			add_location(li1, file$r, 52, 12, 1499);
    			attr_dev(i2, "class", "mdi mdi-view-grid-plus-outline");
    			add_location(i2, file$r, 61, 20, 1908);
    			attr_dev(span6, "data-key", "t-apps");
    			add_location(span6, file$r, 62, 20, 1974);
    			attr_dev(a3, "class", "nav-link menu-link");
    			attr_dev(a3, "href", "/clientes");
    			add_location(a3, file$r, 60, 16, 1839);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$r, 59, 12, 1800);
    			attr_dev(i3, "class", "mdi mdi-view-carousel-outline");
    			add_location(i3, file$r, 68, 20, 2174);
    			attr_dev(span7, "data-key", "t-layouts");
    			add_location(span7, file$r, 69, 20, 2239);
    			attr_dev(a4, "class", "nav-link menu-link");
    			attr_dev(a4, "href", "/home");
    			add_location(a4, file$r, 67, 16, 2109);
    			attr_dev(li3, "class", "nav-item");
    			add_location(li3, file$r, 66, 12, 2070);
    			attr_dev(i4, "class", "mdi mdi-account-circle-outline");
    			add_location(i4, file$r, 76, 20, 2489);
    			attr_dev(span8, "data-key", "t-authentication");
    			add_location(span8, file$r, 77, 20, 2555);
    			attr_dev(a5, "class", "nav-link menu-link");
    			attr_dev(a5, "href", "/catalogos");
    			add_location(a5, file$r, 75, 16, 2419);
    			attr_dev(li4, "class", "nav-item");
    			add_location(li4, file$r, 74, 12, 2380);
    			attr_dev(i5, "class", "mdi mdi-sticker-text-outline");
    			add_location(i5, file$r, 83, 20, 2769);
    			attr_dev(span9, "data-key", "t-pages");
    			add_location(span9, file$r, 84, 20, 2833);
    			attr_dev(a6, "class", "nav-link menu-link");
    			attr_dev(a6, "href", "/cupones");
    			add_location(a6, file$r, 82, 16, 2701);
    			attr_dev(li5, "class", "nav-item");
    			add_location(li5, file$r, 81, 12, 2662);
    			attr_dev(i6, "class", "ri-rocket-line");
    			add_location(i6, file$r, 90, 20, 3036);
    			attr_dev(span10, "data-key", "t-landing");
    			add_location(span10, file$r, 91, 20, 3086);
    			attr_dev(a7, "class", "nav-link menu-link");
    			attr_dev(a7, "href", "/ordenes");
    			add_location(a7, file$r, 89, 16, 2968);
    			attr_dev(li6, "class", "nav-item");
    			add_location(li6, file$r, 88, 12, 2929);
    			attr_dev(ul, "class", "navbar-nav");
    			attr_dev(ul, "id", "navbar-nav");
    			add_location(ul, file$r, 48, 8, 1337);
    			attr_dev(div2, "class", "container-fluid");
    			add_location(div2, file$r, 46, 4, 1260);
    			attr_dev(div3, "id", "scrollbar");
    			add_location(div3, file$r, 45, 0, 1234);
    			attr_dev(div4, "class", "sidebar-background");
    			add_location(div4, file$r, 99, 0, 3229);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, a0);
    			append_dev(a0, span0);
    			append_dev(span0, img0);
    			append_dev(a0, t0);
    			append_dev(a0, span1);
    			append_dev(span1, img1);
    			append_dev(div0, t1);
    			append_dev(div0, a1);
    			append_dev(a1, span2);
    			append_dev(span2, img2);
    			append_dev(a1, t2);
    			append_dev(a1, span3);
    			append_dev(span3, img3);
    			append_dev(div0, t3);
    			append_dev(div0, button);
    			append_dev(button, i0);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div2, t5);
    			append_dev(div2, ul);
    			append_dev(ul, li0);
    			append_dev(li0, span4);
    			append_dev(ul, t7);
    			append_dev(ul, li1);
    			append_dev(li1, a2);
    			append_dev(a2, i1);
    			append_dev(a2, t8);
    			append_dev(a2, span5);
    			append_dev(ul, t10);
    			append_dev(ul, li2);
    			append_dev(li2, a3);
    			append_dev(a3, i2);
    			append_dev(a3, t11);
    			append_dev(a3, span6);
    			append_dev(ul, t13);
    			append_dev(ul, li3);
    			append_dev(li3, a4);
    			append_dev(a4, i3);
    			append_dev(a4, t14);
    			append_dev(a4, span7);
    			append_dev(ul, t16);
    			append_dev(ul, li4);
    			append_dev(li4, a5);
    			append_dev(a5, i4);
    			append_dev(a5, t17);
    			append_dev(a5, span8);
    			append_dev(ul, t19);
    			append_dev(ul, li5);
    			append_dev(li5, a6);
    			append_dev(a6, i5);
    			append_dev(a6, t20);
    			append_dev(a6, span9);
    			append_dev(ul, t22);
    			append_dev(ul, li6);
    			append_dev(li6, a7);
    			append_dev(a7, i6);
    			append_dev(a7, t23);
    			append_dev(a7, span10);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, div4, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sidebar', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sidebar> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Sidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sidebar",
    			options,
    			id: create_fragment$r.name
    		});
    	}
    }

    /* src\views\Home.svelte generated by Svelte v3.52.0 */

    const { console: console_1$7 } = globals;
    const file$q = "src\\views\\Home.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (277:0) {:catch error}
    function create_catch_block_1$b(ctx) {
    	const block = {
    		c: noop$1,
    		m: noop$1,
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: noop$1
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$b.name,
    		type: "catch",
    		source: "(277:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (108:0) {:then data}
    function create_then_block$b(ctx) {
    	let main;
    	let div10;
    	let headerapp;
    	let t0;
    	let div0;
    	let sidebar;
    	let t1;
    	let div1;
    	let t2;
    	let div8;
    	let div7;
    	let div6;
    	let div5;
    	let div4;
    	let div3;
    	let h4;
    	let t4;
    	let div2;
    	let ol;
    	let li0;
    	let a;
    	let t6;
    	let li1;
    	let t8;
    	let t9;
    	let div9;
    	let script0;
    	let script0_src_value;
    	let t10;
    	let script1;
    	let script1_src_value;
    	let t11;
    	let script2;
    	let script2_src_value;
    	let t12;
    	let script3;
    	let script3_src_value;
    	let t13;
    	let script4;
    	let script4_src_value;
    	let t14;
    	let script5;
    	let script5_src_value;
    	let t15;
    	let script6;
    	let script6_src_value;
    	let t16;
    	let script7;
    	let script7_src_value;
    	let t17;
    	let script8;
    	let script8_src_value;
    	let main_transition;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[6] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$b,
    		then: create_then_block_1$b,
    		catch: create_catch_block$b,
    		value: 6,
    		error: 10,
    		blocks: [,,,]
    	};

    	handle_promise(/*getAllProducts*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div10 = element("div");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div8 = element("div");
    			div7 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Productos";
    			t4 = space();
    			div2 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a = element("a");
    			a.textContent = "Ecommerce";
    			t6 = space();
    			li1 = element("li");
    			li1.textContent = "Productos";
    			t8 = space();
    			info.block.c();
    			t9 = space();
    			div9 = element("div");
    			script0 = element("script");
    			t10 = space();
    			script1 = element("script");
    			t11 = space();
    			script2 = element("script");
    			t12 = space();
    			script3 = element("script");
    			t13 = space();
    			script4 = element("script");
    			t14 = space();
    			script5 = element("script");
    			t15 = space();
    			script6 = element("script");
    			t16 = space();
    			script7 = element("script");
    			t17 = space();
    			script8 = element("script");
    			attr_dev(div0, "class", "app-menu navbar-menu");
    			add_location(div0, file$q, 115, 12, 3447);
    			attr_dev(div1, "class", "vertical-overlay");
    			add_location(div1, file$q, 121, 12, 3623);
    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$q, 135, 36, 4377);
    			attr_dev(a, "href", "#!");
    			add_location(a, file$q, 140, 48, 4674);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$q, 139, 44, 4596);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$q, 142, 44, 4797);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$q, 138, 40, 4523);
    			attr_dev(div2, "class", "page-title-right");
    			add_location(div2, file$q, 137, 36, 4451);
    			attr_dev(div3, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div3, file$q, 132, 32, 4187);
    			attr_dev(div4, "class", "col-12");
    			add_location(div4, file$q, 131, 28, 4133);
    			attr_dev(div5, "class", "row");
    			add_location(div5, file$q, 130, 24, 4086);
    			attr_dev(div6, "class", "container-fluid");
    			add_location(div6, file$q, 128, 20, 3980);
    			attr_dev(div7, "class", "page-content");
    			add_location(div7, file$q, 127, 16, 3932);
    			attr_dev(div8, "class", "main-content");
    			add_location(div8, file$q, 126, 12, 3888);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$q, 246, 16, 10904);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$q, 249, 16, 11048);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$q, 252, 16, 11182);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$q, 255, 16, 11313);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$q, 258, 16, 11449);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$q, 261, 16, 11587);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/nouislider/nouislider.min.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$q, 264, 16, 11712);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/wnumb/wNumb.min.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$q, 267, 16, 11848);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$q, 272, 16, 12009);
    			add_location(div9, file$q, 241, 12, 10664);
    			attr_dev(div10, "id", "layout-wrapper");
    			add_location(div10, file$q, 110, 8, 3290);
    			add_location(main, file$q, 108, 4, 3229);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div10);
    			mount_component(headerapp, div10, null);
    			append_dev(div10, t0);
    			append_dev(div10, div0);
    			mount_component(sidebar, div0, null);
    			append_dev(div10, t1);
    			append_dev(div10, div1);
    			append_dev(div10, t2);
    			append_dev(div10, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h4);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a);
    			append_dev(ol, t6);
    			append_dev(ol, li1);
    			append_dev(div6, t8);
    			info.block.m(div6, info.anchor = null);
    			info.mount = () => div6;
    			info.anchor = null;
    			append_dev(div10, t9);
    			append_dev(div10, div9);
    			append_dev(div9, script0);
    			append_dev(div9, t10);
    			append_dev(div9, script1);
    			append_dev(div9, t11);
    			append_dev(div9, script2);
    			append_dev(div9, t12);
    			append_dev(div9, script3);
    			append_dev(div9, t13);
    			append_dev(div9, script4);
    			append_dev(div9, t14);
    			append_dev(div9, script5);
    			append_dev(div9, t15);
    			append_dev(div9, script6);
    			append_dev(div9, t16);
    			append_dev(div9, script7);
    			append_dev(div9, t17);
    			append_dev(div9, script8);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			transition_in(info.block);

    			add_render_callback(() => {
    				if (!main_transition) main_transition = create_bidirectional_transition(main, fade, {}, true);
    				main_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);

    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			if (!main_transition) main_transition = create_bidirectional_transition(main, fade, {}, false);
    			main_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    			if (detaching && main_transition) main_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$b.name,
    		type: "then",
    		source: "(108:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (231:24) {:catch error}
    function create_catch_block$b(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Error al cargar la tabla");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$b.name,
    		type: "catch",
    		source: "(231:24) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (156:24) {:then data}
    function create_then_block_1$b(ctx) {
    	let div;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t2;
    	let th2;
    	let t4;
    	let th3;
    	let t6;
    	let th4;
    	let t8;
    	let th5;
    	let t10;
    	let tbody;
    	let div_transition;
    	let current;
    	let each_value = /*data*/ ctx[6];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "id";
    			t1 = space();
    			th1 = element("th");
    			t2 = space();
    			th2 = element("th");
    			th2.textContent = "Nombre";
    			t4 = space();
    			th3 = element("th");
    			th3.textContent = "Slug";
    			t6 = space();
    			th4 = element("th");
    			th4.textContent = "Descripcion";
    			t8 = space();
    			th5 = element("th");
    			th5.textContent = "Acciones";
    			t10 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(th0, "scope", "col");
    			set_style(th0, "display", "none");
    			add_location(th0, file$q, 166, 44, 5951);
    			attr_dev(th1, "scope", "col");
    			add_location(th1, file$q, 171, 44, 6237);
    			attr_dev(th2, "scope", "col");
    			add_location(th2, file$q, 172, 44, 6301);
    			attr_dev(th3, "scope", "col");
    			add_location(th3, file$q, 173, 44, 6374);
    			attr_dev(th4, "scope", "col");
    			add_location(th4, file$q, 174, 44, 6445);
    			attr_dev(th5, "scope", "col");
    			add_location(th5, file$q, 175, 44, 6523);
    			add_location(tr, file$q, 165, 40, 5901);
    			add_location(thead, file$q, 164, 36, 5852);
    			add_location(tbody, file$q, 178, 36, 6683);
    			attr_dev(table, "class", "table table-striped table-products");
    			set_style(table, "background-color", "#fff", 1);
    			add_location(table, file$q, 160, 32, 5613);
    			attr_dev(div, "class", "table-container");
    			add_location(div, file$q, 156, 28, 5410);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t2);
    			append_dev(tr, th2);
    			append_dev(tr, t4);
    			append_dev(tr, th3);
    			append_dev(tr, t6);
    			append_dev(tr, th4);
    			append_dev(tr, t8);
    			append_dev(tr, th5);
    			append_dev(table, t10);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*getAllProducts*/ 2) {
    				each_value = /*data*/ ctx[6];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, fly, { y: 200, duration: 2000 }, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div_transition) div_transition = create_bidirectional_transition(div, fly, { y: 200, duration: 2000 }, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$b.name,
    		type: "then",
    		source: "(156:24) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (190:52) {:else}
    function create_else_block$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "img-cover");
    			if (!src_url_equal(img.src, img_src_value = "https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			add_location(img, file$q, 190, 56, 7624);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(190:52) {:else}",
    		ctx
    	});

    	return block;
    }

    // (184:52) {#if datas.cover != 'https://crud.jonathansoto.mx/storage/products/'}
    function create_if_block$4(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "img-cover");
    			if (!src_url_equal(img.src, img_src_value = /*datas*/ ctx[7].cover)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*datas*/ ctx[7].name);
    			add_location(img, file$q, 184, 56, 7205);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(184:52) {#if datas.cover != 'https://crud.jonathansoto.mx/storage/products/'}",
    		ctx
    	});

    	return block;
    }

    // (180:40) {#each data as datas}
    function create_each_block$b(ctx) {
    	let tr;
    	let td0;
    	let t0;
    	let td1;
    	let t1_value = /*datas*/ ctx[7].name + "";
    	let t1;
    	let t2;
    	let td2;
    	let t3_value = /*datas*/ ctx[7].slug + "";
    	let t3;
    	let t4;
    	let td3;
    	let t5_value = /*datas*/ ctx[7].description + "";
    	let t5;
    	let t6;
    	let td4;
    	let div;
    	let a0;
    	let t7;
    	let t8;
    	let a1;
    	let t10;
    	let a2;
    	let t12;

    	function select_block_type(ctx, dirty) {
    		if (/*datas*/ ctx[7].cover != 'https://crud.jonathansoto.mx/storage/products/') return create_if_block$4;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			if_block.c();
    			t0 = space();
    			td1 = element("td");
    			t1 = text(t1_value);
    			t2 = space();
    			td2 = element("td");
    			t3 = text(t3_value);
    			t4 = space();
    			td3 = element("td");
    			t5 = text(t5_value);
    			t6 = space();
    			td4 = element("td");
    			div = element("div");
    			a0 = element("a");
    			t7 = text("Ver detalles");
    			t8 = space();
    			a1 = element("a");
    			a1.textContent = "Editar";
    			t10 = space();
    			a2 = element("a");
    			a2.textContent = "Borrar";
    			t12 = space();
    			attr_dev(td0, "class", "img-container");
    			add_location(td0, file$q, 181, 48, 6853);
    			add_location(td1, file$q, 197, 48, 8141);
    			add_location(td2, file$q, 198, 48, 8212);
    			add_location(td3, file$q, 199, 48, 8283);
    			attr_dev(a0, "href", "/viewProduct/" + /*datas*/ ctx[7].id);
    			attr_dev(a0, "type", "button");
    			attr_dev(a0, "class", "btn btn-primary");
    			add_location(a0, file$q, 205, 56, 8691);
    			attr_dev(a1, "href", "/");
    			attr_dev(a1, "type", "button");
    			attr_dev(a1, "class", "btn btn-warning");
    			add_location(a1, file$q, 211, 56, 9140);
    			attr_dev(a2, "href", "/");
    			attr_dev(a2, "type", "button");
    			attr_dev(a2, "class", "btn btn-danger");
    			add_location(a2, file$q, 217, 56, 9561);
    			attr_dev(div, "class", "btn-table");
    			set_style(div, "display", "flex");
    			add_location(div, file$q, 201, 52, 8419);
    			add_location(td4, file$q, 200, 48, 8361);
    			add_location(tr, file$q, 180, 44, 6799);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			if_block.m(td0, null);
    			append_dev(tr, t0);
    			append_dev(tr, td1);
    			append_dev(td1, t1);
    			append_dev(tr, t2);
    			append_dev(tr, td2);
    			append_dev(td2, t3);
    			append_dev(tr, t4);
    			append_dev(tr, td3);
    			append_dev(td3, t5);
    			append_dev(tr, t6);
    			append_dev(tr, td4);
    			append_dev(td4, div);
    			append_dev(div, a0);
    			append_dev(a0, t7);
    			append_dev(div, t8);
    			append_dev(div, a1);
    			append_dev(div, t10);
    			append_dev(div, a2);
    			append_dev(tr, t12);
    		},
    		p: function update(ctx, dirty) {
    			if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(180:40) {#each data as datas}",
    		ctx
    	});

    	return block;
    }

    // (154:49)                               Loading Table...                          {:then data}
    function create_pending_block_1$b(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading Table...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$b.name,
    		type: "pending",
    		source: "(154:49)                               Loading Table...                          {:then data}",
    		ctx
    	});

    	return block;
    }

    // (106:28)       Loading..  {:then data}
    function create_pending_block$b(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading..");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$b.name,
    		type: "pending",
    		source: "(106:28)       Loading..  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let link0;
    	let link1;
    	let link2;
    	let script;
    	let script_src_value;
    	let link3;
    	let link4;
    	let link5;
    	let link6;
    	let t;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$b,
    		then: create_then_block$b,
    		catch: create_catch_block_1$b,
    		value: 6,
    		error: 10,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[0](), info);

    	const block = {
    		c: function create() {
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			script = element("script");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			link6 = element("link");
    			t = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Home";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$q, 63, 4, 2070);
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "href", "http://localhost:8080/libs/nouislider/nouislider.min.css");
    			add_location(link1, file$q, 66, 4, 2189);
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "href", "http://localhost:8080/libs/gridjs/theme/mermaid.min.css");
    			add_location(link2, file$q, 72, 4, 2334);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$q, 78, 4, 2484);
    			attr_dev(link3, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$q, 80, 4, 2576);
    			attr_dev(link4, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$q, 86, 4, 2730);
    			attr_dev(link5, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$q, 92, 4, 2877);
    			attr_dev(link6, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link6, "rel", "stylesheet");
    			attr_dev(link6, "type", "text/css");
    			add_location(link6, file$q, 98, 4, 3025);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			append_dev(document.head, script);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			append_dev(document.head, link6);
    			insert_dev(target, t, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			detach_dev(script);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			detach_dev(link6);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(2, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Home', slots, []);
    	get_store_value(preferences);
    	get_store_value(dataActiveUser);

    	// Se guarda en una variable para poder condicionar
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = '/';
    	}

    	var myHeaders = new Headers();
    	myHeaders.append('Authorization', `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	var requestOptions = {
    		method: 'GET',
    		headers: myHeaders,
    		redirect: 'follow'
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();

    		// Se guarda la info del usuario en la variable global correspondiente
    		dataActiveUser.set(dataUser.data);

    		return dataUser.data;
    	}

    	async function getAllProducts() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/products`, requestOptions);
    		const allProducts = await response.json();
    		console.log(allProducts.data);

    		// Se guarda la info del usuario en la variable global correspondiente
    		return allProducts.data;
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$7.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		fly,
    		get: get_store_value,
    		preferences,
    		dataActiveUser,
    		HeaderApp,
    		Sidebar,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		getAllProducts,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getDataUserLoggin, getAllProducts];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$q.name
    		});
    	}
    }

    /* src\views\NotFound.svelte generated by Svelte v3.52.0 */

    const file$p = "src\\views\\NotFound.svelte";

    function create_fragment$p(ctx) {
    	let script0;
    	let script0_src_value;
    	let link0;
    	let link1;
    	let link2;
    	let link3;
    	let link4;
    	let script1;
    	let script1_src_value;
    	let script2;
    	let script2_src_value;
    	let script3;
    	let script3_src_value;
    	let script4;
    	let script4_src_value;
    	let script5;
    	let script5_src_value;
    	let script6;
    	let script6_src_value;
    	let script7;
    	let script7_src_value;
    	let script8;
    	let script8_src_value;
    	let t0;
    	let main;
    	let div14;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let svg;
    	let path;
    	let t2;
    	let div9;
    	let div8;
    	let div7;
    	let div6;
    	let div5;
    	let div3;
    	let img;
    	let img_src_value;
    	let t3;
    	let div4;
    	let h1;
    	let t5;
    	let h3;
    	let t7;
    	let p0;
    	let t9;
    	let a;
    	let i0;
    	let t10;
    	let t11;
    	let footer;
    	let div13;
    	let div12;
    	let div11;
    	let div10;
    	let p1;
    	let t12;
    	let script9;
    	let t14;
    	let i1;
    	let t15;

    	const block = {
    		c: function create() {
    			script0 = element("script");
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			script1 = element("script");
    			script2 = element("script");
    			script3 = element("script");
    			script4 = element("script");
    			script5 = element("script");
    			script6 = element("script");
    			script7 = element("script");
    			script8 = element("script");
    			t0 = space();
    			main = element("main");
    			div14 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t1 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t2 = space();
    			div9 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div3 = element("div");
    			img = element("img");
    			t3 = space();
    			div4 = element("div");
    			h1 = element("h1");
    			h1.textContent = "Error 404";
    			t5 = space();
    			h3 = element("h3");
    			h3.textContent = "Lo sentimos, página no encontrada😭";
    			t7 = space();
    			p0 = element("p");
    			p0.textContent = "¡La página que buscas no está disponible!";
    			t9 = space();
    			a = element("a");
    			i0 = element("i");
    			t10 = text("Regresar a Home");
    			t11 = space();
    			footer = element("footer");
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			p1 = element("p");
    			t12 = text("©\r\n                                ");
    			script9 = element("script");
    			script9.textContent = "document.write(new Date().getFullYear())";
    			t14 = text(" Creado por ");
    			i1 = element("i");
    			t15 = text(" DevStore");
    			document.title = "DevEcommerce | Página No Encontrada";
    			script0.defer = true;
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$p, 11, 4, 278);
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$p, 13, 4, 376);
    			attr_dev(link1, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$p, 14, 4, 456);
    			attr_dev(link2, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$p, 20, 4, 610);
    			attr_dev(link3, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$p, 26, 4, 757);
    			attr_dev(link4, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$p, 32, 4, 905);
    			script1.defer = true;
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$p, 43, 4, 1209);
    			script2.defer = true;
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$p, 44, 4, 1308);
    			script3.defer = true;
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$p, 45, 4, 1397);
    			script4.defer = true;
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$p, 46, 4, 1483);
    			script5.defer = true;
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$p, 47, 4, 1574);
    			script6.defer = true;
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$p, 48, 4, 1667);
    			script7.defer = true;
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/particles.js/particles.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$p, 51, 4, 1767);
    			script8.defer = true;
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/pages/particles.app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$p, 53, 4, 1886);
    			attr_dev(div0, "class", "bg-overlay");
    			add_location(div0, file$p, 62, 12, 2156);
    			attr_dev(path, "d", "M 0,36 C 144,53.6 432,123.2 720,124 C 1008,124.8 1296,56.8 1440,40L1440 140L0 140z");
    			add_location(path, file$p, 66, 20, 2381);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg, "viewBox", "0 0 1440 120");
    			add_location(svg, file$p, 65, 16, 2239);
    			attr_dev(div1, "class", "shape");
    			add_location(div1, file$p, 64, 12, 2202);
    			attr_dev(div2, "class", "auth-one-bg-position auth-one-bg");
    			attr_dev(div2, "id", "auth-particles");
    			add_location(div2, file$p, 61, 8, 2076);
    			if (!src_url_equal(img.src, img_src_value = "http://localhost:8080/images/error.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "error-basic-img move-animation");
    			add_location(img, file$p, 78, 32, 2871);
    			attr_dev(div3, "class", "");
    			add_location(div3, file$p, 77, 28, 2823);
    			attr_dev(h1, "class", "display-1 fw-medium");
    			add_location(h1, file$p, 81, 32, 3086);
    			attr_dev(h3, "class", "text-uppercase");
    			add_location(h3, file$p, 82, 32, 3166);
    			attr_dev(p0, "class", "text-muted mb-4");
    			add_location(p0, file$p, 83, 32, 3267);
    			attr_dev(i0, "class", "mdi mdi-home me-1");
    			add_location(i0, file$p, 84, 103, 3444);
    			attr_dev(a, "href", "/home");
    			attr_dev(a, "class", "btn btn-success");
    			set_style(a, "color", "#fff", 1);
    			add_location(a, file$p, 84, 32, 3373);
    			attr_dev(div4, "class", "mt-n4");
    			add_location(div4, file$p, 80, 28, 3033);
    			attr_dev(div5, "class", "text-center pt-4");
    			add_location(div5, file$p, 76, 24, 2763);
    			attr_dev(div6, "class", "col-lg-12");
    			add_location(div6, file$p, 75, 20, 2714);
    			attr_dev(div7, "class", "row");
    			add_location(div7, file$p, 74, 16, 2675);
    			attr_dev(div8, "class", "container");
    			add_location(div8, file$p, 73, 12, 2634);
    			attr_dev(div9, "class", "auth-page-content");
    			add_location(div9, file$p, 72, 8, 2589);
    			add_location(script9, file$p, 103, 32, 4089);
    			attr_dev(i1, "class", "mdi mdi-heart text-danger");
    			add_location(i1, file$p, 103, 101, 4158);
    			attr_dev(p1, "class", "mb-0 text-muted");
    			add_location(p1, file$p, 102, 28, 4022);
    			attr_dev(div10, "class", "text-center");
    			add_location(div10, file$p, 101, 24, 3967);
    			attr_dev(div11, "class", "col-lg-12");
    			add_location(div11, file$p, 100, 20, 3918);
    			attr_dev(div12, "class", "row");
    			add_location(div12, file$p, 99, 16, 3879);
    			attr_dev(div13, "class", "container");
    			add_location(div13, file$p, 98, 12, 3838);
    			attr_dev(footer, "class", "footer");
    			add_location(footer, file$p, 97, 8, 3801);
    			attr_dev(div14, "class", "auth-page-wrapper pt-5");
    			add_location(div14, file$p, 59, 4, 1999);
    			add_location(main, file$p, 58, 0, 1987);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, script0);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, script1);
    			append_dev(document.head, script2);
    			append_dev(document.head, script3);
    			append_dev(document.head, script4);
    			append_dev(document.head, script5);
    			append_dev(document.head, script6);
    			append_dev(document.head, script7);
    			append_dev(document.head, script8);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div14);
    			append_dev(div14, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path);
    			append_dev(div14, t2);
    			append_dev(div14, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div3, img);
    			append_dev(div5, t3);
    			append_dev(div5, div4);
    			append_dev(div4, h1);
    			append_dev(div4, t5);
    			append_dev(div4, h3);
    			append_dev(div4, t7);
    			append_dev(div4, p0);
    			append_dev(div4, t9);
    			append_dev(div4, a);
    			append_dev(a, i0);
    			append_dev(a, t10);
    			append_dev(div14, t11);
    			append_dev(div14, footer);
    			append_dev(footer, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, p1);
    			append_dev(p1, t12);
    			append_dev(p1, script9);
    			append_dev(p1, t14);
    			append_dev(p1, i1);
    			append_dev(p1, t15);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			detach_dev(script0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(script1);
    			detach_dev(script2);
    			detach_dev(script3);
    			detach_dev(script4);
    			detach_dev(script5);
    			detach_dev(script6);
    			detach_dev(script7);
    			detach_dev(script8);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(main);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NotFound', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NotFound> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class NotFound extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotFound",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    /* src\views\Logout.svelte generated by Svelte v3.52.0 */

    const file$o = "src\\views\\Logout.svelte";

    function create_fragment$o(ctx) {
    	let t0;
    	let svelte;
    	let title;
    	let t2;
    	let script0;
    	let script0_src_value;
    	let t3;
    	let link0;
    	let t4;
    	let link1;
    	let t5;
    	let link2;
    	let t6;
    	let link3;
    	let t7;
    	let script1;
    	let script1_src_value;
    	let t8;
    	let script2;
    	let script2_src_value;
    	let t9;
    	let script3;
    	let script3_src_value;
    	let t10;
    	let script4;
    	let script4_src_value;
    	let t11;
    	let script5;
    	let script5_src_value;
    	let t12;
    	let script6;
    	let script6_src_value;
    	let t13;
    	let script7;
    	let script7_src_value;
    	let t14;
    	let script8;
    	let script8_src_value;
    	let t15;
    	let main;
    	let div19;
    	let div2;
    	let div0;
    	let t16;
    	let div1;
    	let svg;
    	let path;
    	let t17;
    	let div14;
    	let div13;
    	let div6;
    	let div5;
    	let div4;
    	let div3;
    	let a0;
    	let img;
    	let img_src_value;
    	let t18;
    	let p0;
    	let t20;
    	let div12;
    	let div11;
    	let div10;
    	let div9;
    	let lord_icon;
    	let lord_icon_src_value;
    	let t21;
    	let div8;
    	let h5;
    	let t23;
    	let p1;
    	let t24;
    	let span;
    	let t26;
    	let div7;
    	let a1;
    	let t28;
    	let footer;
    	let div18;
    	let div17;
    	let div16;
    	let div15;
    	let p2;
    	let t29;
    	let script9;
    	let t31;
    	let i;
    	let t32;

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			svelte = element("svelte");
    			title = element("title");
    			title.textContent = "DevEcommerce | Salir";
    			t2 = space();
    			script0 = element("script");
    			t3 = space();
    			link0 = element("link");
    			t4 = space();
    			link1 = element("link");
    			t5 = space();
    			link2 = element("link");
    			t6 = space();
    			link3 = element("link");
    			t7 = space();
    			script1 = element("script");
    			t8 = space();
    			script2 = element("script");
    			t9 = space();
    			script3 = element("script");
    			t10 = space();
    			script4 = element("script");
    			t11 = space();
    			script5 = element("script");
    			t12 = space();
    			script6 = element("script");
    			t13 = space();
    			script7 = element("script");
    			t14 = space();
    			script8 = element("script");
    			t15 = space();
    			main = element("main");
    			div19 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t16 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t17 = space();
    			div14 = element("div");
    			div13 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			a0 = element("a");
    			img = element("img");
    			t18 = space();
    			p0 = element("p");
    			p0.textContent = "DevStore";
    			t20 = space();
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			lord_icon = element("lord-icon");
    			t21 = space();
    			div8 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Has salido de DevStore";
    			t23 = space();
    			p1 = element("p");
    			t24 = text("Gracias por usar ");
    			span = element("span");
    			span.textContent = "DevStore";
    			t26 = space();
    			div7 = element("div");
    			a1 = element("a");
    			a1.textContent = "Iniciar Sesión";
    			t28 = space();
    			footer = element("footer");
    			div18 = element("div");
    			div17 = element("div");
    			div16 = element("div");
    			div15 = element("div");
    			p2 = element("p");
    			t29 = text("©\r\n                                ");
    			script9 = element("script");
    			script9.textContent = "document.write(new Date().getFullYear())";
    			t31 = text(" Creado por ");
    			i = element("i");
    			t32 = text(" DevStore");
    			add_location(title, file$o, 6, 4, 54);
    			script0.defer = true;
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$o, 12, 4, 273);
    			attr_dev(link0, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link0, "rel", "stylesheet");
    			attr_dev(link0, "type", "text/css");
    			add_location(link0, file$o, 14, 4, 371);
    			attr_dev(link1, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$o, 20, 4, 525);
    			attr_dev(link2, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$o, 26, 4, 672);
    			attr_dev(link3, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$o, 32, 4, 820);
    			script1.defer = true;
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$o, 43, 3, 1122);
    			script2.defer = true;
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$o, 44, 3, 1220);
    			script3.defer = true;
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$o, 45, 3, 1308);
    			script4.defer = true;
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$o, 46, 3, 1393);
    			script5.defer = true;
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$o, 47, 3, 1483);
    			script6.defer = true;
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$o, 48, 3, 1575);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/particles.js/particles.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$o, 51, 3, 1673);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/pages/particles.app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$o, 54, 3, 1786);
    			add_location(svelte, file$o, 5, 0, 40);
    			attr_dev(div0, "class", "bg-overlay");
    			add_location(div0, file$o, 61, 12, 2042);
    			attr_dev(path, "d", "M 0,36 C 144,53.6 432,123.2 720,124 C 1008,124.8 1296,56.8 1440,40L1440 140L0 140z");
    			add_location(path, file$o, 65, 20, 2267);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg, "viewBox", "0 0 1440 120");
    			add_location(svg, file$o, 64, 16, 2125);
    			attr_dev(div1, "class", "shape");
    			add_location(div1, file$o, 63, 12, 2088);
    			attr_dev(div2, "class", "auth-one-bg-position auth-one-bg");
    			attr_dev(div2, "id", "auth-particles");
    			add_location(div2, file$o, 60, 8, 1962);
    			if (!src_url_equal(img.src, img_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "height", "20");
    			add_location(img, file$o, 78, 36, 2862);
    			attr_dev(a0, "href", "index.html");
    			attr_dev(a0, "class", "d-inline-block auth-logo");
    			add_location(a0, file$o, 77, 32, 2770);
    			add_location(div3, file$o, 76, 28, 2731);
    			attr_dev(p0, "class", "mt-3 fs-15 fw-medium");
    			add_location(p0, file$o, 81, 28, 3040);
    			attr_dev(div4, "class", "text-center mt-sm-5 mb-4 text-white-50");
    			add_location(div4, file$o, 75, 24, 2649);
    			attr_dev(div5, "class", "col-lg-12");
    			add_location(div5, file$o, 74, 20, 2600);
    			attr_dev(div6, "class", "row");
    			add_location(div6, file$o, 73, 16, 2561);
    			if (!src_url_equal(lord_icon.src, lord_icon_src_value = "https://cdn.lordicon.com/hzomhqxz.json")) set_custom_element_data(lord_icon, "src", lord_icon_src_value);
    			set_custom_element_data(lord_icon, "trigger", "loop");
    			set_custom_element_data(lord_icon, "colors", "primary:#4b38b3,secondary:#08a88a");
    			set_style(lord_icon, "width", "180px");
    			set_style(lord_icon, "height", "180px");
    			add_location(lord_icon, file$o, 91, 32, 3476);
    			add_location(h5, file$o, 95, 36, 3766);
    			attr_dev(span, "class", "fw-semibold");
    			add_location(span, file$o, 96, 75, 3874);
    			attr_dev(p1, "class", "text-muted");
    			add_location(p1, file$o, 96, 36, 3835);
    			attr_dev(a1, "href", "#!");
    			attr_dev(a1, "class", "btn btn-success w-100");
    			add_location(a1, file$o, 98, 40, 4017);
    			attr_dev(div7, "class", "mt-4");
    			add_location(div7, file$o, 97, 36, 3957);
    			attr_dev(div8, "class", "mt-4 pt-2");
    			add_location(div8, file$o, 94, 32, 3705);
    			attr_dev(div9, "class", "card-body p-4 text-center");
    			add_location(div9, file$o, 90, 28, 3403);
    			attr_dev(div10, "class", "card mt-4");
    			add_location(div10, file$o, 89, 24, 3350);
    			attr_dev(div11, "class", "col-md-8 col-lg-6 col-xl-5");
    			add_location(div11, file$o, 88, 20, 3284);
    			attr_dev(div12, "class", "row justify-content-center");
    			add_location(div12, file$o, 87, 16, 3222);
    			attr_dev(div13, "class", "container");
    			add_location(div13, file$o, 72, 12, 2520);
    			attr_dev(div14, "class", "auth-page-content");
    			add_location(div14, file$o, 71, 8, 2475);
    			add_location(script9, file$o, 122, 32, 4888);
    			attr_dev(i, "class", "mdi mdi-heart text-danger");
    			add_location(i, file$o, 122, 101, 4957);
    			attr_dev(p2, "class", "mb-0 text-muted");
    			add_location(p2, file$o, 121, 28, 4821);
    			attr_dev(div15, "class", "text-center");
    			add_location(div15, file$o, 120, 24, 4766);
    			attr_dev(div16, "class", "col-lg-12");
    			add_location(div16, file$o, 119, 20, 4717);
    			attr_dev(div17, "class", "row");
    			add_location(div17, file$o, 118, 16, 4678);
    			attr_dev(div18, "class", "container");
    			add_location(div18, file$o, 117, 12, 4637);
    			attr_dev(footer, "class", "footer");
    			add_location(footer, file$o, 116, 8, 4600);
    			attr_dev(div19, "class", "auth-page-wrapper pt-5");
    			add_location(div19, file$o, 58, 4, 1885);
    			add_location(main, file$o, 57, 0, 1872);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, svelte, anchor);
    			append_dev(svelte, title);
    			append_dev(svelte, t2);
    			append_dev(svelte, script0);
    			append_dev(svelte, t3);
    			append_dev(svelte, link0);
    			append_dev(svelte, t4);
    			append_dev(svelte, link1);
    			append_dev(svelte, t5);
    			append_dev(svelte, link2);
    			append_dev(svelte, t6);
    			append_dev(svelte, link3);
    			append_dev(svelte, t7);
    			append_dev(svelte, script1);
    			append_dev(svelte, t8);
    			append_dev(svelte, script2);
    			append_dev(svelte, t9);
    			append_dev(svelte, script3);
    			append_dev(svelte, t10);
    			append_dev(svelte, script4);
    			append_dev(svelte, t11);
    			append_dev(svelte, script5);
    			append_dev(svelte, t12);
    			append_dev(svelte, script6);
    			append_dev(svelte, t13);
    			append_dev(svelte, script7);
    			append_dev(svelte, t14);
    			append_dev(svelte, script8);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div19);
    			append_dev(div19, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t16);
    			append_dev(div2, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path);
    			append_dev(div19, t17);
    			append_dev(div19, div14);
    			append_dev(div14, div13);
    			append_dev(div13, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, a0);
    			append_dev(a0, img);
    			append_dev(div4, t18);
    			append_dev(div4, p0);
    			append_dev(div13, t20);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, lord_icon);
    			append_dev(div9, t21);
    			append_dev(div9, div8);
    			append_dev(div8, h5);
    			append_dev(div8, t23);
    			append_dev(div8, p1);
    			append_dev(p1, t24);
    			append_dev(p1, span);
    			append_dev(div8, t26);
    			append_dev(div8, div7);
    			append_dev(div7, a1);
    			append_dev(div19, t28);
    			append_dev(div19, footer);
    			append_dev(footer, div18);
    			append_dev(div18, div17);
    			append_dev(div17, div16);
    			append_dev(div16, div15);
    			append_dev(div15, p2);
    			append_dev(p2, t29);
    			append_dev(p2, script9);
    			append_dev(p2, t31);
    			append_dev(p2, i);
    			append_dev(p2, t32);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(svelte);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(main);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Logout', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Logout> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Logout extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Logout",
    			options,
    			id: create_fragment$o.name
    		});
    	}
    }

    /* src\views\Profile.svelte generated by Svelte v3.52.0 */
    const file$n = "src\\views\\Profile.svelte";

    function create_fragment$n(ctx) {
    	let t0;
    	let svelte;
    	let title;
    	let t2;
    	let script0;
    	let script0_src_value;
    	let t3;
    	let link0;
    	let t4;
    	let link1;
    	let t5;
    	let link2;
    	let t6;
    	let link3;
    	let t7;
    	let main;
    	let div32;
    	let header;
    	let div0;
    	let headerapp;
    	let t8;
    	let div1;
    	let sidebar;
    	let t9;
    	let div2;
    	let t10;
    	let div30;
    	let div29;
    	let div28;
    	let div6;
    	let div5;
    	let div4;
    	let h4;
    	let t12;
    	let div3;
    	let ol;
    	let li0;
    	let a0;
    	let t14;
    	let li1;
    	let t16;
    	let div8;
    	let div7;
    	let img0;
    	let img0_src_value;
    	let t17;
    	let div15;
    	let div14;
    	let div10;
    	let div9;
    	let img1;
    	let img1_src_value;
    	let t18;
    	let div13;
    	let div12;
    	let h3;
    	let t22;
    	let div11;
    	let t23;
    	let div27;
    	let div26;
    	let div25;
    	let div17;
    	let ul;
    	let li2;
    	let a1;
    	let i0;
    	let t24;
    	let span;
    	let t26;
    	let div16;
    	let a2;
    	let i1;
    	let t27;
    	let t28;
    	let div24;
    	let div23;
    	let div22;
    	let div21;
    	let div20;
    	let div19;
    	let h5;
    	let t30;
    	let div18;
    	let table;
    	let tbody;
    	let tr0;
    	let th0;
    	let t32;
    	let td0;
    	let t34;
    	let tr1;
    	let th1;
    	let t36;
    	let td1;
    	let t38;
    	let tr2;
    	let th2;
    	let t40;
    	let td2;
    	let t42;
    	let tr3;
    	let th3;
    	let t44;
    	let td3;
    	let t46;
    	let tr4;
    	let th4;
    	let t48;
    	let td4;
    	let t50;
    	let div31;
    	let script1;
    	let script1_src_value;
    	let t51;
    	let script2;
    	let script2_src_value;
    	let t52;
    	let script3;
    	let script3_src_value;
    	let t53;
    	let script4;
    	let script4_src_value;
    	let t54;
    	let script5;
    	let script5_src_value;
    	let t55;
    	let script6;
    	let script6_src_value;
    	let t56;
    	let script7;
    	let script7_src_value;
    	let t57;
    	let script8;
    	let script8_src_value;
    	let t58;
    	let script9;
    	let script9_src_value;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*infoUserLogged*/ ctx[0] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			svelte = element("svelte");
    			title = element("title");
    			title.textContent = "DevEcommerce | Perfil";
    			t2 = space();
    			script0 = element("script");
    			t3 = space();
    			link0 = element("link");
    			t4 = space();
    			link1 = element("link");
    			t5 = space();
    			link2 = element("link");
    			t6 = space();
    			link3 = element("link");
    			t7 = space();
    			main = element("main");
    			div32 = element("div");
    			header = element("header");
    			div0 = element("div");
    			create_component(headerapp.$$.fragment);
    			t8 = space();
    			div1 = element("div");
    			create_component(sidebar.$$.fragment);
    			t9 = space();
    			div2 = element("div");
    			t10 = space();
    			div30 = element("div");
    			div29 = element("div");
    			div28 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Perfil";
    			t12 = space();
    			div3 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "Ecommerce";
    			t14 = space();
    			li1 = element("li");
    			li1.textContent = "Perfil";
    			t16 = space();
    			div8 = element("div");
    			div7 = element("div");
    			img0 = element("img");
    			t17 = space();
    			div15 = element("div");
    			div14 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			img1 = element("img");
    			t18 = space();
    			div13 = element("div");
    			div12 = element("div");
    			h3 = element("h3");

    			h3.textContent = `${/*infoUserLogged*/ ctx[0].name} 
                                        ${/*infoUserLogged*/ ctx[0].lastname}`;

    			t22 = space();
    			div11 = element("div");
    			t23 = space();
    			div27 = element("div");
    			div26 = element("div");
    			div25 = element("div");
    			div17 = element("div");
    			ul = element("ul");
    			li2 = element("li");
    			a1 = element("a");
    			i0 = element("i");
    			t24 = space();
    			span = element("span");
    			span.textContent = "Vista Perfil";
    			t26 = space();
    			div16 = element("div");
    			a2 = element("a");
    			i1 = element("i");
    			t27 = text(" Editar Perfil");
    			t28 = space();
    			div24 = element("div");
    			div23 = element("div");
    			div22 = element("div");
    			div21 = element("div");
    			div20 = element("div");
    			div19 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Info";
    			t30 = space();
    			div18 = element("div");
    			table = element("table");
    			tbody = element("tbody");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Nombre\r\n                                                                            :";
    			t32 = space();
    			td0 = element("td");
    			td0.textContent = `${/*infoUserLogged*/ ctx[0].name}`;
    			t34 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Apellido\r\n                                                                            :";
    			t36 = space();
    			td1 = element("td");
    			td1.textContent = `${/*infoUserLogged*/ ctx[0].lastname}`;
    			t38 = space();
    			tr2 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Correo:";
    			t40 = space();
    			td2 = element("td");
    			td2.textContent = `${/*infoUserLogged*/ ctx[0].email}`;
    			t42 = space();
    			tr3 = element("tr");
    			th3 = element("th");
    			th3.textContent = "Teléfono\r\n                                                                            :";
    			t44 = space();
    			td3 = element("td");
    			td3.textContent = `${/*infoUserLogged*/ ctx[0]?.phone_number ?? ''}`;
    			t46 = space();
    			tr4 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Rol:";
    			t48 = space();
    			td4 = element("td");
    			td4.textContent = `${/*infoUserLogged*/ ctx[0].role}`;
    			t50 = space();
    			div31 = element("div");
    			script1 = element("script");
    			t51 = space();
    			script2 = element("script");
    			t52 = space();
    			script3 = element("script");
    			t53 = space();
    			script4 = element("script");
    			t54 = space();
    			script5 = element("script");
    			t55 = space();
    			script6 = element("script");
    			t56 = space();
    			script7 = element("script");
    			t57 = space();
    			script8 = element("script");
    			t58 = space();
    			script9 = element("script");
    			add_location(title, file$n, 13, 4, 341);
    			script0.defer = true;
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$n, 19, 4, 561);
    			attr_dev(link0, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link0, "rel", "stylesheet");
    			attr_dev(link0, "type", "text/css");
    			add_location(link0, file$n, 21, 4, 659);
    			attr_dev(link1, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$n, 27, 4, 813);
    			attr_dev(link2, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$n, 33, 4, 960);
    			attr_dev(link3, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$n, 39, 4, 1108);
    			add_location(svelte, file$n, 12, 0, 327);
    			attr_dev(div0, "class", "layout-width");
    			add_location(div0, file$n, 50, 12, 1355);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$n, 49, 8, 1316);
    			attr_dev(div1, "class", "app-menu navbar-menu");
    			add_location(div1, file$n, 56, 8, 1534);
    			attr_dev(div2, "class", "vertical-overlay");
    			add_location(div2, file$n, 61, 8, 1693);
    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$n, 75, 32, 2395);
    			attr_dev(a0, "href", "#!");
    			add_location(a0, file$n, 80, 44, 2673);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$n, 79, 40, 2599);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$n, 82, 40, 2788);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$n, 78, 36, 2530);
    			attr_dev(div3, "class", "page-title-right");
    			add_location(div3, file$n, 77, 32, 2462);
    			attr_dev(div4, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div4, file$n, 72, 28, 2217);
    			attr_dev(div5, "class", "col-12");
    			add_location(div5, file$n, 71, 24, 2167);
    			attr_dev(div6, "class", "row");
    			add_location(div6, file$n, 70, 20, 2124);
    			if (!src_url_equal(img0.src, img0_src_value = /*infoUserLogged*/ ctx[0].avatar)) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", /*infoUserLogged*/ ctx[0].name & /*infoUserLogged*/ ctx[0].lastname);
    			attr_dev(img0, "class", "profile-wid-img");
    			add_location(img0, file$n, 96, 28, 3363);
    			attr_dev(div7, "class", "profile-wid-bg");
    			add_location(div7, file$n, 95, 24, 3305);
    			attr_dev(div8, "class", "profile-foreground position-relative mx-n4 mt-n4");
    			add_location(div8, file$n, 92, 20, 3170);
    			if (!src_url_equal(img1.src, img1_src_value = /*infoUserLogged*/ ctx[0].avatar)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "class", "img-thumbnail rounded-circle");
    			add_location(img1, file$n, 108, 36, 3954);
    			attr_dev(div9, "class", "avatar-lg");
    			add_location(div9, file$n, 107, 32, 3893);
    			attr_dev(div10, "class", "col-auto");
    			add_location(div10, file$n, 106, 28, 3837);
    			attr_dev(h3, "class", "text-white mb-1");
    			add_location(h3, file$n, 117, 36, 4401);
    			attr_dev(div11, "class", "hstack text-white-50 gap-1");
    			add_location(div11, file$n, 122, 36, 4642);
    			attr_dev(div12, "class", "p-2");
    			add_location(div12, file$n, 116, 32, 4346);
    			attr_dev(div13, "class", "col");
    			add_location(div13, file$n, 115, 28, 4295);
    			attr_dev(div14, "class", "row g-4");
    			add_location(div14, file$n, 105, 24, 3786);
    			attr_dev(div15, "class", "pt-4 mb-4 mb-lg-3 pb-lg-4");
    			add_location(div15, file$n, 104, 20, 3721);
    			attr_dev(i0, "class", "ri-airplay-fill d-inline-block d-md-none");
    			add_location(i0, file$n, 145, 48, 5833);
    			attr_dev(span, "class", "d-none d-md-inline-block");
    			add_location(span, file$n, 148, 48, 6039);
    			attr_dev(a1, "class", "nav-link fs-14 active");
    			attr_dev(a1, "data-bs-toggle", "tab");
    			attr_dev(a1, "href", "#overview-tab");
    			attr_dev(a1, "role", "tab");
    			add_location(a1, file$n, 139, 44, 5455);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$n, 138, 40, 5388);
    			attr_dev(ul, "class", "nav nav-pills animation-nav profile-nav gap-2 gap-lg-3 flex-grow-1");
    			attr_dev(ul, "role", "tablist");
    			add_location(ul, file$n, 134, 36, 5132);
    			attr_dev(i1, "class", "ri-edit-box-line align-bottom");
    			add_location(i1, file$n, 159, 45, 6688);
    			attr_dev(a2, "href", "/profileSettings");
    			attr_dev(a2, "class", "btn btn-success");
    			add_location(a2, file$n, 156, 40, 6501);
    			attr_dev(div16, "class", "flex-shrink-0");
    			add_location(div16, file$n, 155, 36, 6432);
    			attr_dev(div17, "class", "d-flex");
    			add_location(div17, file$n, 132, 32, 5019);
    			attr_dev(h5, "class", "card-title mb-3");
    			add_location(h5, file$n, 176, 56, 7689);
    			attr_dev(th0, "class", "ps-0");
    			attr_dev(th0, "scope", "row");
    			add_location(th0, file$n, 189, 72, 8625);
    			attr_dev(td0, "class", "text-muted");
    			add_location(td0, file$n, 195, 72, 9124);
    			add_location(tr0, file$n, 188, 68, 8547);
    			attr_dev(th1, "class", "ps-0");
    			attr_dev(th1, "scope", "row");
    			add_location(th1, file$n, 201, 72, 9625);
    			attr_dev(td1, "class", "text-muted");
    			add_location(td1, file$n, 207, 72, 10126);
    			add_location(tr1, file$n, 200, 68, 9547);
    			attr_dev(th2, "class", "ps-0");
    			attr_dev(th2, "scope", "row");
    			add_location(th2, file$n, 213, 72, 10631);
    			attr_dev(td2, "class", "text-muted");
    			add_location(td2, file$n, 218, 72, 11052);
    			add_location(tr2, file$n, 212, 68, 10553);
    			attr_dev(th3, "class", "ps-0");
    			attr_dev(th3, "scope", "row");
    			add_location(th3, file$n, 224, 72, 11554);
    			attr_dev(td3, "class", "text-muted");
    			add_location(td3, file$n, 230, 72, 12055);
    			add_location(tr3, file$n, 223, 68, 11476);
    			attr_dev(th4, "class", "ps-0");
    			attr_dev(th4, "scope", "row");
    			add_location(th4, file$n, 237, 72, 12652);
    			attr_dev(td4, "class", "text-muted");
    			add_location(td4, file$n, 242, 72, 13070);
    			add_location(tr4, file$n, 236, 68, 12574);
    			add_location(tbody, file$n, 187, 64, 8470);
    			attr_dev(table, "class", "table table-borderless mb-0");
    			add_location(table, file$n, 184, 60, 8234);
    			attr_dev(div18, "class", "table-responsive");
    			add_location(div18, file$n, 181, 56, 8023);
    			attr_dev(div19, "class", "card-body");
    			add_location(div19, file$n, 175, 52, 7608);
    			attr_dev(div20, "class", "card");
    			add_location(div20, file$n, 174, 48, 7536);
    			attr_dev(div21, "class", "col-xxl-3");
    			add_location(div21, file$n, 173, 44, 7463);
    			attr_dev(div22, "class", "row");
    			add_location(div22, file$n, 172, 40, 7400);
    			attr_dev(div23, "class", "tab-pane active");
    			attr_dev(div23, "id", "overview-tab");
    			attr_dev(div23, "role", "tabpanel");
    			add_location(div23, file$n, 167, 36, 7134);
    			attr_dev(div24, "class", "tab-content pt-4 text-muted");
    			add_location(div24, file$n, 166, 32, 7055);
    			add_location(div25, file$n, 131, 28, 4980);
    			attr_dev(div26, "class", "col-lg-12");
    			add_location(div26, file$n, 130, 24, 4927);
    			attr_dev(div27, "class", "row");
    			add_location(div27, file$n, 129, 20, 4884);
    			attr_dev(div28, "class", "container-fluid");
    			add_location(div28, file$n, 68, 16, 2026);
    			attr_dev(div29, "class", "page-content");
    			add_location(div29, file$n, 67, 12, 1982);
    			attr_dev(div30, "class", "main-content");
    			add_location(div30, file$n, 66, 8, 1942);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$n, 276, 12, 14612);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$n, 279, 12, 14744);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$n, 282, 12, 14866);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$n, 285, 12, 14985);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$n, 288, 12, 15109);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$n, 291, 12, 15235);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/particles.js/particles.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$n, 292, 12, 15308);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/pages/particles.app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$n, 295, 12, 15429);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/password-addon.init.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$n, 298, 12, 15545);
    			add_location(div31, file$n, 271, 8, 14423);
    			attr_dev(div32, "id", "layout-wrapper");
    			add_location(div32, file$n, 48, 4, 1281);
    			add_location(main, file$n, 46, 0, 1244);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, svelte, anchor);
    			append_dev(svelte, title);
    			append_dev(svelte, t2);
    			append_dev(svelte, script0);
    			append_dev(svelte, t3);
    			append_dev(svelte, link0);
    			append_dev(svelte, t4);
    			append_dev(svelte, link1);
    			append_dev(svelte, t5);
    			append_dev(svelte, link2);
    			append_dev(svelte, t6);
    			append_dev(svelte, link3);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div32);
    			append_dev(div32, header);
    			append_dev(header, div0);
    			mount_component(headerapp, div0, null);
    			append_dev(div32, t8);
    			append_dev(div32, div1);
    			mount_component(sidebar, div1, null);
    			append_dev(div32, t9);
    			append_dev(div32, div2);
    			append_dev(div32, t10);
    			append_dev(div32, div30);
    			append_dev(div30, div29);
    			append_dev(div29, div28);
    			append_dev(div28, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h4);
    			append_dev(div4, t12);
    			append_dev(div4, div3);
    			append_dev(div3, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a0);
    			append_dev(ol, t14);
    			append_dev(ol, li1);
    			append_dev(div28, t16);
    			append_dev(div28, div8);
    			append_dev(div8, div7);
    			append_dev(div7, img0);
    			append_dev(div28, t17);
    			append_dev(div28, div15);
    			append_dev(div15, div14);
    			append_dev(div14, div10);
    			append_dev(div10, div9);
    			append_dev(div9, img1);
    			append_dev(div14, t18);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, h3);
    			append_dev(div12, t22);
    			append_dev(div12, div11);
    			append_dev(div28, t23);
    			append_dev(div28, div27);
    			append_dev(div27, div26);
    			append_dev(div26, div25);
    			append_dev(div25, div17);
    			append_dev(div17, ul);
    			append_dev(ul, li2);
    			append_dev(li2, a1);
    			append_dev(a1, i0);
    			append_dev(a1, t24);
    			append_dev(a1, span);
    			append_dev(div17, t26);
    			append_dev(div17, div16);
    			append_dev(div16, a2);
    			append_dev(a2, i1);
    			append_dev(a2, t27);
    			append_dev(div25, t28);
    			append_dev(div25, div24);
    			append_dev(div24, div23);
    			append_dev(div23, div22);
    			append_dev(div22, div21);
    			append_dev(div21, div20);
    			append_dev(div20, div19);
    			append_dev(div19, h5);
    			append_dev(div19, t30);
    			append_dev(div19, div18);
    			append_dev(div18, table);
    			append_dev(table, tbody);
    			append_dev(tbody, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t32);
    			append_dev(tr0, td0);
    			append_dev(tbody, t34);
    			append_dev(tbody, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t36);
    			append_dev(tr1, td1);
    			append_dev(tbody, t38);
    			append_dev(tbody, tr2);
    			append_dev(tr2, th2);
    			append_dev(tr2, t40);
    			append_dev(tr2, td2);
    			append_dev(tbody, t42);
    			append_dev(tbody, tr3);
    			append_dev(tr3, th3);
    			append_dev(tr3, t44);
    			append_dev(tr3, td3);
    			append_dev(tbody, t46);
    			append_dev(tbody, tr4);
    			append_dev(tr4, th4);
    			append_dev(tr4, t48);
    			append_dev(tr4, td4);
    			append_dev(div32, t50);
    			append_dev(div32, div31);
    			append_dev(div31, script1);
    			append_dev(div31, t51);
    			append_dev(div31, script2);
    			append_dev(div31, t52);
    			append_dev(div31, script3);
    			append_dev(div31, t53);
    			append_dev(div31, script4);
    			append_dev(div31, t54);
    			append_dev(div31, script5);
    			append_dev(div31, t55);
    			append_dev(div31, script6);
    			append_dev(div31, t56);
    			append_dev(div31, script7);
    			append_dev(div31, t57);
    			append_dev(div31, script8);
    			append_dev(div31, t58);
    			append_dev(div31, script9);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(svelte);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let $dataActiveUser;
    	validate_store(dataActiveUser, 'dataActiveUser');
    	component_subscribe($$self, dataActiveUser, $$value => $$invalidate(1, $dataActiveUser = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Profile', slots, []);
    	get_store_value(dataActiveUser);
    	const infoUserLogged = $dataActiveUser;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Profile> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Sidebar,
    		get: get_store_value,
    		dataActiveUser,
    		HeaderApp,
    		infoUserLogged,
    		$dataActiveUser
    	});

    	return [infoUserLogged];
    }

    class Profile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Profile",
    			options,
    			id: create_fragment$n.name
    		});
    	}
    }

    const durationUnitRegex = /[a-zA-Z]/;
    const range = (size, startAt = 0) => [...Array(size).keys()].map((i) => i + startAt);
    // export const characterRange = (startChar, endChar) =>
    //   String.fromCharCode(
    //     ...range(
    //       endChar.charCodeAt(0) - startChar.charCodeAt(0),
    //       startChar.charCodeAt(0)
    //     )
    //   );
    // export const zip = (arr, ...arrs) =>
    //   arr.map((val, i) => arrs.reduce((list, curr) => [...list, curr[i]], [val]));

    /* node_modules\svelte-loading-spinners\Jumper.svelte generated by Svelte v3.52.0 */
    const file$m = "node_modules\\svelte-loading-spinners\\Jumper.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (12:1) {#each range(3, 1) as version}
    function create_each_block$a(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "circle svelte-c0n7a9");
    			set_style(div, "animation-delay", +/*durationNum*/ ctx[6] / 3 * (/*version*/ ctx[7] - 1) + /*durationUnit*/ ctx[5]);
    			toggle_class(div, "pause-animation", /*pause*/ ctx[4]);
    			add_location(div, file$m, 12, 2, 464);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*pause*/ 16) {
    				toggle_class(div, "pause-animation", /*pause*/ ctx[4]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(12:1) {#each range(3, 1) as version}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let div;
    	let each_value = range(3, 1);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "wrapper svelte-c0n7a9");
    			set_style(div, "--size", /*size*/ ctx[3] + /*unit*/ ctx[1]);
    			set_style(div, "--color", /*color*/ ctx[0]);
    			set_style(div, "--duration", /*duration*/ ctx[2]);
    			add_location(div, file$m, 10, 0, 336);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*durationNum, range, durationUnit, pause*/ 112) {
    				each_value = range(3, 1);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*size, unit*/ 10) {
    				set_style(div, "--size", /*size*/ ctx[3] + /*unit*/ ctx[1]);
    			}

    			if (dirty & /*color*/ 1) {
    				set_style(div, "--color", /*color*/ ctx[0]);
    			}

    			if (dirty & /*duration*/ 4) {
    				set_style(div, "--duration", /*duration*/ ctx[2]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Jumper', slots, []);
    	let { color = '#FF3E00' } = $$props;
    	let { unit = 'px' } = $$props;
    	let { duration = '1s' } = $$props;
    	let { size = '60' } = $$props;
    	let { pause = false } = $$props;
    	let durationUnit = duration.match(durationUnitRegex)?.[0] ?? 's';
    	let durationNum = duration.replace(durationUnitRegex, '');
    	const writable_props = ['color', 'unit', 'duration', 'size', 'pause'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Jumper> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('unit' in $$props) $$invalidate(1, unit = $$props.unit);
    		if ('duration' in $$props) $$invalidate(2, duration = $$props.duration);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('pause' in $$props) $$invalidate(4, pause = $$props.pause);
    	};

    	$$self.$capture_state = () => ({
    		range,
    		durationUnitRegex,
    		color,
    		unit,
    		duration,
    		size,
    		pause,
    		durationUnit,
    		durationNum
    	});

    	$$self.$inject_state = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('unit' in $$props) $$invalidate(1, unit = $$props.unit);
    		if ('duration' in $$props) $$invalidate(2, duration = $$props.duration);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('pause' in $$props) $$invalidate(4, pause = $$props.pause);
    		if ('durationUnit' in $$props) $$invalidate(5, durationUnit = $$props.durationUnit);
    		if ('durationNum' in $$props) $$invalidate(6, durationNum = $$props.durationNum);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [color, unit, duration, size, pause, durationUnit, durationNum];
    }

    class Jumper extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
    			color: 0,
    			unit: 1,
    			duration: 2,
    			size: 3,
    			pause: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Jumper",
    			options,
    			id: create_fragment$m.name
    		});
    	}

    	get color() {
    		throw new Error("<Jumper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Jumper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get unit() {
    		throw new Error("<Jumper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set unit(value) {
    		throw new Error("<Jumper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get duration() {
    		throw new Error("<Jumper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set duration(value) {
    		throw new Error("<Jumper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Jumper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Jumper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pause() {
    		throw new Error("<Jumper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pause(value) {
    		throw new Error("<Jumper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    /*!
    * sweetalert2 v11.6.5
    * Released under the MIT License.
    */

    var sweetalert2_all = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, (function () {
      /**
       * This module contains `WeakMap`s for each effectively-"private  property" that a `Swal` has.
       * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
       * This is the approach that Babel will probably take to implement private methods/fields
       *   https://github.com/tc39/proposal-private-methods
       *   https://github.com/babel/babel/pull/7555
       * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
       *   then we can use that language feature.
       */

      var privateProps = {
        awaitingPromise: new WeakMap(),
        promise: new WeakMap(),
        innerParams: new WeakMap(),
        domCache: new WeakMap()
      };

      const swalPrefix = 'swal2-';

      /**
       * @param {string[]} items
       * @returns {object}
       */
      const prefix = items => {
        const result = {};
        for (const i in items) {
          result[items[i]] = swalPrefix + items[i];
        }
        return result;
      };
      const swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'no-transition', 'toast', 'toast-shown', 'show', 'hide', 'close', 'title', 'html-container', 'actions', 'confirm', 'deny', 'cancel', 'default-outline', 'footer', 'icon', 'icon-content', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'input-label', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loader', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl', 'timer-progress-bar', 'timer-progress-bar-container', 'scrollbar-measure', 'icon-success', 'icon-warning', 'icon-info', 'icon-question', 'icon-error', 'no-war']);
      const iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);

      const consolePrefix = 'SweetAlert2:';

      /**
       * Filter the unique values into a new array
       *
       * @param {Array} arr
       * @returns {Array}
       */
      const uniqueArray = arr => {
        const result = [];
        for (let i = 0; i < arr.length; i++) {
          if (result.indexOf(arr[i]) === -1) {
            result.push(arr[i]);
          }
        }
        return result;
      };

      /**
       * Capitalize the first letter of a string
       *
       * @param {string} str
       * @returns {string}
       */
      const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);

      /**
       * Standardize console warnings
       *
       * @param {string | Array} message
       */
      const warn = message => {
        console.warn(`${consolePrefix} ${typeof message === 'object' ? message.join(' ') : message}`);
      };

      /**
       * Standardize console errors
       *
       * @param {string} message
       */
      const error = message => {
        console.error(`${consolePrefix} ${message}`);
      };

      /**
       * Private global state for `warnOnce`
       *
       * @type {Array}
       * @private
       */
      const previousWarnOnceMessages = [];

      /**
       * Show a console warning, but only if it hasn't already been shown
       *
       * @param {string} message
       */
      const warnOnce = message => {
        if (!previousWarnOnceMessages.includes(message)) {
          previousWarnOnceMessages.push(message);
          warn(message);
        }
      };

      /**
       * Show a one-time console warning about deprecated params/methods
       *
       * @param {string} deprecatedParam
       * @param {string} useInstead
       */
      const warnAboutDeprecation = (deprecatedParam, useInstead) => {
        warnOnce(`"${deprecatedParam}" is deprecated and will be removed in the next major release. Please use "${useInstead}" instead.`);
      };

      /**
       * If `arg` is a function, call it (with no arguments or context) and return the result.
       * Otherwise, just pass the value through
       *
       * @param {Function | any} arg
       * @returns {any}
       */
      const callIfFunction = arg => typeof arg === 'function' ? arg() : arg;

      /**
       * @param {any} arg
       * @returns {boolean}
       */
      const hasToPromiseFn = arg => arg && typeof arg.toPromise === 'function';

      /**
       * @param {any} arg
       * @returns {Promise}
       */
      const asPromise = arg => hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);

      /**
       * @param {any} arg
       * @returns {boolean}
       */
      const isPromise = arg => arg && Promise.resolve(arg) === arg;

      /**
       * Gets the popup container which contains the backdrop and the popup itself.
       *
       * @returns {HTMLElement | null}
       */
      const getContainer = () => document.body.querySelector(`.${swalClasses.container}`);

      /**
       * @param {string} selectorString
       * @returns {HTMLElement | null}
       */
      const elementBySelector = selectorString => {
        const container = getContainer();
        return container ? container.querySelector(selectorString) : null;
      };

      /**
       * @param {string} className
       * @returns {HTMLElement | null}
       */
      const elementByClass = className => {
        return elementBySelector(`.${className}`);
      };

      /**
       * @returns {HTMLElement | null}
       */
      const getPopup = () => elementByClass(swalClasses.popup);

      /**
       * @returns {HTMLElement | null}
       */
      const getIcon = () => elementByClass(swalClasses.icon);

      /**
       * @returns {HTMLElement | null}
       */
      const getIconContent = () => elementByClass(swalClasses['icon-content']);

      /**
       * @returns {HTMLElement | null}
       */
      const getTitle = () => elementByClass(swalClasses.title);

      /**
       * @returns {HTMLElement | null}
       */
      const getHtmlContainer = () => elementByClass(swalClasses['html-container']);

      /**
       * @returns {HTMLElement | null}
       */
      const getImage = () => elementByClass(swalClasses.image);

      /**
       * @returns {HTMLElement | null}
       */
      const getProgressSteps$1 = () => elementByClass(swalClasses['progress-steps']);

      /**
       * @returns {HTMLElement | null}
       */
      const getValidationMessage = () => elementByClass(swalClasses['validation-message']);

      /**
       * @returns {HTMLElement | null}
       */
      const getConfirmButton = () => elementBySelector(`.${swalClasses.actions} .${swalClasses.confirm}`);

      /**
       * @returns {HTMLElement | null}
       */
      const getDenyButton = () => elementBySelector(`.${swalClasses.actions} .${swalClasses.deny}`);

      /**
       * @returns {HTMLElement | null}
       */
      const getInputLabel = () => elementByClass(swalClasses['input-label']);

      /**
       * @returns {HTMLElement | null}
       */
      const getLoader = () => elementBySelector(`.${swalClasses.loader}`);

      /**
       * @returns {HTMLElement | null}
       */
      const getCancelButton = () => elementBySelector(`.${swalClasses.actions} .${swalClasses.cancel}`);

      /**
       * @returns {HTMLElement | null}
       */
      const getActions = () => elementByClass(swalClasses.actions);

      /**
       * @returns {HTMLElement | null}
       */
      const getFooter = () => elementByClass(swalClasses.footer);

      /**
       * @returns {HTMLElement | null}
       */
      const getTimerProgressBar = () => elementByClass(swalClasses['timer-progress-bar']);

      /**
       * @returns {HTMLElement | null}
       */
      const getCloseButton = () => elementByClass(swalClasses.close);

      // https://github.com/jkup/focusable/blob/master/index.js
      const focusable = `
  a[href],
  area[href],
  input:not([disabled]),
  select:not([disabled]),
  textarea:not([disabled]),
  button:not([disabled]),
  iframe,
  object,
  embed,
  [tabindex="0"],
  [contenteditable],
  audio[controls],
  video[controls],
  summary
`;
      /**
       * @returns {HTMLElement[]}
       */
      const getFocusableElements = () => {
        const focusableElementsWithTabindex = Array.from(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])'))
        // sort according to tabindex
        .sort((a, b) => {
          const tabindexA = parseInt(a.getAttribute('tabindex'));
          const tabindexB = parseInt(b.getAttribute('tabindex'));
          if (tabindexA > tabindexB) {
            return 1;
          } else if (tabindexA < tabindexB) {
            return -1;
          }
          return 0;
        });
        const otherFocusableElements = Array.from(getPopup().querySelectorAll(focusable)).filter(el => el.getAttribute('tabindex') !== '-1');
        return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(el => isVisible$1(el));
      };

      /**
       * @returns {boolean}
       */
      const isModal = () => {
        return hasClass(document.body, swalClasses.shown) && !hasClass(document.body, swalClasses['toast-shown']) && !hasClass(document.body, swalClasses['no-backdrop']);
      };

      /**
       * @returns {boolean}
       */
      const isToast = () => {
        return getPopup() && hasClass(getPopup(), swalClasses.toast);
      };

      /**
       * @returns {boolean}
       */
      const isLoading = () => {
        return getPopup().hasAttribute('data-loading');
      };

      // Remember state in cases where opening and handling a modal will fiddle with it.
      const states = {
        previousBodyPadding: null
      };

      /**
       * Securely set innerHTML of an element
       * https://github.com/sweetalert2/sweetalert2/issues/1926
       *
       * @param {HTMLElement} elem
       * @param {string} html
       */
      const setInnerHtml = (elem, html) => {
        elem.textContent = '';
        if (html) {
          const parser = new DOMParser();
          const parsed = parser.parseFromString(html, `text/html`);
          Array.from(parsed.querySelector('head').childNodes).forEach(child => {
            elem.appendChild(child);
          });
          Array.from(parsed.querySelector('body').childNodes).forEach(child => {
            if (child instanceof HTMLVideoElement || child instanceof HTMLAudioElement) {
              elem.appendChild(child.cloneNode(true)); // https://github.com/sweetalert2/sweetalert2/issues/2507
            } else {
              elem.appendChild(child);
            }
          });
        }
      };

      /**
       * @param {HTMLElement} elem
       * @param {string} className
       * @returns {boolean}
       */
      const hasClass = (elem, className) => {
        if (!className) {
          return false;
        }
        const classList = className.split(/\s+/);
        for (let i = 0; i < classList.length; i++) {
          if (!elem.classList.contains(classList[i])) {
            return false;
          }
        }
        return true;
      };

      /**
       * @param {HTMLElement} elem
       * @param {SweetAlertOptions} params
       */
      const removeCustomClasses = (elem, params) => {
        Array.from(elem.classList).forEach(className => {
          if (!Object.values(swalClasses).includes(className) && !Object.values(iconTypes).includes(className) && !Object.values(params.showClass).includes(className)) {
            elem.classList.remove(className);
          }
        });
      };

      /**
       * @param {HTMLElement} elem
       * @param {SweetAlertOptions} params
       * @param {string} className
       */
      const applyCustomClass = (elem, params, className) => {
        removeCustomClasses(elem, params);
        if (params.customClass && params.customClass[className]) {
          if (typeof params.customClass[className] !== 'string' && !params.customClass[className].forEach) {
            warn(`Invalid type of customClass.${className}! Expected string or iterable object, got "${typeof params.customClass[className]}"`);
            return;
          }
          addClass(elem, params.customClass[className]);
        }
      };

      /**
       * @param {HTMLElement} popup
       * @param {import('./renderers/renderInput').InputClass} inputClass
       * @returns {HTMLInputElement | null}
       */
      const getInput$1 = (popup, inputClass) => {
        if (!inputClass) {
          return null;
        }
        switch (inputClass) {
          case 'select':
          case 'textarea':
          case 'file':
            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses[inputClass]}`);
          case 'checkbox':
            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.checkbox} input`);
          case 'radio':
            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:checked`) || popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:first-child`);
          case 'range':
            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.range} input`);
          default:
            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.input}`);
        }
      };

      /**
       * @param {HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement} input
       */
      const focusInput = input => {
        input.focus();

        // place cursor at end of text in text input
        if (input.type !== 'file') {
          // http://stackoverflow.com/a/2345915
          const val = input.value;
          input.value = '';
          input.value = val;
        }
      };

      /**
       * @param {HTMLElement | HTMLElement[] | null} target
       * @param {string | string[] | readonly string[]} classList
       * @param {boolean} condition
       */
      const toggleClass = (target, classList, condition) => {
        if (!target || !classList) {
          return;
        }
        if (typeof classList === 'string') {
          classList = classList.split(/\s+/).filter(Boolean);
        }
        classList.forEach(className => {
          if (Array.isArray(target)) {
            target.forEach(elem => {
              condition ? elem.classList.add(className) : elem.classList.remove(className);
            });
          } else {
            condition ? target.classList.add(className) : target.classList.remove(className);
          }
        });
      };

      /**
       * @param {HTMLElement | HTMLElement[] | null} target
       * @param {string | string[] | readonly string[]} classList
       */
      const addClass = (target, classList) => {
        toggleClass(target, classList, true);
      };

      /**
       * @param {HTMLElement | HTMLElement[] | null} target
       * @param {string | string[] | readonly string[]} classList
       */
      const removeClass = (target, classList) => {
        toggleClass(target, classList, false);
      };

      /**
       * Get direct child of an element by class name
       *
       * @param {HTMLElement} elem
       * @param {string} className
       * @returns {HTMLElement | null}
       */
      const getDirectChildByClass = (elem, className) => {
        const children = Array.from(elem.children);
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          if (child instanceof HTMLElement && hasClass(child, className)) {
            return child;
          }
        }
      };

      /**
       * @param {HTMLElement} elem
       * @param {string} property
       * @param {*} value
       */
      const applyNumericalStyle = (elem, property, value) => {
        if (value === `${parseInt(value)}`) {
          value = parseInt(value);
        }
        if (value || parseInt(value) === 0) {
          elem.style[property] = typeof value === 'number' ? `${value}px` : value;
        } else {
          elem.style.removeProperty(property);
        }
      };

      /**
       * @param {HTMLElement} elem
       * @param {string} display
       */
      const show = function (elem) {
        let display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';
        elem.style.display = display;
      };

      /**
       * @param {HTMLElement} elem
       */
      const hide = elem => {
        elem.style.display = 'none';
      };

      /**
       * @param {HTMLElement} parent
       * @param {string} selector
       * @param {string} property
       * @param {string} value
       */
      const setStyle = (parent, selector, property, value) => {
        /** @type {HTMLElement} */
        const el = parent.querySelector(selector);
        if (el) {
          el.style[property] = value;
        }
      };

      /**
       * @param {HTMLElement} elem
       * @param {any} condition
       * @param {string} display
       */
      const toggle = function (elem, condition) {
        let display = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'flex';
        condition ? show(elem, display) : hide(elem);
      };

      /**
       * borrowed from jquery $(elem).is(':visible') implementation
       *
       * @param {HTMLElement} elem
       * @returns {boolean}
       */
      const isVisible$1 = elem => !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));

      /**
       * @returns {boolean}
       */
      const allButtonsAreHidden = () => !isVisible$1(getConfirmButton()) && !isVisible$1(getDenyButton()) && !isVisible$1(getCancelButton());

      /**
       * @param {HTMLElement} elem
       * @returns {boolean}
       */
      const isScrollable = elem => !!(elem.scrollHeight > elem.clientHeight);

      /**
       * borrowed from https://stackoverflow.com/a/46352119
       *
       * @param {HTMLElement} elem
       * @returns {boolean}
       */
      const hasCssAnimation = elem => {
        const style = window.getComputedStyle(elem);
        const animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');
        const transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');
        return animDuration > 0 || transDuration > 0;
      };

      /**
       * @param {number} timer
       * @param {boolean} reset
       */
      const animateTimerProgressBar = function (timer) {
        let reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        const timerProgressBar = getTimerProgressBar();
        if (isVisible$1(timerProgressBar)) {
          if (reset) {
            timerProgressBar.style.transition = 'none';
            timerProgressBar.style.width = '100%';
          }
          setTimeout(() => {
            timerProgressBar.style.transition = `width ${timer / 1000}s linear`;
            timerProgressBar.style.width = '0%';
          }, 10);
        }
      };
      const stopTimerProgressBar = () => {
        const timerProgressBar = getTimerProgressBar();
        const timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
        timerProgressBar.style.removeProperty('transition');
        timerProgressBar.style.width = '100%';
        const timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
        const timerProgressBarPercent = timerProgressBarWidth / timerProgressBarFullWidth * 100;
        timerProgressBar.style.removeProperty('transition');
        timerProgressBar.style.width = `${timerProgressBarPercent}%`;
      };

      const RESTORE_FOCUS_TIMEOUT = 100;

      /** @type {GlobalState} */
      const globalState = {};
      const focusPreviousActiveElement = () => {
        if (globalState.previousActiveElement instanceof HTMLElement) {
          globalState.previousActiveElement.focus();
          globalState.previousActiveElement = null;
        } else if (document.body) {
          document.body.focus();
        }
      };

      /**
       * Restore previous active (focused) element
       *
       * @param {boolean} returnFocus
       * @returns {Promise}
       */
      const restoreActiveElement = returnFocus => {
        return new Promise(resolve => {
          if (!returnFocus) {
            return resolve();
          }
          const x = window.scrollX;
          const y = window.scrollY;
          globalState.restoreFocusTimeout = setTimeout(() => {
            focusPreviousActiveElement();
            resolve();
          }, RESTORE_FOCUS_TIMEOUT); // issues/900

          window.scrollTo(x, y);
        });
      };

      /**
       * Detect Node env
       *
       * @returns {boolean}
       */
      const isNodeEnv = () => typeof window === 'undefined' || typeof document === 'undefined';

      const sweetHTML = `
 <div aria-labelledby="${swalClasses.title}" aria-describedby="${swalClasses['html-container']}" class="${swalClasses.popup}" tabindex="-1">
   <button type="button" class="${swalClasses.close}"></button>
   <ul class="${swalClasses['progress-steps']}"></ul>
   <div class="${swalClasses.icon}"></div>
   <img class="${swalClasses.image}" />
   <h2 class="${swalClasses.title}" id="${swalClasses.title}"></h2>
   <div class="${swalClasses['html-container']}" id="${swalClasses['html-container']}"></div>
   <input class="${swalClasses.input}" />
   <input type="file" class="${swalClasses.file}" />
   <div class="${swalClasses.range}">
     <input type="range" />
     <output></output>
   </div>
   <select class="${swalClasses.select}"></select>
   <div class="${swalClasses.radio}"></div>
   <label for="${swalClasses.checkbox}" class="${swalClasses.checkbox}">
     <input type="checkbox" />
     <span class="${swalClasses.label}"></span>
   </label>
   <textarea class="${swalClasses.textarea}"></textarea>
   <div class="${swalClasses['validation-message']}" id="${swalClasses['validation-message']}"></div>
   <div class="${swalClasses.actions}">
     <div class="${swalClasses.loader}"></div>
     <button type="button" class="${swalClasses.confirm}"></button>
     <button type="button" class="${swalClasses.deny}"></button>
     <button type="button" class="${swalClasses.cancel}"></button>
   </div>
   <div class="${swalClasses.footer}"></div>
   <div class="${swalClasses['timer-progress-bar-container']}">
     <div class="${swalClasses['timer-progress-bar']}"></div>
   </div>
 </div>
`.replace(/(^|\n)\s*/g, '');

      /**
       * @returns {boolean}
       */
      const resetOldContainer = () => {
        const oldContainer = getContainer();
        if (!oldContainer) {
          return false;
        }
        oldContainer.remove();
        removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);
        return true;
      };
      const resetValidationMessage$1 = () => {
        globalState.currentInstance.resetValidationMessage();
      };
      const addInputChangeListeners = () => {
        const popup = getPopup();
        const input = getDirectChildByClass(popup, swalClasses.input);
        const file = getDirectChildByClass(popup, swalClasses.file);
        /** @type {HTMLInputElement} */
        const range = popup.querySelector(`.${swalClasses.range} input`);
        /** @type {HTMLOutputElement} */
        const rangeOutput = popup.querySelector(`.${swalClasses.range} output`);
        const select = getDirectChildByClass(popup, swalClasses.select);
        /** @type {HTMLInputElement} */
        const checkbox = popup.querySelector(`.${swalClasses.checkbox} input`);
        const textarea = getDirectChildByClass(popup, swalClasses.textarea);
        input.oninput = resetValidationMessage$1;
        file.onchange = resetValidationMessage$1;
        select.onchange = resetValidationMessage$1;
        checkbox.onchange = resetValidationMessage$1;
        textarea.oninput = resetValidationMessage$1;
        range.oninput = () => {
          resetValidationMessage$1();
          rangeOutput.value = range.value;
        };
        range.onchange = () => {
          resetValidationMessage$1();
          rangeOutput.value = range.value;
        };
      };

      /**
       * @param {string | HTMLElement} target
       * @returns {HTMLElement}
       */
      const getTarget = target => typeof target === 'string' ? document.querySelector(target) : target;

      /**
       * @param {SweetAlertOptions} params
       */
      const setupAccessibility = params => {
        const popup = getPopup();
        popup.setAttribute('role', params.toast ? 'alert' : 'dialog');
        popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');
        if (!params.toast) {
          popup.setAttribute('aria-modal', 'true');
        }
      };

      /**
       * @param {HTMLElement} targetElement
       */
      const setupRTL = targetElement => {
        if (window.getComputedStyle(targetElement).direction === 'rtl') {
          addClass(getContainer(), swalClasses.rtl);
        }
      };

      /**
       * Add modal + backdrop + no-war message for Russians to DOM
       *
       * @param {SweetAlertOptions} params
       */
      const init = params => {
        // Clean up the old popup container if it exists
        const oldContainerExisted = resetOldContainer();

        /* istanbul ignore if */
        if (isNodeEnv()) {
          error('SweetAlert2 requires document to initialize');
          return;
        }
        const container = document.createElement('div');
        container.className = swalClasses.container;
        if (oldContainerExisted) {
          addClass(container, swalClasses['no-transition']);
        }
        setInnerHtml(container, sweetHTML);
        const targetElement = getTarget(params.target);
        targetElement.appendChild(container);
        setupAccessibility(params);
        setupRTL(targetElement);
        addInputChangeListeners();
      };

      /**
       * @param {HTMLElement | object | string} param
       * @param {HTMLElement} target
       */
      const parseHtmlToContainer = (param, target) => {
        // DOM element
        if (param instanceof HTMLElement) {
          target.appendChild(param);
        }

        // Object
        else if (typeof param === 'object') {
          handleObject(param, target);
        }

        // Plain string
        else if (param) {
          setInnerHtml(target, param);
        }
      };

      /**
       * @param {object} param
       * @param {HTMLElement} target
       */
      const handleObject = (param, target) => {
        // JQuery element(s)
        if (param.jquery) {
          handleJqueryElem(target, param);
        }

        // For other objects use their string representation
        else {
          setInnerHtml(target, param.toString());
        }
      };

      /**
       * @param {HTMLElement} target
       * @param {HTMLElement} elem
       */
      const handleJqueryElem = (target, elem) => {
        target.textContent = '';
        if (0 in elem) {
          for (let i = 0; (i in elem); i++) {
            target.appendChild(elem[i].cloneNode(true));
          }
        } else {
          target.appendChild(elem.cloneNode(true));
        }
      };

      /**
       * @returns {'webkitAnimationEnd' | 'animationend' | false}
       */
      const animationEndEvent = (() => {
        // Prevent run in Node env
        /* istanbul ignore if */
        if (isNodeEnv()) {
          return false;
        }
        const testEl = document.createElement('div');
        const transEndEventNames = {
          WebkitAnimation: 'webkitAnimationEnd',
          // Chrome, Safari and Opera
          animation: 'animationend' // Standard syntax
        };

        for (const i in transEndEventNames) {
          if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {
            return transEndEventNames[i];
          }
        }
        return false;
      })();

      /**
       * Measure scrollbar width for padding body during modal show/hide
       * https://github.com/twbs/bootstrap/blob/master/js/src/modal.js
       *
       * @returns {number}
       */
      const measureScrollbar = () => {
        const scrollDiv = document.createElement('div');
        scrollDiv.className = swalClasses['scrollbar-measure'];
        document.body.appendChild(scrollDiv);
        const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarWidth;
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderActions = (instance, params) => {
        const actions = getActions();
        const loader = getLoader();

        // Actions (buttons) wrapper
        if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {
          hide(actions);
        } else {
          show(actions);
        }

        // Custom class
        applyCustomClass(actions, params, 'actions');

        // Render all the buttons
        renderButtons(actions, loader, params);

        // Loader
        setInnerHtml(loader, params.loaderHtml);
        applyCustomClass(loader, params, 'loader');
      };

      /**
       * @param {HTMLElement} actions
       * @param {HTMLElement} loader
       * @param {SweetAlertOptions} params
       */
      function renderButtons(actions, loader, params) {
        const confirmButton = getConfirmButton();
        const denyButton = getDenyButton();
        const cancelButton = getCancelButton();

        // Render buttons
        renderButton(confirmButton, 'confirm', params);
        renderButton(denyButton, 'deny', params);
        renderButton(cancelButton, 'cancel', params);
        handleButtonsStyling(confirmButton, denyButton, cancelButton, params);
        if (params.reverseButtons) {
          if (params.toast) {
            actions.insertBefore(cancelButton, confirmButton);
            actions.insertBefore(denyButton, confirmButton);
          } else {
            actions.insertBefore(cancelButton, loader);
            actions.insertBefore(denyButton, loader);
            actions.insertBefore(confirmButton, loader);
          }
        }
      }

      /**
       * @param {HTMLElement} confirmButton
       * @param {HTMLElement} denyButton
       * @param {HTMLElement} cancelButton
       * @param {SweetAlertOptions} params
       */
      function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {
        if (!params.buttonsStyling) {
          removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);
          return;
        }
        addClass([confirmButton, denyButton, cancelButton], swalClasses.styled);

        // Buttons background colors
        if (params.confirmButtonColor) {
          confirmButton.style.backgroundColor = params.confirmButtonColor;
          addClass(confirmButton, swalClasses['default-outline']);
        }
        if (params.denyButtonColor) {
          denyButton.style.backgroundColor = params.denyButtonColor;
          addClass(denyButton, swalClasses['default-outline']);
        }
        if (params.cancelButtonColor) {
          cancelButton.style.backgroundColor = params.cancelButtonColor;
          addClass(cancelButton, swalClasses['default-outline']);
        }
      }

      /**
       * @param {HTMLElement} button
       * @param {'confirm' | 'deny' | 'cancel'} buttonType
       * @param {SweetAlertOptions} params
       */
      function renderButton(button, buttonType, params) {
        toggle(button, params[`show${capitalizeFirstLetter(buttonType)}Button`], 'inline-block');
        setInnerHtml(button, params[`${buttonType}ButtonText`]); // Set caption text
        button.setAttribute('aria-label', params[`${buttonType}ButtonAriaLabel`]); // ARIA label

        // Add buttons custom classes
        button.className = swalClasses[buttonType];
        applyCustomClass(button, params, `${buttonType}Button`);
        addClass(button, params[`${buttonType}ButtonClass`]);
      }

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderCloseButton = (instance, params) => {
        const closeButton = getCloseButton();
        setInnerHtml(closeButton, params.closeButtonHtml);

        // Custom class
        applyCustomClass(closeButton, params, 'closeButton');
        toggle(closeButton, params.showCloseButton);
        closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderContainer = (instance, params) => {
        const container = getContainer();
        if (!container) {
          return;
        }
        handleBackdropParam(container, params.backdrop);
        handlePositionParam(container, params.position);
        handleGrowParam(container, params.grow);

        // Custom class
        applyCustomClass(container, params, 'container');
      };

      /**
       * @param {HTMLElement} container
       * @param {SweetAlertOptions['backdrop']} backdrop
       */
      function handleBackdropParam(container, backdrop) {
        if (typeof backdrop === 'string') {
          container.style.background = backdrop;
        } else if (!backdrop) {
          addClass([document.documentElement, document.body], swalClasses['no-backdrop']);
        }
      }

      /**
       * @param {HTMLElement} container
       * @param {SweetAlertOptions['position']} position
       */
      function handlePositionParam(container, position) {
        if (position in swalClasses) {
          addClass(container, swalClasses[position]);
        } else {
          warn('The "position" parameter is not valid, defaulting to "center"');
          addClass(container, swalClasses.center);
        }
      }

      /**
       * @param {HTMLElement} container
       * @param {SweetAlertOptions['grow']} grow
       */
      function handleGrowParam(container, grow) {
        if (grow && typeof grow === 'string') {
          const growClass = `grow-${grow}`;
          if (growClass in swalClasses) {
            addClass(container, swalClasses[growClass]);
          }
        }
      }

      /// <reference path="../../../../sweetalert2.d.ts"/>

      /** @type {InputClass[]} */
      const inputClasses = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderInput = (instance, params) => {
        const popup = getPopup();
        const innerParams = privateProps.innerParams.get(instance);
        const rerender = !innerParams || params.input !== innerParams.input;
        inputClasses.forEach(inputClass => {
          const inputContainer = getDirectChildByClass(popup, swalClasses[inputClass]);

          // set attributes
          setAttributes(inputClass, params.inputAttributes);

          // set class
          inputContainer.className = swalClasses[inputClass];
          if (rerender) {
            hide(inputContainer);
          }
        });
        if (params.input) {
          if (rerender) {
            showInput(params);
          }
          // set custom class
          setCustomClass(params);
        }
      };

      /**
       * @param {SweetAlertOptions} params
       */
      const showInput = params => {
        if (!renderInputType[params.input]) {
          error(`Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "${params.input}"`);
          return;
        }
        const inputContainer = getInputContainer(params.input);
        const input = renderInputType[params.input](inputContainer, params);
        show(inputContainer);

        // input autofocus
        setTimeout(() => {
          focusInput(input);
        });
      };

      /**
       * @param {HTMLInputElement} input
       */
      const removeAttributes = input => {
        for (let i = 0; i < input.attributes.length; i++) {
          const attrName = input.attributes[i].name;
          if (!['type', 'value', 'style'].includes(attrName)) {
            input.removeAttribute(attrName);
          }
        }
      };

      /**
       * @param {InputClass} inputClass
       * @param {SweetAlertOptions['inputAttributes']} inputAttributes
       */
      const setAttributes = (inputClass, inputAttributes) => {
        const input = getInput$1(getPopup(), inputClass);
        if (!input) {
          return;
        }
        removeAttributes(input);
        for (const attr in inputAttributes) {
          input.setAttribute(attr, inputAttributes[attr]);
        }
      };

      /**
       * @param {SweetAlertOptions} params
       */
      const setCustomClass = params => {
        const inputContainer = getInputContainer(params.input);
        if (typeof params.customClass === 'object') {
          addClass(inputContainer, params.customClass.input);
        }
      };

      /**
       * @param {HTMLInputElement | HTMLTextAreaElement} input
       * @param {SweetAlertOptions} params
       */
      const setInputPlaceholder = (input, params) => {
        if (!input.placeholder || params.inputPlaceholder) {
          input.placeholder = params.inputPlaceholder;
        }
      };

      /**
       * @param {Input} input
       * @param {Input} prependTo
       * @param {SweetAlertOptions} params
       */
      const setInputLabel = (input, prependTo, params) => {
        if (params.inputLabel) {
          input.id = swalClasses.input;
          const label = document.createElement('label');
          const labelClass = swalClasses['input-label'];
          label.setAttribute('for', input.id);
          label.className = labelClass;
          if (typeof params.customClass === 'object') {
            addClass(label, params.customClass.inputLabel);
          }
          label.innerText = params.inputLabel;
          prependTo.insertAdjacentElement('beforebegin', label);
        }
      };

      /**
       * @param {SweetAlertOptions['input']} inputType
       * @returns {HTMLElement}
       */
      const getInputContainer = inputType => {
        return getDirectChildByClass(getPopup(), swalClasses[inputType] || swalClasses.input);
      };

      /**
       * @param {HTMLInputElement | HTMLOutputElement | HTMLTextAreaElement} input
       * @param {SweetAlertOptions['inputValue']} inputValue
       */
      const checkAndSetInputValue = (input, inputValue) => {
        if (['string', 'number'].includes(typeof inputValue)) {
          input.value = `${inputValue}`;
        } else if (!isPromise(inputValue)) {
          warn(`Unexpected type of inputValue! Expected "string", "number" or "Promise", got "${typeof inputValue}"`);
        }
      };

      /** @type {Record<string, (input: Input | HTMLElement, params: SweetAlertOptions) => Input>} */
      const renderInputType = {};

      /**
       * @param {HTMLInputElement} input
       * @param {SweetAlertOptions} params
       * @returns {HTMLInputElement}
       */
      renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = (input, params) => {
        checkAndSetInputValue(input, params.inputValue);
        setInputLabel(input, input, params);
        setInputPlaceholder(input, params);
        input.type = params.input;
        return input;
      };

      /**
       * @param {HTMLInputElement} input
       * @param {SweetAlertOptions} params
       * @returns {HTMLInputElement}
       */
      renderInputType.file = (input, params) => {
        setInputLabel(input, input, params);
        setInputPlaceholder(input, params);
        return input;
      };

      /**
       * @param {HTMLInputElement} range
       * @param {SweetAlertOptions} params
       * @returns {HTMLInputElement}
       */
      renderInputType.range = (range, params) => {
        const rangeInput = range.querySelector('input');
        const rangeOutput = range.querySelector('output');
        checkAndSetInputValue(rangeInput, params.inputValue);
        rangeInput.type = params.input;
        checkAndSetInputValue(rangeOutput, params.inputValue);
        setInputLabel(rangeInput, range, params);
        return range;
      };

      /**
       * @param {HTMLSelectElement} select
       * @param {SweetAlertOptions} params
       * @returns {HTMLSelectElement}
       */
      renderInputType.select = (select, params) => {
        select.textContent = '';
        if (params.inputPlaceholder) {
          const placeholder = document.createElement('option');
          setInnerHtml(placeholder, params.inputPlaceholder);
          placeholder.value = '';
          placeholder.disabled = true;
          placeholder.selected = true;
          select.appendChild(placeholder);
        }
        setInputLabel(select, select, params);
        return select;
      };

      /**
       * @param {HTMLInputElement} radio
       * @returns {HTMLInputElement}
       */
      renderInputType.radio = radio => {
        radio.textContent = '';
        return radio;
      };

      /**
       * @param {HTMLLabelElement} checkboxContainer
       * @param {SweetAlertOptions} params
       * @returns {HTMLInputElement}
       */
      renderInputType.checkbox = (checkboxContainer, params) => {
        const checkbox = getInput$1(getPopup(), 'checkbox');
        checkbox.value = '1';
        checkbox.id = swalClasses.checkbox;
        checkbox.checked = Boolean(params.inputValue);
        const label = checkboxContainer.querySelector('span');
        setInnerHtml(label, params.inputPlaceholder);
        return checkbox;
      };

      /**
       * @param {HTMLTextAreaElement} textarea
       * @param {SweetAlertOptions} params
       * @returns {HTMLTextAreaElement}
       */
      renderInputType.textarea = (textarea, params) => {
        checkAndSetInputValue(textarea, params.inputValue);
        setInputPlaceholder(textarea, params);
        setInputLabel(textarea, textarea, params);

        /**
         * @param {HTMLElement} el
         * @returns {number}
         */
        const getMargin = el => parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight);

        // https://github.com/sweetalert2/sweetalert2/issues/2291
        setTimeout(() => {
          // https://github.com/sweetalert2/sweetalert2/issues/1699
          if ('MutationObserver' in window) {
            const initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);
            const textareaResizeHandler = () => {
              const textareaWidth = textarea.offsetWidth + getMargin(textarea);
              if (textareaWidth > initialPopupWidth) {
                getPopup().style.width = `${textareaWidth}px`;
              } else {
                getPopup().style.width = null;
              }
            };
            new MutationObserver(textareaResizeHandler).observe(textarea, {
              attributes: true,
              attributeFilter: ['style']
            });
          }
        });
        return textarea;
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderContent = (instance, params) => {
        const htmlContainer = getHtmlContainer();
        applyCustomClass(htmlContainer, params, 'htmlContainer');

        // Content as HTML
        if (params.html) {
          parseHtmlToContainer(params.html, htmlContainer);
          show(htmlContainer, 'block');
        }

        // Content as plain text
        else if (params.text) {
          htmlContainer.textContent = params.text;
          show(htmlContainer, 'block');
        }

        // No content
        else {
          hide(htmlContainer);
        }
        renderInput(instance, params);
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderFooter = (instance, params) => {
        const footer = getFooter();
        toggle(footer, params.footer);
        if (params.footer) {
          parseHtmlToContainer(params.footer, footer);
        }

        // Custom class
        applyCustomClass(footer, params, 'footer');
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderIcon = (instance, params) => {
        const innerParams = privateProps.innerParams.get(instance);
        const icon = getIcon();

        // if the given icon already rendered, apply the styling without re-rendering the icon
        if (innerParams && params.icon === innerParams.icon) {
          // Custom or default content
          setContent(icon, params);
          applyStyles(icon, params);
          return;
        }
        if (!params.icon && !params.iconHtml) {
          hide(icon);
          return;
        }
        if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {
          error(`Unknown icon! Expected "success", "error", "warning", "info" or "question", got "${params.icon}"`);
          hide(icon);
          return;
        }
        show(icon);

        // Custom or default content
        setContent(icon, params);
        applyStyles(icon, params);

        // Animate icon
        addClass(icon, params.showClass.icon);
      };

      /**
       * @param {HTMLElement} icon
       * @param {SweetAlertOptions} params
       */
      const applyStyles = (icon, params) => {
        for (const iconType in iconTypes) {
          if (params.icon !== iconType) {
            removeClass(icon, iconTypes[iconType]);
          }
        }
        addClass(icon, iconTypes[params.icon]);

        // Icon color
        setColor(icon, params);

        // Success icon background color
        adjustSuccessIconBackgroundColor();

        // Custom class
        applyCustomClass(icon, params, 'icon');
      };

      // Adjust success icon background color to match the popup background color
      const adjustSuccessIconBackgroundColor = () => {
        const popup = getPopup();
        const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');
        /** @type {NodeListOf<HTMLElement>} */
        const successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');
        for (let i = 0; i < successIconParts.length; i++) {
          successIconParts[i].style.backgroundColor = popupBackgroundColor;
        }
      };
      const successIconHtml = `
  <div class="swal2-success-circular-line-left"></div>
  <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>
  <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>
  <div class="swal2-success-circular-line-right"></div>
`;
      const errorIconHtml = `
  <span class="swal2-x-mark">
    <span class="swal2-x-mark-line-left"></span>
    <span class="swal2-x-mark-line-right"></span>
  </span>
`;

      /**
       * @param {HTMLElement} icon
       * @param {SweetAlertOptions} params
       */
      const setContent = (icon, params) => {
        let oldContent = icon.innerHTML;
        let newContent;
        if (params.iconHtml) {
          newContent = iconContent(params.iconHtml);
        } else if (params.icon === 'success') {
          newContent = successIconHtml;
          oldContent = oldContent.replace(/ style=".*?"/g, ''); // undo adjustSuccessIconBackgroundColor()
        } else if (params.icon === 'error') {
          newContent = errorIconHtml;
        } else {
          const defaultIconHtml = {
            question: '?',
            warning: '!',
            info: 'i'
          };
          newContent = iconContent(defaultIconHtml[params.icon]);
        }
        if (oldContent.trim() !== newContent.trim()) {
          setInnerHtml(icon, newContent);
        }
      };

      /**
       * @param {HTMLElement} icon
       * @param {SweetAlertOptions} params
       */
      const setColor = (icon, params) => {
        if (!params.iconColor) {
          return;
        }
        icon.style.color = params.iconColor;
        icon.style.borderColor = params.iconColor;
        for (const sel of ['.swal2-success-line-tip', '.swal2-success-line-long', '.swal2-x-mark-line-left', '.swal2-x-mark-line-right']) {
          setStyle(icon, sel, 'backgroundColor', params.iconColor);
        }
        setStyle(icon, '.swal2-success-ring', 'borderColor', params.iconColor);
      };

      /**
       * @param {string} content
       * @returns {string}
       */
      const iconContent = content => `<div class="${swalClasses['icon-content']}">${content}</div>`;

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderImage = (instance, params) => {
        const image = getImage();
        if (!params.imageUrl) {
          hide(image);
          return;
        }
        show(image, '');

        // Src, alt
        image.setAttribute('src', params.imageUrl);
        image.setAttribute('alt', params.imageAlt);

        // Width, height
        applyNumericalStyle(image, 'width', params.imageWidth);
        applyNumericalStyle(image, 'height', params.imageHeight);

        // Class
        image.className = swalClasses.image;
        applyCustomClass(image, params, 'image');
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderPopup = (instance, params) => {
        const container = getContainer();
        const popup = getPopup();

        // Width
        // https://github.com/sweetalert2/sweetalert2/issues/2170
        if (params.toast) {
          applyNumericalStyle(container, 'width', params.width);
          popup.style.width = '100%';
          popup.insertBefore(getLoader(), getIcon());
        } else {
          applyNumericalStyle(popup, 'width', params.width);
        }

        // Padding
        applyNumericalStyle(popup, 'padding', params.padding);

        // Color
        if (params.color) {
          popup.style.color = params.color;
        }

        // Background
        if (params.background) {
          popup.style.background = params.background;
        }
        hide(getValidationMessage());

        // Classes
        addClasses$1(popup, params);
      };

      /**
       * @param {HTMLElement} popup
       * @param {SweetAlertOptions} params
       */
      const addClasses$1 = (popup, params) => {
        // Default Class + showClass when updating Swal.update({})
        popup.className = `${swalClasses.popup} ${isVisible$1(popup) ? params.showClass.popup : ''}`;
        if (params.toast) {
          addClass([document.documentElement, document.body], swalClasses['toast-shown']);
          addClass(popup, swalClasses.toast);
        } else {
          addClass(popup, swalClasses.modal);
        }

        // Custom class
        applyCustomClass(popup, params, 'popup');
        if (typeof params.customClass === 'string') {
          addClass(popup, params.customClass);
        }

        // Icon class (#1842)
        if (params.icon) {
          addClass(popup, swalClasses[`icon-${params.icon}`]);
        }
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderProgressSteps = (instance, params) => {
        const progressStepsContainer = getProgressSteps$1();
        if (!params.progressSteps || params.progressSteps.length === 0) {
          hide(progressStepsContainer);
          return;
        }
        show(progressStepsContainer);
        progressStepsContainer.textContent = '';
        if (params.currentProgressStep >= params.progressSteps.length) {
          warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');
        }
        params.progressSteps.forEach((step, index) => {
          const stepEl = createStepElement(step);
          progressStepsContainer.appendChild(stepEl);
          if (index === params.currentProgressStep) {
            addClass(stepEl, swalClasses['active-progress-step']);
          }
          if (index !== params.progressSteps.length - 1) {
            const lineEl = createLineElement(params);
            progressStepsContainer.appendChild(lineEl);
          }
        });
      };

      /**
       * @param {string} step
       * @returns {HTMLLIElement}
       */
      const createStepElement = step => {
        const stepEl = document.createElement('li');
        addClass(stepEl, swalClasses['progress-step']);
        setInnerHtml(stepEl, step);
        return stepEl;
      };

      /**
       * @param {SweetAlertOptions} params
       * @returns {HTMLLIElement}
       */
      const createLineElement = params => {
        const lineEl = document.createElement('li');
        addClass(lineEl, swalClasses['progress-step-line']);
        if (params.progressStepsDistance) {
          applyNumericalStyle(lineEl, 'width', params.progressStepsDistance);
        }
        return lineEl;
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const renderTitle = (instance, params) => {
        const title = getTitle();
        toggle(title, params.title || params.titleText, 'block');
        if (params.title) {
          parseHtmlToContainer(params.title, title);
        }
        if (params.titleText) {
          title.innerText = params.titleText;
        }

        // Custom class
        applyCustomClass(title, params, 'title');
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const render = (instance, params) => {
        renderPopup(instance, params);
        renderContainer(instance, params);
        renderProgressSteps(instance, params);
        renderIcon(instance, params);
        renderImage(instance, params);
        renderTitle(instance, params);
        renderCloseButton(instance, params);
        renderContent(instance, params);
        renderActions(instance, params);
        renderFooter(instance, params);
        if (typeof params.didRender === 'function') {
          params.didRender(getPopup());
        }
      };

      /**
       * Hides loader and shows back the button which was hidden by .showLoading()
       */
      function hideLoading() {
        // do nothing if popup is closed
        const innerParams = privateProps.innerParams.get(this);
        if (!innerParams) {
          return;
        }
        const domCache = privateProps.domCache.get(this);
        hide(domCache.loader);
        if (isToast()) {
          if (innerParams.icon) {
            show(getIcon());
          }
        } else {
          showRelatedButton(domCache);
        }
        removeClass([domCache.popup, domCache.actions], swalClasses.loading);
        domCache.popup.removeAttribute('aria-busy');
        domCache.popup.removeAttribute('data-loading');
        domCache.confirmButton.disabled = false;
        domCache.denyButton.disabled = false;
        domCache.cancelButton.disabled = false;
      }
      const showRelatedButton = domCache => {
        const buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute('data-button-to-replace'));
        if (buttonToReplace.length) {
          show(buttonToReplace[0], 'inline-block');
        } else if (allButtonsAreHidden()) {
          hide(domCache.actions);
        }
      };

      /**
       * Gets the input DOM node, this method works with input parameter.
       *
       * @param {SweetAlert2} instance
       * @returns {HTMLElement | null}
       */
      function getInput(instance) {
        const innerParams = privateProps.innerParams.get(instance || this);
        const domCache = privateProps.domCache.get(instance || this);
        if (!domCache) {
          return null;
        }
        return getInput$1(domCache.popup, innerParams.input);
      }

      /*
       * Global function to determine if SweetAlert2 popup is shown
       */
      const isVisible = () => {
        return isVisible$1(getPopup());
      };

      /*
       * Global function to click 'Confirm' button
       */
      const clickConfirm = () => getConfirmButton() && getConfirmButton().click();

      /*
       * Global function to click 'Deny' button
       */
      const clickDeny = () => getDenyButton() && getDenyButton().click();

      /*
       * Global function to click 'Cancel' button
       */
      const clickCancel = () => getCancelButton() && getCancelButton().click();

      const DismissReason = Object.freeze({
        cancel: 'cancel',
        backdrop: 'backdrop',
        close: 'close',
        esc: 'esc',
        timer: 'timer'
      });

      /**
       * @param {GlobalState} globalState
       */
      const removeKeydownHandler = globalState => {
        if (globalState.keydownTarget && globalState.keydownHandlerAdded) {
          globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
            capture: globalState.keydownListenerCapture
          });
          globalState.keydownHandlerAdded = false;
        }
      };

      /**
       * @param {SweetAlert2} instance
       * @param {GlobalState} globalState
       * @param {SweetAlertOptions} innerParams
       * @param {*} dismissWith
       */
      const addKeydownHandler = (instance, globalState, innerParams, dismissWith) => {
        removeKeydownHandler(globalState);
        if (!innerParams.toast) {
          globalState.keydownHandler = e => keydownHandler(instance, e, dismissWith);
          globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
          globalState.keydownListenerCapture = innerParams.keydownListenerCapture;
          globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {
            capture: globalState.keydownListenerCapture
          });
          globalState.keydownHandlerAdded = true;
        }
      };

      /**
       * @param {SweetAlertOptions} innerParams
       * @param {number} index
       * @param {number} increment
       */
      const setFocus = (innerParams, index, increment) => {
        const focusableElements = getFocusableElements();
        // search for visible elements and select the next possible match
        if (focusableElements.length) {
          index = index + increment;

          // rollover to first item
          if (index === focusableElements.length) {
            index = 0;

            // go to last item
          } else if (index === -1) {
            index = focusableElements.length - 1;
          }
          return focusableElements[index].focus();
        }
        // no visible focusable elements, focus the popup
        getPopup().focus();
      };
      const arrowKeysNextButton = ['ArrowRight', 'ArrowDown'];
      const arrowKeysPreviousButton = ['ArrowLeft', 'ArrowUp'];

      /**
       * @param {SweetAlert2} instance
       * @param {KeyboardEvent} e
       * @param {function} dismissWith
       */
      const keydownHandler = (instance, e, dismissWith) => {
        const innerParams = privateProps.innerParams.get(instance);
        if (!innerParams) {
          return; // This instance has already been destroyed
        }

        // Ignore keydown during IME composition
        // https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event#ignoring_keydown_during_ime_composition
        // https://github.com/sweetalert2/sweetalert2/issues/720
        // https://github.com/sweetalert2/sweetalert2/issues/2406
        if (e.isComposing || e.keyCode === 229) {
          return;
        }
        if (innerParams.stopKeydownPropagation) {
          e.stopPropagation();
        }

        // ENTER
        if (e.key === 'Enter') {
          handleEnter(instance, e, innerParams);
        }

        // TAB
        else if (e.key === 'Tab') {
          handleTab(e, innerParams);
        }

        // ARROWS - switch focus between buttons
        else if ([...arrowKeysNextButton, ...arrowKeysPreviousButton].includes(e.key)) {
          handleArrows(e.key);
        }

        // ESC
        else if (e.key === 'Escape') {
          handleEsc(e, innerParams, dismissWith);
        }
      };

      /**
       * @param {SweetAlert2} instance
       * @param {KeyboardEvent} e
       * @param {SweetAlertOptions} innerParams
       */
      const handleEnter = (instance, e, innerParams) => {
        // https://github.com/sweetalert2/sweetalert2/issues/2386
        if (!callIfFunction(innerParams.allowEnterKey)) {
          return;
        }
        if (e.target && instance.getInput() && e.target instanceof HTMLElement && e.target.outerHTML === instance.getInput().outerHTML) {
          if (['textarea', 'file'].includes(innerParams.input)) {
            return; // do not submit
          }

          clickConfirm();
          e.preventDefault();
        }
      };

      /**
       * @param {KeyboardEvent} e
       * @param {SweetAlertOptions} innerParams
       */
      const handleTab = (e, innerParams) => {
        const targetElement = e.target;
        const focusableElements = getFocusableElements();
        let btnIndex = -1;
        for (let i = 0; i < focusableElements.length; i++) {
          if (targetElement === focusableElements[i]) {
            btnIndex = i;
            break;
          }
        }

        // Cycle to the next button
        if (!e.shiftKey) {
          setFocus(innerParams, btnIndex, 1);
        }

        // Cycle to the prev button
        else {
          setFocus(innerParams, btnIndex, -1);
        }
        e.stopPropagation();
        e.preventDefault();
      };

      /**
       * @param {string} key
       */
      const handleArrows = key => {
        const confirmButton = getConfirmButton();
        const denyButton = getDenyButton();
        const cancelButton = getCancelButton();
        if (document.activeElement instanceof HTMLElement && ![confirmButton, denyButton, cancelButton].includes(document.activeElement)) {
          return;
        }
        const sibling = arrowKeysNextButton.includes(key) ? 'nextElementSibling' : 'previousElementSibling';
        let buttonToFocus = document.activeElement;
        for (let i = 0; i < getActions().children.length; i++) {
          buttonToFocus = buttonToFocus[sibling];
          if (!buttonToFocus) {
            return;
          }
          if (buttonToFocus instanceof HTMLButtonElement && isVisible$1(buttonToFocus)) {
            break;
          }
        }
        if (buttonToFocus instanceof HTMLButtonElement) {
          buttonToFocus.focus();
        }
      };

      /**
       * @param {KeyboardEvent} e
       * @param {SweetAlertOptions} innerParams
       * @param {function} dismissWith
       */
      const handleEsc = (e, innerParams, dismissWith) => {
        if (callIfFunction(innerParams.allowEscapeKey)) {
          e.preventDefault();
          dismissWith(DismissReason.esc);
        }
      };

      /**
       * This module contains `WeakMap`s for each effectively-"private  property" that a `Swal` has.
       * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
       * This is the approach that Babel will probably take to implement private methods/fields
       *   https://github.com/tc39/proposal-private-methods
       *   https://github.com/babel/babel/pull/7555
       * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
       *   then we can use that language feature.
       */

      var privateMethods = {
        swalPromiseResolve: new WeakMap(),
        swalPromiseReject: new WeakMap()
      };

      // From https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/
      // Adding aria-hidden="true" to elements outside of the active modal dialog ensures that
      // elements not within the active modal dialog will not be surfaced if a user opens a screen
      // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.

      const setAriaHidden = () => {
        const bodyChildren = Array.from(document.body.children);
        bodyChildren.forEach(el => {
          if (el === getContainer() || el.contains(getContainer())) {
            return;
          }
          if (el.hasAttribute('aria-hidden')) {
            el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));
          }
          el.setAttribute('aria-hidden', 'true');
        });
      };
      const unsetAriaHidden = () => {
        const bodyChildren = Array.from(document.body.children);
        bodyChildren.forEach(el => {
          if (el.hasAttribute('data-previous-aria-hidden')) {
            el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));
            el.removeAttribute('data-previous-aria-hidden');
          } else {
            el.removeAttribute('aria-hidden');
          }
        });
      };

      /* istanbul ignore file */

      // Fix iOS scrolling http://stackoverflow.com/q/39626302

      const iOSfix = () => {
        const iOS =
        // @ts-ignore
        /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;
        if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
          const offset = document.body.scrollTop;
          document.body.style.top = `${offset * -1}px`;
          addClass(document.body, swalClasses.iosfix);
          lockBodyScroll();
          addBottomPaddingForTallPopups();
        }
      };

      /**
       * https://github.com/sweetalert2/sweetalert2/issues/1948
       */
      const addBottomPaddingForTallPopups = () => {
        const ua = navigator.userAgent;
        const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
        const webkit = !!ua.match(/WebKit/i);
        const iOSSafari = iOS && webkit && !ua.match(/CriOS/i);
        if (iOSSafari) {
          const bottomPanelHeight = 44;
          if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) {
            getContainer().style.paddingBottom = `${bottomPanelHeight}px`;
          }
        }
      };

      /**
       * https://github.com/sweetalert2/sweetalert2/issues/1246
       */
      const lockBodyScroll = () => {
        const container = getContainer();
        let preventTouchMove;
        /**
         * @param {TouchEvent} e
         */
        container.ontouchstart = e => {
          preventTouchMove = shouldPreventTouchMove(e);
        };
        /**
         * @param {TouchEvent} e
         */
        container.ontouchmove = e => {
          if (preventTouchMove) {
            e.preventDefault();
            e.stopPropagation();
          }
        };
      };

      /**
       * @param {TouchEvent} event
       * @returns {boolean}
       */
      const shouldPreventTouchMove = event => {
        const target = event.target;
        const container = getContainer();
        if (isStylus(event) || isZoom(event)) {
          return false;
        }
        if (target === container) {
          return true;
        }
        if (!isScrollable(container) && target instanceof HTMLElement && target.tagName !== 'INPUT' &&
        // #1603
        target.tagName !== 'TEXTAREA' &&
        // #2266
        !(isScrollable(getHtmlContainer()) &&
        // #1944
        getHtmlContainer().contains(target))) {
          return true;
        }
        return false;
      };

      /**
       * https://github.com/sweetalert2/sweetalert2/issues/1786
       *
       * @param {*} event
       * @returns {boolean}
       */
      const isStylus = event => {
        return event.touches && event.touches.length && event.touches[0].touchType === 'stylus';
      };

      /**
       * https://github.com/sweetalert2/sweetalert2/issues/1891
       *
       * @param {TouchEvent} event
       * @returns {boolean}
       */
      const isZoom = event => {
        return event.touches && event.touches.length > 1;
      };
      const undoIOSfix = () => {
        if (hasClass(document.body, swalClasses.iosfix)) {
          const offset = parseInt(document.body.style.top, 10);
          removeClass(document.body, swalClasses.iosfix);
          document.body.style.top = '';
          document.body.scrollTop = offset * -1;
        }
      };

      const fixScrollbar = () => {
        // for queues, do not do this more than once
        if (states.previousBodyPadding !== null) {
          return;
        }
        // if the body has overflow
        if (document.body.scrollHeight > window.innerHeight) {
          // add padding so the content doesn't shift after removal of scrollbar
          states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));
          document.body.style.paddingRight = `${states.previousBodyPadding + measureScrollbar()}px`;
        }
      };
      const undoScrollbar = () => {
        if (states.previousBodyPadding !== null) {
          document.body.style.paddingRight = `${states.previousBodyPadding}px`;
          states.previousBodyPadding = null;
        }
      };

      /*
       * Instance method to close sweetAlert
       */

      function removePopupAndResetState(instance, container, returnFocus, didClose) {
        if (isToast()) {
          triggerDidCloseAndDispose(instance, didClose);
        } else {
          restoreActiveElement(returnFocus).then(() => triggerDidCloseAndDispose(instance, didClose));
          removeKeydownHandler(globalState);
        }
        const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        // workaround for #2088
        // for some reason removing the container in Safari will scroll the document to bottom
        if (isSafari) {
          container.setAttribute('style', 'display:none !important');
          container.removeAttribute('class');
          container.innerHTML = '';
        } else {
          container.remove();
        }
        if (isModal()) {
          undoScrollbar();
          undoIOSfix();
          unsetAriaHidden();
        }
        removeBodyClasses();
      }
      function removeBodyClasses() {
        removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown']]);
      }
      function close(resolveValue) {
        resolveValue = prepareResolveValue(resolveValue);
        const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
        const didClose = triggerClosePopup(this);
        if (this.isAwaitingPromise()) {
          // A swal awaiting for a promise (after a click on Confirm or Deny) cannot be dismissed anymore #2335
          if (!resolveValue.isDismissed) {
            handleAwaitingPromise(this);
            swalPromiseResolve(resolveValue);
          }
        } else if (didClose) {
          // Resolve Swal promise
          swalPromiseResolve(resolveValue);
        }
      }
      function isAwaitingPromise() {
        return !!privateProps.awaitingPromise.get(this);
      }
      const triggerClosePopup = instance => {
        const popup = getPopup();
        if (!popup) {
          return false;
        }
        const innerParams = privateProps.innerParams.get(instance);
        if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {
          return false;
        }
        removeClass(popup, innerParams.showClass.popup);
        addClass(popup, innerParams.hideClass.popup);
        const backdrop = getContainer();
        removeClass(backdrop, innerParams.showClass.backdrop);
        addClass(backdrop, innerParams.hideClass.backdrop);
        handlePopupAnimation(instance, popup, innerParams);
        return true;
      };
      function rejectPromise(error) {
        const rejectPromise = privateMethods.swalPromiseReject.get(this);
        handleAwaitingPromise(this);
        if (rejectPromise) {
          // Reject Swal promise
          rejectPromise(error);
        }
      }
      const handleAwaitingPromise = instance => {
        if (instance.isAwaitingPromise()) {
          privateProps.awaitingPromise.delete(instance);
          // The instance might have been previously partly destroyed, we must resume the destroy process in this case #2335
          if (!privateProps.innerParams.get(instance)) {
            instance._destroy();
          }
        }
      };
      const prepareResolveValue = resolveValue => {
        // When user calls Swal.close()
        if (typeof resolveValue === 'undefined') {
          return {
            isConfirmed: false,
            isDenied: false,
            isDismissed: true
          };
        }
        return Object.assign({
          isConfirmed: false,
          isDenied: false,
          isDismissed: false
        }, resolveValue);
      };
      const handlePopupAnimation = (instance, popup, innerParams) => {
        const container = getContainer();
        // If animation is supported, animate
        const animationIsSupported = animationEndEvent && hasCssAnimation(popup);
        if (typeof innerParams.willClose === 'function') {
          innerParams.willClose(popup);
        }
        if (animationIsSupported) {
          animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);
        } else {
          // Otherwise, remove immediately
          removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);
        }
      };
      const animatePopup = (instance, popup, container, returnFocus, didClose) => {
        globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, returnFocus, didClose);
        popup.addEventListener(animationEndEvent, function (e) {
          if (e.target === popup) {
            globalState.swalCloseEventFinishedCallback();
            delete globalState.swalCloseEventFinishedCallback;
          }
        });
      };
      const triggerDidCloseAndDispose = (instance, didClose) => {
        setTimeout(() => {
          if (typeof didClose === 'function') {
            didClose.bind(instance.params)();
          }
          instance._destroy();
        });
      };

      /**
       * @param {SweetAlert2} instance
       * @param {string[]} buttons
       * @param {boolean} disabled
       */
      function setButtonsDisabled(instance, buttons, disabled) {
        const domCache = privateProps.domCache.get(instance);
        buttons.forEach(button => {
          domCache[button].disabled = disabled;
        });
      }

      /**
       * @param {HTMLInputElement} input
       * @param {boolean} disabled
       */
      function setInputDisabled(input, disabled) {
        if (!input) {
          return;
        }
        if (input.type === 'radio') {
          const radiosContainer = input.parentNode.parentNode;
          const radios = radiosContainer.querySelectorAll('input');
          for (let i = 0; i < radios.length; i++) {
            radios[i].disabled = disabled;
          }
        } else {
          input.disabled = disabled;
        }
      }
      function enableButtons() {
        setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], false);
      }
      function disableButtons() {
        setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], true);
      }
      function enableInput() {
        setInputDisabled(this.getInput(), false);
      }
      function disableInput() {
        setInputDisabled(this.getInput(), true);
      }

      // Show block with validation message
      function showValidationMessage(error) {
        const domCache = privateProps.domCache.get(this);
        const params = privateProps.innerParams.get(this);
        setInnerHtml(domCache.validationMessage, error);
        domCache.validationMessage.className = swalClasses['validation-message'];
        if (params.customClass && params.customClass.validationMessage) {
          addClass(domCache.validationMessage, params.customClass.validationMessage);
        }
        show(domCache.validationMessage);
        const input = this.getInput();
        if (input) {
          input.setAttribute('aria-invalid', true);
          input.setAttribute('aria-describedby', swalClasses['validation-message']);
          focusInput(input);
          addClass(input, swalClasses.inputerror);
        }
      }

      // Hide block with validation message
      function resetValidationMessage() {
        const domCache = privateProps.domCache.get(this);
        if (domCache.validationMessage) {
          hide(domCache.validationMessage);
        }
        const input = this.getInput();
        if (input) {
          input.removeAttribute('aria-invalid');
          input.removeAttribute('aria-describedby');
          removeClass(input, swalClasses.inputerror);
        }
      }

      function getProgressSteps() {
        const domCache = privateProps.domCache.get(this);
        return domCache.progressSteps;
      }

      const defaultParams = {
        title: '',
        titleText: '',
        text: '',
        html: '',
        footer: '',
        icon: undefined,
        iconColor: undefined,
        iconHtml: undefined,
        template: undefined,
        toast: false,
        showClass: {
          popup: 'swal2-show',
          backdrop: 'swal2-backdrop-show',
          icon: 'swal2-icon-show'
        },
        hideClass: {
          popup: 'swal2-hide',
          backdrop: 'swal2-backdrop-hide',
          icon: 'swal2-icon-hide'
        },
        customClass: {},
        target: 'body',
        color: undefined,
        backdrop: true,
        heightAuto: true,
        allowOutsideClick: true,
        allowEscapeKey: true,
        allowEnterKey: true,
        stopKeydownPropagation: true,
        keydownListenerCapture: false,
        showConfirmButton: true,
        showDenyButton: false,
        showCancelButton: false,
        preConfirm: undefined,
        preDeny: undefined,
        confirmButtonText: 'OK',
        confirmButtonAriaLabel: '',
        confirmButtonColor: undefined,
        denyButtonText: 'No',
        denyButtonAriaLabel: '',
        denyButtonColor: undefined,
        cancelButtonText: 'Cancel',
        cancelButtonAriaLabel: '',
        cancelButtonColor: undefined,
        buttonsStyling: true,
        reverseButtons: false,
        focusConfirm: true,
        focusDeny: false,
        focusCancel: false,
        returnFocus: true,
        showCloseButton: false,
        closeButtonHtml: '&times;',
        closeButtonAriaLabel: 'Close this dialog',
        loaderHtml: '',
        showLoaderOnConfirm: false,
        showLoaderOnDeny: false,
        imageUrl: undefined,
        imageWidth: undefined,
        imageHeight: undefined,
        imageAlt: '',
        timer: undefined,
        timerProgressBar: false,
        width: undefined,
        padding: undefined,
        background: undefined,
        input: undefined,
        inputPlaceholder: '',
        inputLabel: '',
        inputValue: '',
        inputOptions: {},
        inputAutoTrim: true,
        inputAttributes: {},
        inputValidator: undefined,
        returnInputValueOnDeny: false,
        validationMessage: undefined,
        grow: false,
        position: 'center',
        progressSteps: [],
        currentProgressStep: undefined,
        progressStepsDistance: undefined,
        willOpen: undefined,
        didOpen: undefined,
        didRender: undefined,
        willClose: undefined,
        didClose: undefined,
        didDestroy: undefined,
        scrollbarPadding: true
      };
      const updatableParams = ['allowEscapeKey', 'allowOutsideClick', 'background', 'buttonsStyling', 'cancelButtonAriaLabel', 'cancelButtonColor', 'cancelButtonText', 'closeButtonAriaLabel', 'closeButtonHtml', 'color', 'confirmButtonAriaLabel', 'confirmButtonColor', 'confirmButtonText', 'currentProgressStep', 'customClass', 'denyButtonAriaLabel', 'denyButtonColor', 'denyButtonText', 'didClose', 'didDestroy', 'footer', 'hideClass', 'html', 'icon', 'iconColor', 'iconHtml', 'imageAlt', 'imageHeight', 'imageUrl', 'imageWidth', 'preConfirm', 'preDeny', 'progressSteps', 'returnFocus', 'reverseButtons', 'showCancelButton', 'showCloseButton', 'showConfirmButton', 'showDenyButton', 'text', 'title', 'titleText', 'willClose'];
      const deprecatedParams = {};
      const toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusDeny', 'focusCancel', 'returnFocus', 'heightAuto', 'keydownListenerCapture'];

      /**
       * Is valid parameter
       *
       * @param {string} paramName
       * @returns {boolean}
       */
      const isValidParameter = paramName => {
        return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
      };

      /**
       * Is valid parameter for Swal.update() method
       *
       * @param {string} paramName
       * @returns {boolean}
       */
      const isUpdatableParameter = paramName => {
        return updatableParams.indexOf(paramName) !== -1;
      };

      /**
       * Is deprecated parameter
       *
       * @param {string} paramName
       * @returns {string | undefined}
       */
      const isDeprecatedParameter = paramName => {
        return deprecatedParams[paramName];
      };

      /**
       * @param {string} param
       */
      const checkIfParamIsValid = param => {
        if (!isValidParameter(param)) {
          warn(`Unknown parameter "${param}"`);
        }
      };

      /**
       * @param {string} param
       */
      const checkIfToastParamIsValid = param => {
        if (toastIncompatibleParams.includes(param)) {
          warn(`The parameter "${param}" is incompatible with toasts`);
        }
      };

      /**
       * @param {string} param
       */
      const checkIfParamIsDeprecated = param => {
        if (isDeprecatedParameter(param)) {
          warnAboutDeprecation(param, isDeprecatedParameter(param));
        }
      };

      /**
       * Show relevant warnings for given params
       *
       * @param {SweetAlertOptions} params
       */
      const showWarningsForParams = params => {
        if (params.backdrop === false && params.allowOutsideClick) {
          warn('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
        }
        for (const param in params) {
          checkIfParamIsValid(param);
          if (params.toast) {
            checkIfToastParamIsValid(param);
          }
          checkIfParamIsDeprecated(param);
        }
      };

      /**
       * Updates popup parameters.
       */
      function update(params) {
        const popup = getPopup();
        const innerParams = privateProps.innerParams.get(this);
        if (!popup || hasClass(popup, innerParams.hideClass.popup)) {
          return warn(`You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.`);
        }
        const validUpdatableParams = filterValidParams(params);
        const updatedParams = Object.assign({}, innerParams, validUpdatableParams);
        render(this, updatedParams);
        privateProps.innerParams.set(this, updatedParams);
        Object.defineProperties(this, {
          params: {
            value: Object.assign({}, this.params, params),
            writable: false,
            enumerable: true
          }
        });
      }
      const filterValidParams = params => {
        const validUpdatableParams = {};
        Object.keys(params).forEach(param => {
          if (isUpdatableParameter(param)) {
            validUpdatableParams[param] = params[param];
          } else {
            warn(`Invalid parameter to update: ${param}`);
          }
        });
        return validUpdatableParams;
      };

      function _destroy() {
        const domCache = privateProps.domCache.get(this);
        const innerParams = privateProps.innerParams.get(this);
        if (!innerParams) {
          disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335
          return; // This instance has already been destroyed
        }

        // Check if there is another Swal closing
        if (domCache.popup && globalState.swalCloseEventFinishedCallback) {
          globalState.swalCloseEventFinishedCallback();
          delete globalState.swalCloseEventFinishedCallback;
        }
        if (typeof innerParams.didDestroy === 'function') {
          innerParams.didDestroy();
        }
        disposeSwal(this);
      }

      /**
       * @param {SweetAlert2} instance
       */
      const disposeSwal = instance => {
        disposeWeakMaps(instance);
        // Unset this.params so GC will dispose it (#1569)
        // @ts-ignore
        delete instance.params;
        // Unset globalState props so GC will dispose globalState (#1569)
        delete globalState.keydownHandler;
        delete globalState.keydownTarget;
        // Unset currentInstance
        delete globalState.currentInstance;
      };

      /**
       * @param {SweetAlert2} instance
       */
      const disposeWeakMaps = instance => {
        // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335
        // @ts-ignore
        if (instance.isAwaitingPromise()) {
          unsetWeakMaps(privateProps, instance);
          privateProps.awaitingPromise.set(instance, true);
        } else {
          unsetWeakMaps(privateMethods, instance);
          unsetWeakMaps(privateProps, instance);
        }
      };

      /**
       * @param {object} obj
       * @param {SweetAlert2} instance
       */
      const unsetWeakMaps = (obj, instance) => {
        for (const i in obj) {
          obj[i].delete(instance);
        }
      };

      var instanceMethods = /*#__PURE__*/Object.freeze({
        __proto__: null,
        hideLoading: hideLoading,
        disableLoading: hideLoading,
        getInput: getInput,
        close: close,
        isAwaitingPromise: isAwaitingPromise,
        rejectPromise: rejectPromise,
        handleAwaitingPromise: handleAwaitingPromise,
        closePopup: close,
        closeModal: close,
        closeToast: close,
        enableButtons: enableButtons,
        disableButtons: disableButtons,
        enableInput: enableInput,
        disableInput: disableInput,
        showValidationMessage: showValidationMessage,
        resetValidationMessage: resetValidationMessage,
        getProgressSteps: getProgressSteps,
        update: update,
        _destroy: _destroy
      });

      /**
       * Shows loader (spinner), this is useful with AJAX requests.
       * By default the loader be shown instead of the "Confirm" button.
       */
      const showLoading = buttonToReplace => {
        let popup = getPopup();
        if (!popup) {
          new Swal(); // eslint-disable-line no-new
        }

        popup = getPopup();
        const loader = getLoader();
        if (isToast()) {
          hide(getIcon());
        } else {
          replaceButton(popup, buttonToReplace);
        }
        show(loader);
        popup.setAttribute('data-loading', 'true');
        popup.setAttribute('aria-busy', 'true');
        popup.focus();
      };
      const replaceButton = (popup, buttonToReplace) => {
        const actions = getActions();
        const loader = getLoader();
        if (!buttonToReplace && isVisible$1(getConfirmButton())) {
          buttonToReplace = getConfirmButton();
        }
        show(actions);
        if (buttonToReplace) {
          hide(buttonToReplace);
          loader.setAttribute('data-button-to-replace', buttonToReplace.className);
        }
        loader.parentNode.insertBefore(loader, buttonToReplace);
        addClass([popup, actions], swalClasses.loading);
      };

      /**
       * @typedef { string | number | boolean } InputValue
       */

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const handleInputOptionsAndValue = (instance, params) => {
        if (params.input === 'select' || params.input === 'radio') {
          handleInputOptions(instance, params);
        } else if (['text', 'email', 'number', 'tel', 'textarea'].includes(params.input) && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {
          showLoading(getConfirmButton());
          handleInputValue(instance, params);
        }
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} innerParams
       * @returns {string | number | File | FileList | null}
       */
      const getInputValue = (instance, innerParams) => {
        const input = instance.getInput();
        if (!input) {
          return null;
        }
        switch (innerParams.input) {
          case 'checkbox':
            return getCheckboxValue(input);
          case 'radio':
            return getRadioValue(input);
          case 'file':
            return getFileValue(input);
          default:
            return innerParams.inputAutoTrim ? input.value.trim() : input.value;
        }
      };

      /**
       * @param {HTMLInputElement} input
       * @returns {number}
       */
      const getCheckboxValue = input => input.checked ? 1 : 0;

      /**
       * @param {HTMLInputElement} input
       * @returns {string | null}
       */
      const getRadioValue = input => input.checked ? input.value : null;

      /**
       * @param {HTMLInputElement} input
       * @returns {FileList | File | null}
       */
      const getFileValue = input => input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const handleInputOptions = (instance, params) => {
        const popup = getPopup();
        /**
         * @param {Record<string, any>} inputOptions
         */
        const processInputOptions = inputOptions => {
          populateInputOptions[params.input](popup, formatInputOptions(inputOptions), params);
        };
        if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {
          showLoading(getConfirmButton());
          asPromise(params.inputOptions).then(inputOptions => {
            instance.hideLoading();
            processInputOptions(inputOptions);
          });
        } else if (typeof params.inputOptions === 'object') {
          processInputOptions(params.inputOptions);
        } else {
          error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof params.inputOptions}`);
        }
      };

      /**
       * @param {SweetAlert2} instance
       * @param {SweetAlertOptions} params
       */
      const handleInputValue = (instance, params) => {
        const input = instance.getInput();
        hide(input);
        asPromise(params.inputValue).then(inputValue => {
          input.value = params.input === 'number' ? `${parseFloat(inputValue) || 0}` : `${inputValue}`;
          show(input);
          input.focus();
          instance.hideLoading();
        }).catch(err => {
          error(`Error in inputValue promise: ${err}`);
          input.value = '';
          show(input);
          input.focus();
          instance.hideLoading();
        });
      };
      const populateInputOptions = {
        /**
         * @param {HTMLElement} popup
         * @param {Record<string, any>} inputOptions
         * @param {SweetAlertOptions} params
         */
        select: (popup, inputOptions, params) => {
          const select = getDirectChildByClass(popup, swalClasses.select);
          /**
           * @param {HTMLElement} parent
           * @param {string} optionLabel
           * @param {string} optionValue
           */
          const renderOption = (parent, optionLabel, optionValue) => {
            const option = document.createElement('option');
            option.value = optionValue;
            setInnerHtml(option, optionLabel);
            option.selected = isSelected(optionValue, params.inputValue);
            parent.appendChild(option);
          };
          inputOptions.forEach(inputOption => {
            const optionValue = inputOption[0];
            const optionLabel = inputOption[1];
            // <optgroup> spec:
            // https://www.w3.org/TR/html401/interact/forms.html#h-17.6
            // "...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)..."
            // check whether this is a <optgroup>
            if (Array.isArray(optionLabel)) {
              // if it is an array, then it is an <optgroup>
              const optgroup = document.createElement('optgroup');
              optgroup.label = optionValue;
              optgroup.disabled = false; // not configurable for now
              select.appendChild(optgroup);
              optionLabel.forEach(o => renderOption(optgroup, o[1], o[0]));
            } else {
              // case of <option>
              renderOption(select, optionLabel, optionValue);
            }
          });
          select.focus();
        },
        /**
         * @param {HTMLElement} popup
         * @param {Record<string, any>} inputOptions
         * @param {SweetAlertOptions} params
         */
        radio: (popup, inputOptions, params) => {
          const radio = getDirectChildByClass(popup, swalClasses.radio);
          inputOptions.forEach(inputOption => {
            const radioValue = inputOption[0];
            const radioLabel = inputOption[1];
            const radioInput = document.createElement('input');
            const radioLabelElement = document.createElement('label');
            radioInput.type = 'radio';
            radioInput.name = swalClasses.radio;
            radioInput.value = radioValue;
            if (isSelected(radioValue, params.inputValue)) {
              radioInput.checked = true;
            }
            const label = document.createElement('span');
            setInnerHtml(label, radioLabel);
            label.className = swalClasses.label;
            radioLabelElement.appendChild(radioInput);
            radioLabelElement.appendChild(label);
            radio.appendChild(radioLabelElement);
          });
          const radios = radio.querySelectorAll('input');
          if (radios.length) {
            radios[0].focus();
          }
        }
      };

      /**
       * Converts `inputOptions` into an array of `[value, label]`s
       *
       * @param {Record<string, any>} inputOptions
       * @returns {Array<Array<string>>}
       */
      const formatInputOptions = inputOptions => {
        const result = [];
        if (typeof Map !== 'undefined' && inputOptions instanceof Map) {
          inputOptions.forEach((value, key) => {
            let valueFormatted = value;
            if (typeof valueFormatted === 'object') {
              // case of <optgroup>
              valueFormatted = formatInputOptions(valueFormatted);
            }
            result.push([key, valueFormatted]);
          });
        } else {
          Object.keys(inputOptions).forEach(key => {
            let valueFormatted = inputOptions[key];
            if (typeof valueFormatted === 'object') {
              // case of <optgroup>
              valueFormatted = formatInputOptions(valueFormatted);
            }
            result.push([key, valueFormatted]);
          });
        }
        return result;
      };

      /**
       * @param {string} optionValue
       * @param {InputValue | Promise<InputValue> | { toPromise: () => InputValue }} inputValue
       * @returns {boolean}
       */
      const isSelected = (optionValue, inputValue) => {
        return inputValue && inputValue.toString() === optionValue.toString();
      };

      /**
       * @param {SweetAlert2} instance
       */
      const handleConfirmButtonClick = instance => {
        const innerParams = privateProps.innerParams.get(instance);
        instance.disableButtons();
        if (innerParams.input) {
          handleConfirmOrDenyWithInput(instance, 'confirm');
        } else {
          confirm(instance, true);
        }
      };

      /**
       * @param {SweetAlert2} instance
       */
      const handleDenyButtonClick = instance => {
        const innerParams = privateProps.innerParams.get(instance);
        instance.disableButtons();
        if (innerParams.returnInputValueOnDeny) {
          handleConfirmOrDenyWithInput(instance, 'deny');
        } else {
          deny(instance, false);
        }
      };

      /**
       * @param {SweetAlert2} instance
       * @param {Function} dismissWith
       */
      const handleCancelButtonClick = (instance, dismissWith) => {
        instance.disableButtons();
        dismissWith(DismissReason.cancel);
      };

      /**
       * @param {SweetAlert2} instance
       * @param {'confirm' | 'deny'} type
       */
      const handleConfirmOrDenyWithInput = (instance, type) => {
        const innerParams = privateProps.innerParams.get(instance);
        if (!innerParams.input) {
          error(`The "input" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`);
          return;
        }
        const inputValue = getInputValue(instance, innerParams);
        if (innerParams.inputValidator) {
          handleInputValidator(instance, inputValue, type);
        } else if (!instance.getInput().checkValidity()) {
          instance.enableButtons();
          instance.showValidationMessage(innerParams.validationMessage);
        } else if (type === 'deny') {
          deny(instance, inputValue);
        } else {
          confirm(instance, inputValue);
        }
      };

      /**
       * @param {SweetAlert2} instance
       * @param {string | number | File | FileList | null} inputValue
       * @param {'confirm' | 'deny'} type
       */
      const handleInputValidator = (instance, inputValue, type) => {
        const innerParams = privateProps.innerParams.get(instance);
        instance.disableInput();
        const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));
        validationPromise.then(validationMessage => {
          instance.enableButtons();
          instance.enableInput();
          if (validationMessage) {
            instance.showValidationMessage(validationMessage);
          } else if (type === 'deny') {
            deny(instance, inputValue);
          } else {
            confirm(instance, inputValue);
          }
        });
      };

      /**
       * @param {SweetAlert2} instance
       * @param {any} value
       */
      const deny = (instance, value) => {
        const innerParams = privateProps.innerParams.get(instance || undefined);
        if (innerParams.showLoaderOnDeny) {
          showLoading(getDenyButton());
        }
        if (innerParams.preDeny) {
          privateProps.awaitingPromise.set(instance || undefined, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received
          const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));
          preDenyPromise.then(preDenyValue => {
            if (preDenyValue === false) {
              instance.hideLoading();
              handleAwaitingPromise(instance);
            } else {
              instance.close({
                isDenied: true,
                value: typeof preDenyValue === 'undefined' ? value : preDenyValue
              });
            }
          }).catch(error => rejectWith(instance || undefined, error));
        } else {
          instance.close({
            isDenied: true,
            value
          });
        }
      };

      /**
       * @param {SweetAlert2} instance
       * @param {any} value
       */
      const succeedWith = (instance, value) => {
        instance.close({
          isConfirmed: true,
          value
        });
      };

      /**
       *
       * @param {SweetAlert2} instance
       * @param {string} error
       */
      const rejectWith = (instance, error) => {
        // @ts-ignore
        instance.rejectPromise(error);
      };

      /**
       *
       * @param {SweetAlert2} instance
       * @param {any} value
       */
      const confirm = (instance, value) => {
        const innerParams = privateProps.innerParams.get(instance || undefined);
        if (innerParams.showLoaderOnConfirm) {
          showLoading();
        }
        if (innerParams.preConfirm) {
          instance.resetValidationMessage();
          privateProps.awaitingPromise.set(instance || undefined, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received
          const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));
          preConfirmPromise.then(preConfirmValue => {
            if (isVisible$1(getValidationMessage()) || preConfirmValue === false) {
              instance.hideLoading();
              handleAwaitingPromise(instance);
            } else {
              succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);
            }
          }).catch(error => rejectWith(instance || undefined, error));
        } else {
          succeedWith(instance, value);
        }
      };

      const handlePopupClick = (instance, domCache, dismissWith) => {
        const innerParams = privateProps.innerParams.get(instance);
        if (innerParams.toast) {
          handleToastClick(instance, domCache, dismissWith);
        } else {
          // Ignore click events that had mousedown on the popup but mouseup on the container
          // This can happen when the user drags a slider
          handleModalMousedown(domCache);

          // Ignore click events that had mousedown on the container but mouseup on the popup
          handleContainerMousedown(domCache);
          handleModalClick(instance, domCache, dismissWith);
        }
      };
      const handleToastClick = (instance, domCache, dismissWith) => {
        // Closing toast by internal click
        domCache.popup.onclick = () => {
          const innerParams = privateProps.innerParams.get(instance);
          if (innerParams && (isAnyButtonShown(innerParams) || innerParams.timer || innerParams.input)) {
            return;
          }
          dismissWith(DismissReason.close);
        };
      };

      /**
       * @param {*} innerParams
       * @returns {boolean}
       */
      const isAnyButtonShown = innerParams => {
        return innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton;
      };
      let ignoreOutsideClick = false;
      const handleModalMousedown = domCache => {
        domCache.popup.onmousedown = () => {
          domCache.container.onmouseup = function (e) {
            domCache.container.onmouseup = undefined;
            // We only check if the mouseup target is the container because usually it doesn't
            // have any other direct children aside of the popup
            if (e.target === domCache.container) {
              ignoreOutsideClick = true;
            }
          };
        };
      };
      const handleContainerMousedown = domCache => {
        domCache.container.onmousedown = () => {
          domCache.popup.onmouseup = function (e) {
            domCache.popup.onmouseup = undefined;
            // We also need to check if the mouseup target is a child of the popup
            if (e.target === domCache.popup || domCache.popup.contains(e.target)) {
              ignoreOutsideClick = true;
            }
          };
        };
      };
      const handleModalClick = (instance, domCache, dismissWith) => {
        domCache.container.onclick = e => {
          const innerParams = privateProps.innerParams.get(instance);
          if (ignoreOutsideClick) {
            ignoreOutsideClick = false;
            return;
          }
          if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {
            dismissWith(DismissReason.backdrop);
          }
        };
      };

      const isJqueryElement = elem => typeof elem === 'object' && elem.jquery;
      const isElement = elem => elem instanceof Element || isJqueryElement(elem);
      const argsToParams = args => {
        const params = {};
        if (typeof args[0] === 'object' && !isElement(args[0])) {
          Object.assign(params, args[0]);
        } else {
          ['title', 'html', 'icon'].forEach((name, index) => {
            const arg = args[index];
            if (typeof arg === 'string' || isElement(arg)) {
              params[name] = arg;
            } else if (arg !== undefined) {
              error(`Unexpected type of ${name}! Expected "string" or "Element", got ${typeof arg}`);
            }
          });
        }
        return params;
      };

      function fire() {
        const Swal = this; // eslint-disable-line @typescript-eslint/no-this-alias
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return new Swal(...args);
      }

      /**
       * Returns an extended version of `Swal` containing `params` as defaults.
       * Useful for reusing Swal configuration.
       *
       * For example:
       *
       * Before:
       * const textPromptOptions = { input: 'text', showCancelButton: true }
       * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })
       * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })
       *
       * After:
       * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })
       * const {value: firstName} = await TextPrompt('What is your first name?')
       * const {value: lastName} = await TextPrompt('What is your last name?')
       *
       * @param mixinParams
       */
      function mixin(mixinParams) {
        class MixinSwal extends this {
          _main(params, priorityMixinParams) {
            return super._main(params, Object.assign({}, mixinParams, priorityMixinParams));
          }
        }
        return MixinSwal;
      }

      /**
       * If `timer` parameter is set, returns number of milliseconds of timer remained.
       * Otherwise, returns undefined.
       *
       * @returns {number | undefined}
       */
      const getTimerLeft = () => {
        return globalState.timeout && globalState.timeout.getTimerLeft();
      };

      /**
       * Stop timer. Returns number of milliseconds of timer remained.
       * If `timer` parameter isn't set, returns undefined.
       *
       * @returns {number | undefined}
       */
      const stopTimer = () => {
        if (globalState.timeout) {
          stopTimerProgressBar();
          return globalState.timeout.stop();
        }
      };

      /**
       * Resume timer. Returns number of milliseconds of timer remained.
       * If `timer` parameter isn't set, returns undefined.
       *
       * @returns {number | undefined}
       */
      const resumeTimer = () => {
        if (globalState.timeout) {
          const remaining = globalState.timeout.start();
          animateTimerProgressBar(remaining);
          return remaining;
        }
      };

      /**
       * Resume timer. Returns number of milliseconds of timer remained.
       * If `timer` parameter isn't set, returns undefined.
       *
       * @returns {number | undefined}
       */
      const toggleTimer = () => {
        const timer = globalState.timeout;
        return timer && (timer.running ? stopTimer() : resumeTimer());
      };

      /**
       * Increase timer. Returns number of milliseconds of an updated timer.
       * If `timer` parameter isn't set, returns undefined.
       *
       * @param {number} n
       * @returns {number | undefined}
       */
      const increaseTimer = n => {
        if (globalState.timeout) {
          const remaining = globalState.timeout.increase(n);
          animateTimerProgressBar(remaining, true);
          return remaining;
        }
      };

      /**
       * Check if timer is running. Returns true if timer is running
       * or false if timer is paused or stopped.
       * If `timer` parameter isn't set, returns undefined
       *
       * @returns {boolean}
       */
      const isTimerRunning = () => {
        return globalState.timeout && globalState.timeout.isRunning();
      };

      let bodyClickListenerAdded = false;
      const clickHandlers = {};
      function bindClickHandler() {
        let attr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data-swal-template';
        clickHandlers[attr] = this;
        if (!bodyClickListenerAdded) {
          document.body.addEventListener('click', bodyClickListener);
          bodyClickListenerAdded = true;
        }
      }
      const bodyClickListener = event => {
        for (let el = event.target; el && el !== document; el = el.parentNode) {
          for (const attr in clickHandlers) {
            const template = el.getAttribute(attr);
            if (template) {
              clickHandlers[attr].fire({
                template
              });
              return;
            }
          }
        }
      };

      var staticMethods = /*#__PURE__*/Object.freeze({
        __proto__: null,
        isValidParameter: isValidParameter,
        isUpdatableParameter: isUpdatableParameter,
        isDeprecatedParameter: isDeprecatedParameter,
        argsToParams: argsToParams,
        getContainer: getContainer,
        getPopup: getPopup,
        getTitle: getTitle,
        getHtmlContainer: getHtmlContainer,
        getImage: getImage,
        getIcon: getIcon,
        getIconContent: getIconContent,
        getInputLabel: getInputLabel,
        getCloseButton: getCloseButton,
        getActions: getActions,
        getConfirmButton: getConfirmButton,
        getDenyButton: getDenyButton,
        getCancelButton: getCancelButton,
        getLoader: getLoader,
        getFooter: getFooter,
        getTimerProgressBar: getTimerProgressBar,
        getFocusableElements: getFocusableElements,
        getValidationMessage: getValidationMessage,
        isLoading: isLoading,
        isVisible: isVisible,
        clickConfirm: clickConfirm,
        clickDeny: clickDeny,
        clickCancel: clickCancel,
        fire: fire,
        mixin: mixin,
        showLoading: showLoading,
        enableLoading: showLoading,
        getTimerLeft: getTimerLeft,
        stopTimer: stopTimer,
        resumeTimer: resumeTimer,
        toggleTimer: toggleTimer,
        increaseTimer: increaseTimer,
        isTimerRunning: isTimerRunning,
        bindClickHandler: bindClickHandler
      });

      class Timer {
        /**
         * @param {Function} callback
         * @param {number} delay
         */
        constructor(callback, delay) {
          this.callback = callback;
          this.remaining = delay;
          this.running = false;
          this.start();
        }
        start() {
          if (!this.running) {
            this.running = true;
            this.started = new Date();
            this.id = setTimeout(this.callback, this.remaining);
          }
          return this.remaining;
        }
        stop() {
          if (this.running) {
            this.running = false;
            clearTimeout(this.id);
            this.remaining -= new Date().getTime() - this.started.getTime();
          }
          return this.remaining;
        }
        increase(n) {
          const running = this.running;
          if (running) {
            this.stop();
          }
          this.remaining += n;
          if (running) {
            this.start();
          }
          return this.remaining;
        }
        getTimerLeft() {
          if (this.running) {
            this.stop();
            this.start();
          }
          return this.remaining;
        }
        isRunning() {
          return this.running;
        }
      }

      const swalStringParams = ['swal-title', 'swal-html', 'swal-footer'];

      /**
       * @param {SweetAlertOptions} params
       * @returns {SweetAlertOptions}
       */
      const getTemplateParams = params => {
        /** @type {HTMLTemplateElement} */
        const template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template;
        if (!template) {
          return {};
        }
        /** @type {DocumentFragment} */
        const templateContent = template.content;
        showWarningsForElements(templateContent);
        const result = Object.assign(getSwalParams(templateContent), getSwalFunctionParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));
        return result;
      };

      /**
       * @param {DocumentFragment} templateContent
       * @returns {SweetAlertOptions}
       */
      const getSwalParams = templateContent => {
        const result = {};
        /** @type {HTMLElement[]} */
        const swalParams = Array.from(templateContent.querySelectorAll('swal-param'));
        swalParams.forEach(param => {
          showWarningsForAttributes(param, ['name', 'value']);
          const paramName = param.getAttribute('name');
          const value = param.getAttribute('value');
          if (typeof defaultParams[paramName] === 'boolean') {
            result[paramName] = value !== 'false';
          } else if (typeof defaultParams[paramName] === 'object') {
            result[paramName] = JSON.parse(value);
          } else {
            result[paramName] = value;
          }
        });
        return result;
      };

      /**
       * @param {DocumentFragment} templateContent
       * @returns {SweetAlertOptions}
       */
      const getSwalFunctionParams = templateContent => {
        const result = {};
        /** @type {HTMLElement[]} */
        const swalFunctions = Array.from(templateContent.querySelectorAll('swal-function-param'));
        swalFunctions.forEach(param => {
          const paramName = param.getAttribute('name');
          const value = param.getAttribute('value');
          result[paramName] = new Function(`return ${value}`)();
        });
        return result;
      };

      /**
       * @param {DocumentFragment} templateContent
       * @returns {SweetAlertOptions}
       */
      const getSwalButtons = templateContent => {
        const result = {};
        /** @type {HTMLElement[]} */
        const swalButtons = Array.from(templateContent.querySelectorAll('swal-button'));
        swalButtons.forEach(button => {
          showWarningsForAttributes(button, ['type', 'color', 'aria-label']);
          const type = button.getAttribute('type');
          result[`${type}ButtonText`] = button.innerHTML;
          result[`show${capitalizeFirstLetter(type)}Button`] = true;
          if (button.hasAttribute('color')) {
            result[`${type}ButtonColor`] = button.getAttribute('color');
          }
          if (button.hasAttribute('aria-label')) {
            result[`${type}ButtonAriaLabel`] = button.getAttribute('aria-label');
          }
        });
        return result;
      };

      /**
       * @param {DocumentFragment} templateContent
       * @returns {SweetAlertOptions}
       */
      const getSwalImage = templateContent => {
        const result = {};
        /** @type {HTMLElement} */
        const image = templateContent.querySelector('swal-image');
        if (image) {
          showWarningsForAttributes(image, ['src', 'width', 'height', 'alt']);
          if (image.hasAttribute('src')) {
            result.imageUrl = image.getAttribute('src');
          }
          if (image.hasAttribute('width')) {
            result.imageWidth = image.getAttribute('width');
          }
          if (image.hasAttribute('height')) {
            result.imageHeight = image.getAttribute('height');
          }
          if (image.hasAttribute('alt')) {
            result.imageAlt = image.getAttribute('alt');
          }
        }
        return result;
      };

      /**
       * @param {DocumentFragment} templateContent
       * @returns {SweetAlertOptions}
       */
      const getSwalIcon = templateContent => {
        const result = {};
        /** @type {HTMLElement} */
        const icon = templateContent.querySelector('swal-icon');
        if (icon) {
          showWarningsForAttributes(icon, ['type', 'color']);
          if (icon.hasAttribute('type')) {
            /** @type {SweetAlertIcon} */
            // @ts-ignore
            result.icon = icon.getAttribute('type');
          }
          if (icon.hasAttribute('color')) {
            result.iconColor = icon.getAttribute('color');
          }
          result.iconHtml = icon.innerHTML;
        }
        return result;
      };

      /**
       * @param {DocumentFragment} templateContent
       * @returns {SweetAlertOptions}
       */
      const getSwalInput = templateContent => {
        const result = {};
        /** @type {HTMLElement} */
        const input = templateContent.querySelector('swal-input');
        if (input) {
          showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value']);
          /** @type {SweetAlertInput} */
          // @ts-ignore
          result.input = input.getAttribute('type') || 'text';
          if (input.hasAttribute('label')) {
            result.inputLabel = input.getAttribute('label');
          }
          if (input.hasAttribute('placeholder')) {
            result.inputPlaceholder = input.getAttribute('placeholder');
          }
          if (input.hasAttribute('value')) {
            result.inputValue = input.getAttribute('value');
          }
        }
        /** @type {HTMLElement[]} */
        const inputOptions = Array.from(templateContent.querySelectorAll('swal-input-option'));
        if (inputOptions.length) {
          result.inputOptions = {};
          inputOptions.forEach(option => {
            showWarningsForAttributes(option, ['value']);
            const optionValue = option.getAttribute('value');
            const optionName = option.innerHTML;
            result.inputOptions[optionValue] = optionName;
          });
        }
        return result;
      };

      /**
       * @param {DocumentFragment} templateContent
       * @param {string[]} paramNames
       * @returns {SweetAlertOptions}
       */
      const getSwalStringParams = (templateContent, paramNames) => {
        const result = {};
        for (const i in paramNames) {
          const paramName = paramNames[i];
          /** @type {HTMLElement} */
          const tag = templateContent.querySelector(paramName);
          if (tag) {
            showWarningsForAttributes(tag, []);
            result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim();
          }
        }
        return result;
      };

      /**
       * @param {DocumentFragment} templateContent
       */
      const showWarningsForElements = templateContent => {
        const allowedElements = swalStringParams.concat(['swal-param', 'swal-function-param', 'swal-button', 'swal-image', 'swal-icon', 'swal-input', 'swal-input-option']);
        Array.from(templateContent.children).forEach(el => {
          const tagName = el.tagName.toLowerCase();
          if (!allowedElements.includes(tagName)) {
            warn(`Unrecognized element <${tagName}>`);
          }
        });
      };

      /**
       * @param {HTMLElement} el
       * @param {string[]} allowedAttributes
       */
      const showWarningsForAttributes = (el, allowedAttributes) => {
        Array.from(el.attributes).forEach(attribute => {
          if (allowedAttributes.indexOf(attribute.name) === -1) {
            warn([`Unrecognized attribute "${attribute.name}" on <${el.tagName.toLowerCase()}>.`, `${allowedAttributes.length ? `Allowed attributes are: ${allowedAttributes.join(', ')}` : 'To set the value, use HTML within the element.'}`]);
          }
        });
      };

      const SHOW_CLASS_TIMEOUT = 10;

      /**
       * Open popup, add necessary classes and styles, fix scrollbar
       *
       * @param {SweetAlertOptions} params
       */
      const openPopup = params => {
        const container = getContainer();
        const popup = getPopup();
        if (typeof params.willOpen === 'function') {
          params.willOpen(popup);
        }
        const bodyStyles = window.getComputedStyle(document.body);
        const initialBodyOverflow = bodyStyles.overflowY;
        addClasses(container, popup, params);

        // scrolling is 'hidden' until animation is done, after that 'auto'
        setTimeout(() => {
          setScrollingVisibility(container, popup);
        }, SHOW_CLASS_TIMEOUT);
        if (isModal()) {
          fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);
          setAriaHidden();
        }
        if (!isToast() && !globalState.previousActiveElement) {
          globalState.previousActiveElement = document.activeElement;
        }
        if (typeof params.didOpen === 'function') {
          setTimeout(() => params.didOpen(popup));
        }
        removeClass(container, swalClasses['no-transition']);
      };

      /**
       * @param {AnimationEvent} event
       */
      const swalOpenAnimationFinished = event => {
        const popup = getPopup();
        if (event.target !== popup) {
          return;
        }
        const container = getContainer();
        popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
        container.style.overflowY = 'auto';
      };

      /**
       * @param {HTMLElement} container
       * @param {HTMLElement} popup
       */
      const setScrollingVisibility = (container, popup) => {
        if (animationEndEvent && hasCssAnimation(popup)) {
          container.style.overflowY = 'hidden';
          popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);
        } else {
          container.style.overflowY = 'auto';
        }
      };

      /**
       * @param {HTMLElement} container
       * @param {boolean} scrollbarPadding
       * @param {string} initialBodyOverflow
       */
      const fixScrollContainer = (container, scrollbarPadding, initialBodyOverflow) => {
        iOSfix();
        if (scrollbarPadding && initialBodyOverflow !== 'hidden') {
          fixScrollbar();
        }

        // sweetalert2/issues/1247
        setTimeout(() => {
          container.scrollTop = 0;
        });
      };

      /**
       * @param {HTMLElement} container
       * @param {HTMLElement} popup
       * @param {SweetAlertOptions} params
       */
      const addClasses = (container, popup, params) => {
        addClass(container, params.showClass.backdrop);
        // this workaround with opacity is needed for https://github.com/sweetalert2/sweetalert2/issues/2059
        popup.style.setProperty('opacity', '0', 'important');
        show(popup, 'grid');
        setTimeout(() => {
          // Animate popup right after showing it
          addClass(popup, params.showClass.popup);
          // and remove the opacity workaround
          popup.style.removeProperty('opacity');
        }, SHOW_CLASS_TIMEOUT); // 10ms in order to fix #2062

        addClass([document.documentElement, document.body], swalClasses.shown);
        if (params.heightAuto && params.backdrop && !params.toast) {
          addClass([document.documentElement, document.body], swalClasses['height-auto']);
        }
      };

      var defaultInputValidators = {
        /**
         * @param {string} string
         * @param {string} validationMessage
         * @returns {Promise<void | string>}
         */
        email: (string, validationMessage) => {
          return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');
        },
        /**
         * @param {string} string
         * @param {string} validationMessage
         * @returns {Promise<void | string>}
         */
        url: (string, validationMessage) => {
          // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013
          return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');
        }
      };

      /**
       * @param {SweetAlertOptions} params
       */
      function setDefaultInputValidators(params) {
        // Use default `inputValidator` for supported input types if not provided
        if (!params.inputValidator) {
          Object.keys(defaultInputValidators).forEach(key => {
            if (params.input === key) {
              params.inputValidator = defaultInputValidators[key];
            }
          });
        }
      }

      /**
       * @param {SweetAlertOptions} params
       */
      function validateCustomTargetElement(params) {
        // Determine if the custom target element is valid
        if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {
          warn('Target parameter is not valid, defaulting to "body"');
          params.target = 'body';
        }
      }

      /**
       * Set type, text and actions on popup
       *
       * @param {SweetAlertOptions} params
       */
      function setParameters(params) {
        setDefaultInputValidators(params);

        // showLoaderOnConfirm && preConfirm
        if (params.showLoaderOnConfirm && !params.preConfirm) {
          warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\n' + 'https://sweetalert2.github.io/#ajax-request');
        }
        validateCustomTargetElement(params);

        // Replace newlines with <br> in title
        if (typeof params.title === 'string') {
          params.title = params.title.split('\n').join('<br />');
        }
        init(params);
      }

      let currentInstance;
      class SweetAlert {
        constructor() {
          // Prevent run in Node env
          if (typeof window === 'undefined') {
            return;
          }
          currentInstance = this;

          // @ts-ignore
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          const outerParams = Object.freeze(this.constructor.argsToParams(args));
          Object.defineProperties(this, {
            params: {
              value: outerParams,
              writable: false,
              enumerable: true,
              configurable: true
            }
          });

          // @ts-ignore
          const promise = currentInstance._main(currentInstance.params);
          privateProps.promise.set(this, promise);
        }
        _main(userParams) {
          let mixinParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          showWarningsForParams(Object.assign({}, mixinParams, userParams));
          if (globalState.currentInstance) {
            // @ts-ignore
            globalState.currentInstance._destroy();
            if (isModal()) {
              unsetAriaHidden();
            }
          }
          globalState.currentInstance = currentInstance;
          const innerParams = prepareParams(userParams, mixinParams);
          setParameters(innerParams);
          Object.freeze(innerParams);

          // clear the previous timer
          if (globalState.timeout) {
            globalState.timeout.stop();
            delete globalState.timeout;
          }

          // clear the restore focus timeout
          clearTimeout(globalState.restoreFocusTimeout);
          const domCache = populateDomCache(currentInstance);
          render(currentInstance, innerParams);
          privateProps.innerParams.set(currentInstance, innerParams);
          return swalPromise(currentInstance, domCache, innerParams);
        }

        // `catch` cannot be the name of a module export, so we define our thenable methods here instead
        then(onFulfilled) {
          const promise = privateProps.promise.get(this);
          return promise.then(onFulfilled);
        }
        finally(onFinally) {
          const promise = privateProps.promise.get(this);
          return promise.finally(onFinally);
        }
      }

      /**
       * @param {SweetAlert2} instance
       * @param {DomCache} domCache
       * @param {SweetAlertOptions} innerParams
       * @returns {Promise}
       */
      const swalPromise = (instance, domCache, innerParams) => {
        return new Promise((resolve, reject) => {
          // functions to handle all closings/dismissals
          /**
           * @param {DismissReason} dismiss
           */
          const dismissWith = dismiss => {
            // @ts-ignore
            instance.close({
              isDismissed: true,
              dismiss
            });
          };
          privateMethods.swalPromiseResolve.set(instance, resolve);
          privateMethods.swalPromiseReject.set(instance, reject);
          domCache.confirmButton.onclick = () => {
            handleConfirmButtonClick(instance);
          };
          domCache.denyButton.onclick = () => {
            handleDenyButtonClick(instance);
          };
          domCache.cancelButton.onclick = () => {
            handleCancelButtonClick(instance, dismissWith);
          };
          domCache.closeButton.onclick = () => {
            // @ts-ignore
            dismissWith(DismissReason.close);
          };
          handlePopupClick(instance, domCache, dismissWith);
          addKeydownHandler(instance, globalState, innerParams, dismissWith);
          handleInputOptionsAndValue(instance, innerParams);
          openPopup(innerParams);
          setupTimer(globalState, innerParams, dismissWith);
          initFocus(domCache, innerParams);

          // Scroll container to top on open (#1247, #1946)
          setTimeout(() => {
            domCache.container.scrollTop = 0;
          });
        });
      };

      /**
       * @param {SweetAlertOptions} userParams
       * @param {SweetAlertOptions} mixinParams
       * @returns {SweetAlertOptions}
       */
      const prepareParams = (userParams, mixinParams) => {
        const templateParams = getTemplateParams(userParams);
        const params = Object.assign({}, defaultParams, mixinParams, templateParams, userParams); // precedence is described in #2131
        params.showClass = Object.assign({}, defaultParams.showClass, params.showClass);
        params.hideClass = Object.assign({}, defaultParams.hideClass, params.hideClass);
        return params;
      };

      /**
       * @param {SweetAlert2} instance
       * @returns {DomCache}
       */
      const populateDomCache = instance => {
        const domCache = {
          popup: getPopup(),
          container: getContainer(),
          actions: getActions(),
          confirmButton: getConfirmButton(),
          denyButton: getDenyButton(),
          cancelButton: getCancelButton(),
          loader: getLoader(),
          closeButton: getCloseButton(),
          validationMessage: getValidationMessage(),
          progressSteps: getProgressSteps$1()
        };
        privateProps.domCache.set(instance, domCache);
        return domCache;
      };

      /**
       * @param {GlobalState} globalState
       * @param {SweetAlertOptions} innerParams
       * @param {Function} dismissWith
       */
      const setupTimer = (globalState, innerParams, dismissWith) => {
        const timerProgressBar = getTimerProgressBar();
        hide(timerProgressBar);
        if (innerParams.timer) {
          globalState.timeout = new Timer(() => {
            dismissWith('timer');
            delete globalState.timeout;
          }, innerParams.timer);
          if (innerParams.timerProgressBar) {
            show(timerProgressBar);
            applyCustomClass(timerProgressBar, innerParams, 'timerProgressBar');
            setTimeout(() => {
              if (globalState.timeout && globalState.timeout.running) {
                // timer can be already stopped or unset at this point
                animateTimerProgressBar(innerParams.timer);
              }
            });
          }
        }
      };

      /**
       * @param {DomCache} domCache
       * @param {SweetAlertOptions} innerParams
       */
      const initFocus = (domCache, innerParams) => {
        if (innerParams.toast) {
          return;
        }
        if (!callIfFunction(innerParams.allowEnterKey)) {
          blurActiveElement();
          return;
        }
        if (!focusButton(domCache, innerParams)) {
          setFocus(innerParams, -1, 1);
        }
      };

      /**
       * @param {DomCache} domCache
       * @param {SweetAlertOptions} innerParams
       * @returns {boolean}
       */
      const focusButton = (domCache, innerParams) => {
        if (innerParams.focusDeny && isVisible$1(domCache.denyButton)) {
          domCache.denyButton.focus();
          return true;
        }
        if (innerParams.focusCancel && isVisible$1(domCache.cancelButton)) {
          domCache.cancelButton.focus();
          return true;
        }
        if (innerParams.focusConfirm && isVisible$1(domCache.confirmButton)) {
          domCache.confirmButton.focus();
          return true;
        }
        return false;
      };
      const blurActiveElement = () => {
        if (document.activeElement instanceof HTMLElement && typeof document.activeElement.blur === 'function') {
          document.activeElement.blur();
        }
      };

      // Dear russian users visiting russian sites. Let's have fun.
      if (typeof window !== 'undefined' && /^ru\b/.test(navigator.language) && location.host.match(/\.(ru|su|xn--p1ai)$/)) {
        setTimeout(() => {
          document.body.style.pointerEvents = 'none';
          const ukrainianAnthem = document.createElement('audio');
          ukrainianAnthem.src = 'https://discoveric.ru/upload/anthem/61/61-1.mp3';
          ukrainianAnthem.loop = true;
          document.body.appendChild(ukrainianAnthem);
          setTimeout(() => {
            ukrainianAnthem.play().catch(() => {
              // ignore
            });
          }, 2500);
        }, 500);
      }

      // Assign instance methods from src/instanceMethods/*.js to prototype
      Object.assign(SweetAlert.prototype, instanceMethods);

      // Assign static methods from src/staticMethods/*.js to constructor
      Object.assign(SweetAlert, staticMethods);

      // Proxy to instance methods to constructor, for now, for backwards compatibility
      Object.keys(instanceMethods).forEach(key => {
        /**
         * @param {...any} args
         * @returns {any}
         */
        SweetAlert[key] = function () {
          if (currentInstance) {
            return currentInstance[key](...arguments);
          }
        };
      });
      SweetAlert.DismissReason = DismissReason;
      SweetAlert.version = '11.6.5';

      const Swal = SweetAlert;
      // @ts-ignore
      Swal.default = Swal;

      return Swal;

    }));
    if (typeof commonjsGlobal !== 'undefined' && commonjsGlobal.Sweetalert2){commonjsGlobal.swal = commonjsGlobal.sweetAlert = commonjsGlobal.Swal = commonjsGlobal.SweetAlert = commonjsGlobal.Sweetalert2;}
    "undefined"!=typeof document&&function(e,t){var n=e.createElement("style");if(e.getElementsByTagName("head")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t;}catch(e){n.innerText=t;}}(document,".swal2-popup.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-popup.swal2-toast>*{grid-column:2}.swal2-popup.swal2-toast .swal2-title{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-loading{justify-content:center}.swal2-popup.swal2-toast .swal2-input{height:2em;margin:.5em;font-size:1em}.swal2-popup.swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-popup.swal2-toast .swal2-html-container{margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-html-container:empty{padding:0}.swal2-popup.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-popup.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-popup.swal2-toast .swal2-styled{margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{animation:swal2-toast-hide .1s forwards}.swal2-container{display:grid;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;box-sizing:border-box;grid-template-areas:\"top-start     top            top-end\" \"center-start  center         center-end\" \"bottom-start  bottom-center  bottom-end\";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:rgba(0,0,0,0) !important}.swal2-container.swal2-top-start,.swal2-container.swal2-center-start,.swal2-container.swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}.swal2-container.swal2-top,.swal2-container.swal2-center,.swal2-container.swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}.swal2-container.swal2-top-end,.swal2-container.swal2-center-end,.swal2-container.swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}.swal2-container.swal2-top-start>.swal2-popup{align-self:start}.swal2-container.swal2-top>.swal2-popup{grid-column:2;align-self:start;justify-self:center}.swal2-container.swal2-top-end>.swal2-popup,.swal2-container.swal2-top-right>.swal2-popup{grid-column:3;align-self:start;justify-self:end}.swal2-container.swal2-center-start>.swal2-popup,.swal2-container.swal2-center-left>.swal2-popup{grid-row:2;align-self:center}.swal2-container.swal2-center>.swal2-popup{grid-column:2;grid-row:2;align-self:center;justify-self:center}.swal2-container.swal2-center-end>.swal2-popup,.swal2-container.swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;align-self:center;justify-self:end}.swal2-container.swal2-bottom-start>.swal2-popup,.swal2-container.swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}.swal2-container.swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;justify-self:center;align-self:end}.swal2-container.swal2-bottom-end>.swal2-popup,.swal2-container.swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;align-self:end;justify-self:end}.swal2-container.swal2-grow-row>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}.swal2-container.swal2-grow-column>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}.swal2-container.swal2-no-transition{transition:none !important}.swal2-popup{display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:none}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-title{position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}.swal2-styled{margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}.swal2-styled.swal2-confirm:focus{box-shadow:0 0 0 3px rgba(112,102,224,.5)}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}.swal2-styled.swal2-deny:focus{box-shadow:0 0 0 3px rgba(220,55,65,.5)}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}.swal2-styled.swal2-cancel:focus{box-shadow:0 0 0 3px rgba(110,120,129,.5)}.swal2-styled.swal2-default-outline:focus{box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-styled:focus{outline:none}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:2em auto 1em}.swal2-close{z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:rgba(0,0,0,0);color:#ccc;font-family:serif;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}.swal2-close:hover{transform:none;background:rgba(0,0,0,0);color:#f27474}.swal2-close:focus{outline:none;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}.swal2-close::-moz-focus-inner{border:0}.swal2-html-container{z-index:1;justify-content:center;margin:1em 1.6em .3em;padding:0;overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word}.swal2-input,.swal2-file,.swal2-textarea,.swal2-select,.swal2-radio,.swal2-checkbox{margin:1em 2em 3px}.swal2-input,.swal2-file,.swal2-textarea{box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:rgba(0,0,0,0);box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-input.swal2-inputerror,.swal2-file.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}.swal2-input:focus,.swal2-file:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:none;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}.swal2-input::placeholder,.swal2-file::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em 2em 3px;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-file{width:75%;margin-right:auto;margin-left:auto;background:rgba(0,0,0,0);font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-radio,.swal2-checkbox{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-radio label,.swal2-checkbox label{margin:0 .6em;font-size:1.125em}.swal2-radio input,.swal2-checkbox input{flex-shrink:0;margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto 0}.swal2-validation-message{align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\"!\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:0.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:swal2-show .3s}.swal2-hide{animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static !important}}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}");
    });

    /* src\views\ProfileSettings.svelte generated by Svelte v3.52.0 */

    const { console: console_1$6 } = globals;
    const file$l = "src\\views\\ProfileSettings.svelte";

    // (240:44) {#if btnEditPicture}
    function create_if_block_1$3(ctx) {
    	let div1;
    	let div0;
    	let button;
    	let div1_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			button = element("button");
    			button.textContent = "Aceptar";
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "btn btn-success btn-profile");
    			add_location(button, file$l, 247, 56, 10424);
    			attr_dev(div0, "class", "hstack gap-2 justify-content-center mb-4");
    			add_location(div0, file$l, 244, 52, 10201);
    			attr_dev(div1, "class", "col-lg-12");
    			add_location(div1, file$l, 240, 48, 9952);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*sendToLogin*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_transition) div1_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(240:44) {#if btnEditPicture}",
    		ctx
    	});

    	return block;
    }

    // (400:48) {#if visible}
    function create_if_block$3(ctx) {
    	let div1;
    	let div0;
    	let label;
    	let t1;
    	let input;
    	let div1_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			label = element("label");
    			label.textContent = "Contraseña";
    			t1 = space();
    			input = element("input");
    			attr_dev(label, "for", "passwordInput");
    			attr_dev(label, "class", "form-label");
    			add_location(label, file$l, 405, 60, 21025);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "class", "form-control");
    			attr_dev(input, "data-provider", "flatpickr");
    			attr_dev(input, "id", "passwordInput");
    			attr_dev(input, "name", "password");
    			attr_dev(input, "placeholder", "Contraseña");
    			add_location(input, file$l, 410, 60, 21409);
    			attr_dev(div0, "class", "mb-3");
    			add_location(div0, file$l, 404, 56, 20945);
    			attr_dev(div1, "class", "col-lg-12");
    			add_location(div1, file$l, 400, 52, 20680);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, label);
    			append_dev(div0, t1);
    			append_dev(div0, input);
    			set_input_value(input, /*datosUsuarioToEdit*/ ctx[0].password);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[12]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*datosUsuarioToEdit*/ 1 && input.value !== /*datosUsuarioToEdit*/ ctx[0].password) {
    				set_input_value(input, /*datosUsuarioToEdit*/ ctx[0].password);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_transition) div1_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(400:48) {#if visible}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let t0;
    	let svelte;
    	let title;
    	let t2;
    	let script0;
    	let script0_src_value;
    	let t3;
    	let link0;
    	let t4;
    	let link1;
    	let t5;
    	let link2;
    	let t6;
    	let link3;
    	let t7;
    	let main;
    	let div42;
    	let header;
    	let div0;
    	let headerapp;
    	let t8;
    	let div1;
    	let sidebar;
    	let t9;
    	let div2;
    	let t10;
    	let div41;
    	let div40;
    	let div39;
    	let div6;
    	let div5;
    	let div4;
    	let h4;
    	let t12;
    	let div3;
    	let ol;
    	let li0;
    	let a0;
    	let t14;
    	let li1;
    	let t16;
    	let div11;
    	let div10;
    	let img0;
    	let img0_src_value;
    	let t17;
    	let div9;
    	let div8;
    	let div7;
    	let t18;
    	let div38;
    	let div17;
    	let div16;
    	let div15;
    	let form;
    	let div14;
    	let div13;
    	let img1;
    	let img1_src_value;
    	let t19;
    	let div12;
    	let input0;
    	let t20;
    	let label0;
    	let span;
    	let i0;
    	let t21;
    	let t22;
    	let h5;
    	let t26;
    	let input1;
    	let input1_value_value;
    	let t27;
    	let input2;
    	let t28;
    	let div37;
    	let div36;
    	let div18;
    	let ul;
    	let li2;
    	let a1;
    	let i1;
    	let t29;
    	let t30;
    	let div35;
    	let div34;
    	let div33;
    	let div32;
    	let div20;
    	let div19;
    	let label1;
    	let t32;
    	let input3;
    	let t33;
    	let div22;
    	let div21;
    	let label2;
    	let t35;
    	let input4;
    	let t36;
    	let div24;
    	let div23;
    	let label3;
    	let t38;
    	let input5;
    	let t39;
    	let div26;
    	let div25;
    	let label4;
    	let t41;
    	let input6;
    	let t42;
    	let div29;
    	let div28;
    	let div27;
    	let input7;
    	let t43;
    	let label5;
    	let t45;
    	let t46;
    	let div31;
    	let div30;
    	let button;
    	let t48;
    	let div43;
    	let script1;
    	let script1_src_value;
    	let t49;
    	let script2;
    	let script2_src_value;
    	let t50;
    	let script3;
    	let script3_src_value;
    	let t51;
    	let script4;
    	let script4_src_value;
    	let t52;
    	let script5;
    	let script5_src_value;
    	let t53;
    	let script6;
    	let script6_src_value;
    	let t54;
    	let script7;
    	let script7_src_value;
    	let t55;
    	let script8;
    	let script8_src_value;
    	let t56;
    	let script9;
    	let script9_src_value;
    	let current;
    	let mounted;
    	let dispose;

    	headerapp = new HeaderApp({
    			props: { data: /*infoUserLogged*/ ctx[3] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });
    	let if_block0 = /*btnEditPicture*/ ctx[2] && create_if_block_1$3(ctx);
    	let if_block1 = /*visible*/ ctx[1] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			t0 = text("//vefirificado\r\n\r\n\r\n");
    			svelte = element("svelte");
    			title = element("title");
    			title.textContent = "DevEcommerce | Editar Perfil";
    			t2 = space();
    			script0 = element("script");
    			t3 = space();
    			link0 = element("link");
    			t4 = space();
    			link1 = element("link");
    			t5 = space();
    			link2 = element("link");
    			t6 = space();
    			link3 = element("link");
    			t7 = space();
    			main = element("main");
    			div42 = element("div");
    			header = element("header");
    			div0 = element("div");
    			create_component(headerapp.$$.fragment);
    			t8 = space();
    			div1 = element("div");
    			create_component(sidebar.$$.fragment);
    			t9 = space();
    			div2 = element("div");
    			t10 = space();
    			div41 = element("div");
    			div40 = element("div");
    			div39 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Editar Perfil";
    			t12 = space();
    			div3 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "Home";
    			t14 = space();
    			li1 = element("li");
    			li1.textContent = "Editar Perfil";
    			t16 = space();
    			div11 = element("div");
    			div10 = element("div");
    			img0 = element("img");
    			t17 = space();
    			div9 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			t18 = space();
    			div38 = element("div");
    			div17 = element("div");
    			div16 = element("div");
    			div15 = element("div");
    			form = element("form");
    			div14 = element("div");
    			div13 = element("div");
    			img1 = element("img");
    			t19 = space();
    			div12 = element("div");
    			input0 = element("input");
    			t20 = space();
    			label0 = element("label");
    			span = element("span");
    			i0 = element("i");
    			t21 = space();
    			if (if_block0) if_block0.c();
    			t22 = space();
    			h5 = element("h5");

    			h5.textContent = `${/*infoUserLogged*/ ctx[3].name} 
                                                ${/*infoUserLogged*/ ctx[3].lastname}`;

    			t26 = space();
    			input1 = element("input");
    			t27 = space();
    			input2 = element("input");
    			t28 = space();
    			div37 = element("div");
    			div36 = element("div");
    			div18 = element("div");
    			ul = element("ul");
    			li2 = element("li");
    			a1 = element("a");
    			i1 = element("i");
    			t29 = text("Detalles Personales");
    			t30 = space();
    			div35 = element("div");
    			div34 = element("div");
    			div33 = element("div");
    			div32 = element("div");
    			div20 = element("div");
    			div19 = element("div");
    			label1 = element("label");
    			label1.textContent = "Nombre";
    			t32 = space();
    			input3 = element("input");
    			t33 = space();
    			div22 = element("div");
    			div21 = element("div");
    			label2 = element("label");
    			label2.textContent = "Apellido";
    			t35 = space();
    			input4 = element("input");
    			t36 = space();
    			div24 = element("div");
    			div23 = element("div");
    			label3 = element("label");
    			label3.textContent = "Correo";
    			t38 = space();
    			input5 = element("input");
    			t39 = space();
    			div26 = element("div");
    			div25 = element("div");
    			label4 = element("label");
    			label4.textContent = "Teléfono";
    			t41 = space();
    			input6 = element("input");
    			t42 = space();
    			div29 = element("div");
    			div28 = element("div");
    			div27 = element("div");
    			input7 = element("input");
    			t43 = space();
    			label5 = element("label");
    			label5.textContent = "Cambiar\r\n                                                                contraseña";
    			t45 = space();
    			if (if_block1) if_block1.c();
    			t46 = space();
    			div31 = element("div");
    			div30 = element("div");
    			button = element("button");
    			button.textContent = "Editar";
    			t48 = space();
    			div43 = element("div");
    			script1 = element("script");
    			t49 = space();
    			script2 = element("script");
    			t50 = space();
    			script3 = element("script");
    			t51 = space();
    			script4 = element("script");
    			t52 = space();
    			script5 = element("script");
    			t53 = space();
    			script6 = element("script");
    			t54 = space();
    			script7 = element("script");
    			t55 = space();
    			script8 = element("script");
    			t56 = space();
    			script9 = element("script");
    			add_location(title, file$l, 95, 4, 3082);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$l, 101, 4, 3309);
    			attr_dev(link0, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link0, "rel", "stylesheet");
    			attr_dev(link0, "type", "text/css");
    			add_location(link0, file$l, 103, 4, 3401);
    			attr_dev(link1, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$l, 109, 4, 3555);
    			attr_dev(link2, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$l, 115, 4, 3702);
    			attr_dev(link3, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$l, 121, 4, 3850);
    			add_location(svelte, file$l, 94, 0, 3068);
    			attr_dev(div0, "class", "layout-width");
    			add_location(div0, file$l, 132, 12, 4097);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$l, 131, 8, 4058);
    			attr_dev(div1, "class", "app-menu navbar-menu");
    			add_location(div1, file$l, 138, 8, 4276);
    			attr_dev(div2, "class", "vertical-overlay");
    			add_location(div2, file$l, 143, 8, 4430);
    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$l, 157, 32, 5132);
    			attr_dev(a0, "href", "/home");
    			add_location(a0, file$l, 162, 44, 5417);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$l, 161, 40, 5343);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$l, 164, 40, 5530);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$l, 160, 36, 5274);
    			attr_dev(div3, "class", "page-title-right");
    			add_location(div3, file$l, 159, 32, 5206);
    			attr_dev(div4, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div4, file$l, 154, 28, 4954);
    			attr_dev(div5, "class", "col-12");
    			add_location(div5, file$l, 153, 24, 4904);
    			attr_dev(div6, "class", "row");
    			add_location(div6, file$l, 152, 20, 4861);
    			if (!src_url_equal(img0.src, img0_src_value = "http://localhost:8080/images/profile-bg.jpg")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "class", "profile-wid-img");
    			attr_dev(img0, "alt", "");
    			add_location(img0, file$l, 182, 28, 6279);
    			attr_dev(div7, "class", "p-0 ms-auto rounded-circle profile-photo-edit");
    			add_location(div7, file$l, 189, 36, 6652);
    			attr_dev(div8, "class", "text-end p-3");
    			add_location(div8, file$l, 188, 32, 6588);
    			attr_dev(div9, "class", "overlay-content");
    			add_location(div9, file$l, 187, 28, 6525);
    			attr_dev(div10, "class", "profile-wid-bg profile-setting-img");
    			add_location(div10, file$l, 181, 24, 6201);
    			attr_dev(div11, "class", "position-relative mx-n4 mt-n4");
    			add_location(div11, file$l, 180, 20, 6132);
    			if (!src_url_equal(img1.src, img1_src_value = /*infoUserLogged*/ ctx[3].avatar)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "class", "rounded-circle avatar-xl img-thumbnail user-profile-image shadow");
    			attr_dev(img1, "alt", "user-profile");
    			add_location(img1, file$l, 210, 48, 7786);
    			attr_dev(input0, "id", "profile-img-file-input");
    			attr_dev(input0, "type", "file");
    			attr_dev(input0, "class", "profile-img-file-input");
    			attr_dev(input0, "name", "cover");
    			add_location(input0, file$l, 218, 52, 8390);
    			attr_dev(i0, "class", "ri-camera-fill");
    			add_location(i0, file$l, 232, 60, 9447);
    			attr_dev(span, "class", "avatar-title rounded-circle bg-light text-body shadow");
    			add_location(span, file$l, 229, 56, 9198);
    			attr_dev(label0, "for", "profile-img-file-input");
    			attr_dev(label0, "class", "profile-photo-edit avatar-xs");
    			add_location(label0, file$l, 225, 52, 8899);
    			attr_dev(div12, "class", "avatar-xs p-0 rounded-circle profile-photo-edit");
    			add_location(div12, file$l, 215, 48, 8172);
    			attr_dev(div13, "class", "profile-user position-relative d-inline-block mx-auto mb-4");
    			add_location(div13, file$l, 207, 44, 7568);
    			attr_dev(h5, "class", "fs-16 mb-1");
    			add_location(h5, file$l, 257, 44, 11097);
    			attr_dev(div14, "class", "text-center");
    			add_location(div14, file$l, 206, 40, 7497);
    			attr_dev(input1, "type", "hidden");
    			attr_dev(input1, "name", "id");
    			input1.value = input1_value_value = /*datosUsuarioToEdit*/ ctx[0].id;
    			add_location(input1, file$l, 262, 40, 11407);
    			attr_dev(input2, "type", "hidden");
    			attr_dev(input2, "name", "action");
    			input2.value = "updateAvatar";
    			add_location(input2, file$l, 267, 40, 11688);
    			attr_dev(form, "method", "POST");
    			attr_dev(form, "action", "https://newphpecommercejona.herokuapp.com/app/UserController.php");
    			attr_dev(form, "enctype", "multipart/form-data");
    			add_location(form, file$l, 201, 36, 7170);
    			attr_dev(div15, "class", "card-body p-4");
    			add_location(div15, file$l, 200, 32, 7105);
    			attr_dev(div16, "class", "card mt-n5");
    			add_location(div16, file$l, 199, 28, 7047);
    			attr_dev(div17, "class", "col-xxl-3");
    			add_location(div17, file$l, 198, 24, 6994);
    			attr_dev(i1, "class", "fas fa-home");
    			add_location(i1, file$l, 291, 48, 13011);
    			attr_dev(a1, "class", "nav-link active");
    			attr_dev(a1, "data-bs-toggle", "tab");
    			attr_dev(a1, "href", "#personalDetails");
    			attr_dev(a1, "role", "tab");
    			add_location(a1, file$l, 285, 44, 12636);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$l, 284, 40, 12569);
    			attr_dev(ul, "class", "nav nav-tabs-custom rounded card-header-tabs border-bottom-0");
    			attr_dev(ul, "role", "tablist");
    			add_location(ul, file$l, 280, 36, 12319);
    			attr_dev(div18, "class", "card-header");
    			add_location(div18, file$l, 279, 32, 12256);
    			attr_dev(label1, "for", "nameInput");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$l, 309, 56, 14081);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "id", "nameInput");
    			attr_dev(input3, "name", "name");
    			attr_dev(input3, "placeholder", "Enter your firstname");
    			add_location(input3, file$l, 314, 56, 14437);
    			attr_dev(div19, "class", "mb-3");
    			add_location(div19, file$l, 308, 52, 14005);
    			attr_dev(div20, "class", "col-lg-6");
    			add_location(div20, file$l, 307, 48, 13929);
    			attr_dev(label2, "for", "lastnameInput");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$l, 327, 56, 15385);
    			attr_dev(input4, "type", "text");
    			attr_dev(input4, "class", "form-control");
    			attr_dev(input4, "id", "lastnameInput");
    			attr_dev(input4, "name", "lastname");
    			attr_dev(input4, "placeholder", "Enter your lastname");
    			add_location(input4, file$l, 332, 56, 15747);
    			attr_dev(div21, "class", "mb-3");
    			add_location(div21, file$l, 326, 52, 15309);
    			attr_dev(div22, "class", "col-lg-6");
    			add_location(div22, file$l, 325, 48, 15233);
    			attr_dev(label3, "for", "emailInput");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$l, 345, 56, 16704);
    			attr_dev(input5, "type", "email");
    			attr_dev(input5, "class", "form-control");
    			attr_dev(input5, "id", "emailInput");
    			attr_dev(input5, "name", "email");
    			attr_dev(input5, "placeholder", "Enter your email");
    			add_location(input5, file$l, 350, 56, 17061);
    			attr_dev(div23, "class", "mb-3");
    			add_location(div23, file$l, 344, 52, 16628);
    			attr_dev(div24, "class", "col-lg-6");
    			add_location(div24, file$l, 343, 48, 16552);
    			attr_dev(label4, "for", "phonenumberInput");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$l, 362, 56, 17943);
    			attr_dev(input6, "type", "text");
    			attr_dev(input6, "class", "form-control");
    			attr_dev(input6, "id", "phonenumberInput");
    			attr_dev(input6, "name", "phone_number");
    			attr_dev(input6, "placeholder", "Enter your phone number");
    			add_location(input6, file$l, 367, 56, 18308);
    			attr_dev(div25, "class", "mb-3");
    			add_location(div25, file$l, 361, 52, 17867);
    			attr_dev(div26, "class", "col-lg-6");
    			add_location(div26, file$l, 360, 48, 17791);
    			attr_dev(input7, "class", "form-check-input");
    			attr_dev(input7, "type", "checkbox");
    			input7.value = "";
    			attr_dev(input7, "id", "flexCheckDefault");
    			add_location(input7, file$l, 381, 60, 19360);
    			attr_dev(label5, "class", "form-check-label");
    			attr_dev(label5, "for", "flexCheckDefault");
    			add_location(label5, file$l, 388, 60, 19915);
    			attr_dev(div27, "class", "form-check");
    			add_location(div27, file$l, 380, 56, 19274);
    			attr_dev(div28, "class", "mb-3");
    			add_location(div28, file$l, 379, 52, 19198);
    			attr_dev(div29, "class", "col-lg-12");
    			add_location(div29, file$l, 378, 48, 19121);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "btn btn-primary");
    			add_location(button, file$l, 428, 56, 22681);
    			attr_dev(div30, "class", "hstack gap-2 justify-content-end");
    			add_location(div30, file$l, 425, 52, 22466);
    			attr_dev(div31, "class", "col-lg-12");
    			add_location(div31, file$l, 424, 48, 22389);
    			attr_dev(div32, "class", "row");
    			add_location(div32, file$l, 306, 44, 13862);
    			attr_dev(div33, "class", "tab-pane active");
    			attr_dev(div33, "id", "personalDetails");
    			attr_dev(div33, "role", "tabpanel");
    			add_location(div33, file$l, 300, 40, 13503);
    			attr_dev(div34, "class", "tab-content");
    			add_location(div34, file$l, 299, 36, 13436);
    			attr_dev(div35, "class", "card-body p-4");
    			add_location(div35, file$l, 298, 32, 13371);
    			attr_dev(div36, "class", "card mt-xxl-n5");
    			add_location(div36, file$l, 278, 28, 12194);
    			attr_dev(div37, "class", "col-xxl-9");
    			add_location(div37, file$l, 277, 24, 12141);
    			attr_dev(div38, "class", "row");
    			add_location(div38, file$l, 197, 20, 6951);
    			attr_dev(div39, "class", "container-fluid");
    			add_location(div39, file$l, 150, 16, 4763);
    			attr_dev(div40, "class", "page-content");
    			add_location(div40, file$l, 149, 12, 4719);
    			attr_dev(div41, "class", "main-content");
    			add_location(div41, file$l, 148, 8, 4679);
    			attr_dev(div42, "id", "layout-wrapper");
    			add_location(div42, file$l, 130, 4, 4023);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$l, 459, 8, 24115);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$l, 462, 8, 24235);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$l, 465, 8, 24345);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$l, 468, 8, 24452);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$l, 471, 8, 24564);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$l, 474, 8, 24678);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/particles.js/particles.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$l, 475, 8, 24747);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/pages/particles.app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$l, 478, 8, 24856);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/password-addon.init.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$l, 479, 8, 24937);
    			add_location(div43, file$l, 454, 4, 23942);
    			add_location(main, file$l, 128, 0, 3986);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, svelte, anchor);
    			append_dev(svelte, title);
    			append_dev(svelte, t2);
    			append_dev(svelte, script0);
    			append_dev(svelte, t3);
    			append_dev(svelte, link0);
    			append_dev(svelte, t4);
    			append_dev(svelte, link1);
    			append_dev(svelte, t5);
    			append_dev(svelte, link2);
    			append_dev(svelte, t6);
    			append_dev(svelte, link3);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div42);
    			append_dev(div42, header);
    			append_dev(header, div0);
    			mount_component(headerapp, div0, null);
    			append_dev(div42, t8);
    			append_dev(div42, div1);
    			mount_component(sidebar, div1, null);
    			append_dev(div42, t9);
    			append_dev(div42, div2);
    			append_dev(div42, t10);
    			append_dev(div42, div41);
    			append_dev(div41, div40);
    			append_dev(div40, div39);
    			append_dev(div39, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h4);
    			append_dev(div4, t12);
    			append_dev(div4, div3);
    			append_dev(div3, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a0);
    			append_dev(ol, t14);
    			append_dev(ol, li1);
    			append_dev(div39, t16);
    			append_dev(div39, div11);
    			append_dev(div11, div10);
    			append_dev(div10, img0);
    			append_dev(div10, t17);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div39, t18);
    			append_dev(div39, div38);
    			append_dev(div38, div17);
    			append_dev(div17, div16);
    			append_dev(div16, div15);
    			append_dev(div15, form);
    			append_dev(form, div14);
    			append_dev(div14, div13);
    			append_dev(div13, img1);
    			append_dev(div13, t19);
    			append_dev(div13, div12);
    			append_dev(div12, input0);
    			append_dev(div12, t20);
    			append_dev(div12, label0);
    			append_dev(label0, span);
    			append_dev(span, i0);
    			append_dev(div14, t21);
    			if (if_block0) if_block0.m(div14, null);
    			append_dev(div14, t22);
    			append_dev(div14, h5);
    			append_dev(form, t26);
    			append_dev(form, input1);
    			append_dev(form, t27);
    			append_dev(form, input2);
    			append_dev(div38, t28);
    			append_dev(div38, div37);
    			append_dev(div37, div36);
    			append_dev(div36, div18);
    			append_dev(div18, ul);
    			append_dev(ul, li2);
    			append_dev(li2, a1);
    			append_dev(a1, i1);
    			append_dev(a1, t29);
    			append_dev(div36, t30);
    			append_dev(div36, div35);
    			append_dev(div35, div34);
    			append_dev(div34, div33);
    			append_dev(div33, div32);
    			append_dev(div32, div20);
    			append_dev(div20, div19);
    			append_dev(div19, label1);
    			append_dev(div19, t32);
    			append_dev(div19, input3);
    			set_input_value(input3, /*datosUsuarioToEdit*/ ctx[0].nombre);
    			append_dev(div32, t33);
    			append_dev(div32, div22);
    			append_dev(div22, div21);
    			append_dev(div21, label2);
    			append_dev(div21, t35);
    			append_dev(div21, input4);
    			set_input_value(input4, /*datosUsuarioToEdit*/ ctx[0].lastname);
    			append_dev(div32, t36);
    			append_dev(div32, div24);
    			append_dev(div24, div23);
    			append_dev(div23, label3);
    			append_dev(div23, t38);
    			append_dev(div23, input5);
    			set_input_value(input5, /*datosUsuarioToEdit*/ ctx[0].email);
    			append_dev(div32, t39);
    			append_dev(div32, div26);
    			append_dev(div26, div25);
    			append_dev(div25, label4);
    			append_dev(div25, t41);
    			append_dev(div25, input6);
    			set_input_value(input6, /*datosUsuarioToEdit*/ ctx[0].phone);
    			append_dev(div32, t42);
    			append_dev(div32, div29);
    			append_dev(div29, div28);
    			append_dev(div28, div27);
    			append_dev(div27, input7);
    			append_dev(div27, t43);
    			append_dev(div27, label5);
    			append_dev(div32, t45);
    			if (if_block1) if_block1.m(div32, null);
    			append_dev(div32, t46);
    			append_dev(div32, div31);
    			append_dev(div31, div30);
    			append_dev(div30, button);
    			append_dev(main, t48);
    			append_dev(main, div43);
    			append_dev(div43, script1);
    			append_dev(div43, t49);
    			append_dev(div43, script2);
    			append_dev(div43, t50);
    			append_dev(div43, script3);
    			append_dev(div43, t51);
    			append_dev(div43, script4);
    			append_dev(div43, t52);
    			append_dev(div43, script5);
    			append_dev(div43, t53);
    			append_dev(div43, script6);
    			append_dev(div43, t54);
    			append_dev(div43, script7);
    			append_dev(div43, t55);
    			append_dev(div43, script8);
    			append_dev(div43, t56);
    			append_dev(div43, script9);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "click", /*btnSendImage*/ ctx[5], false, false, false),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[8]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[9]),
    					listen_dev(input5, "input", /*input5_input_handler*/ ctx[10]),
    					listen_dev(input6, "input", /*input6_input_handler*/ ctx[11]),
    					listen_dev(input7, "click", /*toggleVissible*/ ctx[4], false, false, false),
    					listen_dev(button, "click", /*editUser*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*btnEditPicture*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*btnEditPicture*/ 4) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div14, t22);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*datosUsuarioToEdit*/ 1 && input1_value_value !== (input1_value_value = /*datosUsuarioToEdit*/ ctx[0].id)) {
    				prop_dev(input1, "value", input1_value_value);
    			}

    			if (dirty & /*datosUsuarioToEdit*/ 1 && input3.value !== /*datosUsuarioToEdit*/ ctx[0].nombre) {
    				set_input_value(input3, /*datosUsuarioToEdit*/ ctx[0].nombre);
    			}

    			if (dirty & /*datosUsuarioToEdit*/ 1 && input4.value !== /*datosUsuarioToEdit*/ ctx[0].lastname) {
    				set_input_value(input4, /*datosUsuarioToEdit*/ ctx[0].lastname);
    			}

    			if (dirty & /*datosUsuarioToEdit*/ 1 && input5.value !== /*datosUsuarioToEdit*/ ctx[0].email) {
    				set_input_value(input5, /*datosUsuarioToEdit*/ ctx[0].email);
    			}

    			if (dirty & /*datosUsuarioToEdit*/ 1 && input6.value !== /*datosUsuarioToEdit*/ ctx[0].phone) {
    				set_input_value(input6, /*datosUsuarioToEdit*/ ctx[0].phone);
    			}

    			if (/*visible*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*visible*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div32, t46);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(svelte);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let $dataActiveUser;
    	validate_store(dataActiveUser, 'dataActiveUser');
    	component_subscribe($$self, dataActiveUser, $$value => $$invalidate(13, $dataActiveUser = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProfileSettings', slots, []);
    	get_store_value(dataActiveUser);

    	// Datos del usuario loggeado
    	const infoUserLogged = $dataActiveUser;

    	const datosUsuarioToEdit = {
    		action: 'updateUser',
    		id: infoUserLogged.id,
    		nombre: infoUserLogged.name,
    		lastname: infoUserLogged.lastname,
    		email: infoUserLogged.email,
    		phone: infoUserLogged.phone_number,
    		password: ''
    	};

    	// Password hidden options
    	let visible = false;

    	function toggleVissible() {
    		$$invalidate(1, visible = !visible);
    	}

    	// ==========================
    	// Edit picture
    	let btnEditPicture = false;

    	function btnSendImage() {
    		$$invalidate(2, btnEditPicture = true);
    	}

    	async function editUser(e) {
    		e.preventDefault();
    		let bodyForm = new FormData();
    		bodyForm.append('action', datosUsuarioToEdit.action);
    		bodyForm.append('name', datosUsuarioToEdit.nombre);
    		bodyForm.append('lastname', datosUsuarioToEdit.lastname);
    		bodyForm.append('email', datosUsuarioToEdit.email);
    		bodyForm.append('phone_number', datosUsuarioToEdit.phone_number);
    		bodyForm.append('password', datosUsuarioToEdit.password);
    		bodyForm.append('id', datosUsuarioToEdit.id);

    		axios.post('https://newphpecommercejona.herokuapp.com/app/UserController.php', bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: 'Regresaras al login',
    					text: 'Inicia Sesion de nuevo para ver los cambios realizados en tu perfil',
    					icon: 'info',
    					showCancelButton: false,
    					confirmButtonText: 'Aceptar'
    				}).then(result => {
    					if (result.value) {
    						location.href = '/';
    					}
    				});
    			} else {
    				console.log('Nel');
    			}
    		}).catch(resp => console.log(resp));
    	}

    	async function sendToLogin() {
    		// e.preventDefault();
    		sweetalert2_all.fire({
    			title: 'Regresaras al login',
    			text: 'Inicia Sesion de nuevo para ver los cambios realizados en tu perfil',
    			icon: 'info',
    			showCancelButton: false,
    			confirmButtonText: 'Aceptar'
    		}).then(result => {
    			if (result.value) {
    				location.href = '#';
    			}
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$6.warn(`<ProfileSettings> was created with unknown prop '${key}'`);
    	});

    	function input3_input_handler() {
    		datosUsuarioToEdit.nombre = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	function input4_input_handler() {
    		datosUsuarioToEdit.lastname = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	function input5_input_handler() {
    		datosUsuarioToEdit.email = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	function input6_input_handler() {
    		datosUsuarioToEdit.phone = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	function input_input_handler() {
    		datosUsuarioToEdit.password = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	$$self.$capture_state = () => ({
    		Jumper,
    		axios,
    		Sidebar,
    		get: get_store_value,
    		dataActiveUser,
    		HeaderApp,
    		fade,
    		Swal: sweetalert2_all,
    		infoUserLogged,
    		datosUsuarioToEdit,
    		visible,
    		toggleVissible,
    		btnEditPicture,
    		btnSendImage,
    		editUser,
    		sendToLogin,
    		$dataActiveUser
    	});

    	$$self.$inject_state = $$props => {
    		if ('visible' in $$props) $$invalidate(1, visible = $$props.visible);
    		if ('btnEditPicture' in $$props) $$invalidate(2, btnEditPicture = $$props.btnEditPicture);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		datosUsuarioToEdit,
    		visible,
    		btnEditPicture,
    		infoUserLogged,
    		toggleVissible,
    		btnSendImage,
    		editUser,
    		sendToLogin,
    		input3_input_handler,
    		input4_input_handler,
    		input5_input_handler,
    		input6_input_handler,
    		input_input_handler
    	];
    }

    class ProfileSettings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProfileSettings",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    /* src\views\RegisterUser.svelte generated by Svelte v3.52.0 */

    const { console: console_1$5 } = globals;
    const file$k = "src\\views\\RegisterUser.svelte";

    function create_fragment$k(ctx) {
    	let t0;
    	let script0;
    	let script0_src_value;
    	let link0;
    	let link1;
    	let link2;
    	let link3;
    	let script1;
    	let script1_src_value;
    	let script2;
    	let script2_src_value;
    	let script3;
    	let script3_src_value;
    	let script4;
    	let script4_src_value;
    	let script5;
    	let script5_src_value;
    	let script6;
    	let script6_src_value;
    	let script7;
    	let script7_src_value;
    	let script8;
    	let script8_src_value;
    	let script9;
    	let script9_src_value;
    	let script10;
    	let script10_src_value;
    	let t1;
    	let main;
    	let div32;
    	let div2;
    	let div0;
    	let t2;
    	let div1;
    	let svg;
    	let path;
    	let t3;
    	let div31;
    	let div26;
    	let div6;
    	let div5;
    	let div4;
    	let div3;
    	let a0;
    	let img;
    	let img_src_value;
    	let t4;
    	let p0;
    	let t6;
    	let div25;
    	let div24;
    	let div22;
    	let div21;
    	let div7;
    	let h5;
    	let t8;
    	let p1;
    	let t10;
    	let div20;
    	let form;
    	let div9;
    	let label0;
    	let t11;
    	let span0;
    	let t13;
    	let input0;
    	let t14;
    	let div8;
    	let t16;
    	let div11;
    	let label1;
    	let t17;
    	let span1;
    	let t19;
    	let input1;
    	let t20;
    	let div10;
    	let t22;
    	let div13;
    	let label2;
    	let t23;
    	let span2;
    	let t25;
    	let input2;
    	let t26;
    	let div12;
    	let t28;
    	let div15;
    	let label3;
    	let t29;
    	let span3;
    	let t31;
    	let input3;
    	let t32;
    	let div14;
    	let t34;
    	let div17;
    	let label4;
    	let t36;
    	let div16;
    	let input4;
    	let t37;
    	let button0;
    	let i0;
    	let t38;
    	let div18;
    	let input5;
    	let t39;
    	let div19;
    	let button1;
    	let t41;
    	let input6;
    	let t42;
    	let div23;
    	let p2;
    	let t43;
    	let a1;
    	let t45;
    	let footer;
    	let div30;
    	let div29;
    	let div28;
    	let div27;
    	let p3;
    	let t46;
    	let i1;
    	let t47;
    	let main_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			script0 = element("script");
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			link3 = element("link");
    			script1 = element("script");
    			script2 = element("script");
    			script3 = element("script");
    			script4 = element("script");
    			script5 = element("script");
    			script6 = element("script");
    			script7 = element("script");
    			script8 = element("script");
    			script9 = element("script");
    			script10 = element("script");
    			t1 = space();
    			main = element("main");
    			div32 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t2 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t3 = space();
    			div31 = element("div");
    			div26 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			a0 = element("a");
    			img = element("img");
    			t4 = space();
    			p0 = element("p");
    			p0.textContent = "DevStore";
    			t6 = space();
    			div25 = element("div");
    			div24 = element("div");
    			div22 = element("div");
    			div21 = element("div");
    			div7 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Crear una nueva cuenta";
    			t8 = space();
    			p1 = element("p");
    			p1.textContent = "Obtenga su cuenta gratis ahora";
    			t10 = space();
    			div20 = element("div");
    			form = element("form");
    			div9 = element("div");
    			label0 = element("label");
    			t11 = text("Nombre ");
    			span0 = element("span");
    			span0.textContent = "*";
    			t13 = space();
    			input0 = element("input");
    			t14 = space();
    			div8 = element("div");
    			div8.textContent = "Por favor, ingresa tu nombre";
    			t16 = space();
    			div11 = element("div");
    			label1 = element("label");
    			t17 = text("Apellidos ");
    			span1 = element("span");
    			span1.textContent = "*";
    			t19 = space();
    			input1 = element("input");
    			t20 = space();
    			div10 = element("div");
    			div10.textContent = "Por favor, ingresa tus apellidos";
    			t22 = space();
    			div13 = element("div");
    			label2 = element("label");
    			t23 = text("Correo");
    			span2 = element("span");
    			span2.textContent = "*";
    			t25 = space();
    			input2 = element("input");
    			t26 = space();
    			div12 = element("div");
    			div12.textContent = "Por favor, ingresa tu correo";
    			t28 = space();
    			div15 = element("div");
    			label3 = element("label");
    			t29 = text("Teléfono ");
    			span3 = element("span");
    			span3.textContent = "*";
    			t31 = space();
    			input3 = element("input");
    			t32 = space();
    			div14 = element("div");
    			div14.textContent = "Por favor, ingresa tu teléfono";
    			t34 = space();
    			div17 = element("div");
    			label4 = element("label");
    			label4.textContent = "Contraseña";
    			t36 = space();
    			div16 = element("div");
    			input4 = element("input");
    			t37 = space();
    			button0 = element("button");
    			i0 = element("i");
    			t38 = space();
    			div18 = element("div");
    			input5 = element("input");
    			t39 = space();
    			div19 = element("div");
    			button1 = element("button");
    			button1.textContent = "Registrate";
    			t41 = space();
    			input6 = element("input");
    			t42 = space();
    			div23 = element("div");
    			p2 = element("p");
    			t43 = text("Ya tienes una cuenta? ");
    			a1 = element("a");
    			a1.textContent = "Iniciar Sesión";
    			t45 = space();
    			footer = element("footer");
    			div30 = element("div");
    			div29 = element("div");
    			div28 = element("div");
    			div27 = element("div");
    			p3 = element("p");
    			t46 = text("©\r\n                                     Creado por ");
    			i1 = element("i");
    			t47 = text(" DevStore");
    			document.title = "DevEcommerce | Registrar Usuario";
    			script0.defer = true;
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$k, 42, 4, 1245);
    			attr_dev(link0, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link0, "rel", "stylesheet");
    			attr_dev(link0, "type", "text/css");
    			add_location(link0, file$k, 44, 4, 1343);
    			attr_dev(link1, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$k, 50, 4, 1497);
    			attr_dev(link2, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$k, 56, 4, 1644);
    			attr_dev(link3, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$k, 62, 4, 1792);
    			script1.defer = true;
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$k, 71, 4, 2065);
    			script2.defer = true;
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$k, 72, 4, 2164);
    			script3.defer = true;
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$k, 73, 4, 2253);
    			script4.defer = true;
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$k, 74, 4, 2339);
    			script5.defer = true;
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$k, 75, 4, 2430);
    			script6.defer = true;
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$k, 76, 4, 2523);
    			script7.defer = true;
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/particles.js/particles.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$k, 79, 4, 2623);
    			script8.defer = true;
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/pages/particles.app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$k, 81, 4, 2742);
    			script9.defer = true;
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/form-validation.init.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$k, 83, 4, 2855);
    			script10.defer = true;
    			if (!src_url_equal(script10.src, script10_src_value = "http://localhost:8080/js/pages/passowrd-create.init.js")) attr_dev(script10, "src", script10_src_value);
    			add_location(script10, file$k, 85, 4, 2980);
    			attr_dev(div0, "class", "bg-overlay");
    			add_location(div0, file$k, 93, 12, 3271);
    			attr_dev(path, "d", "M 0,36 C 144,53.6 432,123.2 720,124 C 1008,124.8 1296,56.8 1440,40L1440 140L0 140z");
    			add_location(path, file$k, 97, 20, 3496);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg, "viewBox", "0 0 1440 120");
    			add_location(svg, file$k, 96, 16, 3354);
    			attr_dev(div1, "class", "shape");
    			add_location(div1, file$k, 95, 12, 3317);
    			attr_dev(div2, "class", "auth-one-bg-position auth-one-bg");
    			attr_dev(div2, "id", "auth-particles");
    			add_location(div2, file$k, 92, 8, 3191);
    			if (!src_url_equal(img.src, img_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "height", "20");
    			add_location(img, file$k, 110, 36, 4091);
    			attr_dev(a0, "href", "index.html");
    			attr_dev(a0, "class", "d-inline-block auth-logo");
    			add_location(a0, file$k, 109, 32, 3999);
    			add_location(div3, file$k, 108, 28, 3960);
    			attr_dev(p0, "class", "mt-3 fs-15 fw-medium");
    			add_location(p0, file$k, 113, 28, 4269);
    			attr_dev(div4, "class", "text-center mt-sm-5 mb-4 text-white-50");
    			add_location(div4, file$k, 107, 24, 3878);
    			attr_dev(div5, "class", "col-lg-12");
    			add_location(div5, file$k, 106, 20, 3829);
    			attr_dev(div6, "class", "row");
    			add_location(div6, file$k, 105, 16, 3790);
    			attr_dev(h5, "class", "text-primary");
    			add_location(h5, file$k, 125, 36, 4763);
    			attr_dev(p1, "class", "text-muted");
    			add_location(p1, file$k, 126, 36, 4853);
    			attr_dev(div7, "class", "text-center mt-2");
    			add_location(div7, file$k, 124, 32, 4695);
    			attr_dev(span0, "class", "text-danger");
    			add_location(span0, file$k, 131, 92, 5321);
    			attr_dev(label0, "for", "username");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$k, 131, 44, 5273);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "name", "name");
    			attr_dev(input0, "class", "form-control");
    			attr_dev(input0, "id", "username");
    			attr_dev(input0, "placeholder", "Ingresa tu nombre");
    			input0.required = true;
    			add_location(input0, file$k, 132, 44, 5409);
    			attr_dev(div8, "class", "invalid-feedback");
    			add_location(div8, file$k, 133, 44, 5592);
    			attr_dev(div9, "class", "mb-3");
    			add_location(div9, file$k, 130, 40, 5209);
    			attr_dev(span1, "class", "text-danger");
    			add_location(span1, file$k, 138, 99, 5961);
    			attr_dev(label1, "for", "userlastname");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$k, 138, 44, 5906);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "name", "lastname");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "id", "userlastname");
    			attr_dev(input1, "placeholder", "Ingresa tus apellidos");
    			input1.required = true;
    			add_location(input1, file$k, 139, 44, 6049);
    			attr_dev(div10, "class", "invalid-feedback");
    			add_location(div10, file$k, 140, 44, 6248);
    			attr_dev(div11, "class", "mb-3");
    			add_location(div11, file$k, 137, 40, 5842);
    			attr_dev(span2, "class", "text-danger");
    			add_location(span2, file$k, 146, 92, 6616);
    			attr_dev(label2, "for", "useremail");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$k, 146, 44, 6568);
    			attr_dev(input2, "type", "email");
    			attr_dev(input2, "name", "email");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "id", "useremail");
    			attr_dev(input2, "placeholder", "Ingresa tu email");
    			input2.required = true;
    			add_location(input2, file$k, 147, 44, 6704);
    			attr_dev(div12, "class", "invalid-feedback");
    			add_location(div12, file$k, 148, 44, 6890);
    			attr_dev(div13, "class", "mb-3");
    			add_location(div13, file$k, 145, 40, 6504);
    			attr_dev(span3, "class", "text-danger");
    			add_location(span3, file$k, 154, 95, 7257);
    			attr_dev(label3, "for", "userphone");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$k, 154, 44, 7206);
    			attr_dev(input3, "type", "tel");
    			attr_dev(input3, "name", "phone_number");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "id", "userphone");
    			attr_dev(input3, "placeholder", "Ingresa tu telefono");
    			input3.required = true;
    			add_location(input3, file$k, 155, 44, 7345);
    			attr_dev(div14, "class", "invalid-feedback");
    			add_location(div14, file$k, 156, 44, 7539);
    			attr_dev(div15, "class", "mb-3");
    			add_location(div15, file$k, 153, 40, 7142);
    			attr_dev(label4, "class", "form-label");
    			attr_dev(label4, "for", "password-input");
    			add_location(label4, file$k, 162, 44, 7857);
    			attr_dev(input4, "type", "password");
    			attr_dev(input4, "name", "password");
    			attr_dev(input4, "class", "form-control pe-5 password-input");
    			attr_dev(input4, "onpaste", "return false");
    			attr_dev(input4, "placeholder", "Ingresa tu contraseña");
    			attr_dev(input4, "id", "password-input");
    			attr_dev(input4, "aria-describedby", "passwordInput");
    			input4.required = true;
    			add_location(input4, file$k, 164, 48, 8070);
    			attr_dev(i0, "class", "ri-eye-fill align-middle");
    			add_location(i0, file$k, 165, 188, 8495);
    			attr_dev(button0, "class", "btn btn-link position-absolute end-0 top-0 text-decoration-none text-muted password-addon");
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "id", "password-addon");
    			add_location(button0, file$k, 165, 48, 8355);
    			attr_dev(div16, "class", "position-relative auth-pass-inputgroup");
    			add_location(div16, file$k, 163, 44, 7968);
    			attr_dev(div17, "class", "mb-3");
    			add_location(div17, file$k, 161, 40, 7793);
    			attr_dev(input5, "name", "cover");
    			input5.required = true;
    			attr_dev(input5, "type", "file");
    			attr_dev(input5, "class", "form-control");
    			attr_dev(input5, "aria-describedby", "basic-addon1");
    			add_location(input5, file$k, 178, 44, 9515);
    			attr_dev(div18, "class", "mb-3");
    			add_location(div18, file$k, 177, 40, 9451);
    			attr_dev(button1, "class", "btn btn-success w-100");
    			attr_dev(button1, "type", "submit");
    			add_location(button1, file$k, 182, 44, 9765);
    			attr_dev(div19, "class", "mt-4");
    			add_location(div19, file$k, 181, 40, 9701);
    			attr_dev(input6, "type", "hidden");
    			attr_dev(input6, "name", "action");
    			input6.value = "create";
    			add_location(input6, file$k, 184, 40, 9926);
    			attr_dev(form, "enctype", "multipart/form-data");
    			attr_dev(form, "method", "POST");
    			attr_dev(form, "action", "https://newphpecommercejona.herokuapp.com/app/AuthController.php");
    			add_location(form, file$k, 129, 36, 5043);
    			attr_dev(div20, "class", "p-2 mt-4");
    			add_location(div20, file$k, 128, 32, 4983);
    			attr_dev(div21, "class", "card-body p-4");
    			add_location(div21, file$k, 123, 28, 4634);
    			attr_dev(div22, "class", "card mt-4");
    			add_location(div22, file$k, 121, 24, 4579);
    			attr_dev(a1, "href", "/");
    			attr_dev(a1, "class", "fw-semibold text-primary text-decoration-underline");
    			add_location(a1, file$k, 193, 66, 10350);
    			attr_dev(p2, "class", "mb-0");
    			add_location(p2, file$k, 193, 28, 10312);
    			attr_dev(div23, "class", "mt-4 text-center");
    			add_location(div23, file$k, 192, 24, 10252);
    			attr_dev(div24, "class", "col-md-8 col-lg-6 col-xl-5");
    			add_location(div24, file$k, 120, 20, 4513);
    			attr_dev(div25, "class", "row justify-content-center");
    			add_location(div25, file$k, 119, 16, 4451);
    			attr_dev(div26, "class", "container");
    			add_location(div26, file$k, 104, 12, 3749);
    			attr_dev(i1, "class", "mdi mdi-heart text-danger");
    			add_location(i1, file$k, 209, 48, 11014);
    			attr_dev(p3, "class", "mb-0 text-muted");
    			add_location(p3, file$k, 208, 32, 10931);
    			attr_dev(div27, "class", "text-center");
    			add_location(div27, file$k, 207, 28, 10872);
    			attr_dev(div28, "class", "col-lg-12");
    			add_location(div28, file$k, 206, 24, 10819);
    			attr_dev(div29, "class", "row");
    			add_location(div29, file$k, 205, 20, 10776);
    			attr_dev(div30, "class", "container");
    			add_location(div30, file$k, 204, 16, 10731);
    			attr_dev(footer, "class", "footer");
    			add_location(footer, file$k, 203, 12, 10690);
    			attr_dev(div31, "class", "auth-page-content");
    			add_location(div31, file$k, 103, 8, 3704);
    			attr_dev(div32, "class", "auth-page-wrapper pt-5");
    			add_location(div32, file$k, 90, 4, 3114);
    			add_location(main, file$k, 89, 0, 3086);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, script0);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, script1);
    			append_dev(document.head, script2);
    			append_dev(document.head, script3);
    			append_dev(document.head, script4);
    			append_dev(document.head, script5);
    			append_dev(document.head, script6);
    			append_dev(document.head, script7);
    			append_dev(document.head, script8);
    			append_dev(document.head, script9);
    			append_dev(document.head, script10);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div32);
    			append_dev(div32, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path);
    			append_dev(div32, t3);
    			append_dev(div32, div31);
    			append_dev(div31, div26);
    			append_dev(div26, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, a0);
    			append_dev(a0, img);
    			append_dev(div4, t4);
    			append_dev(div4, p0);
    			append_dev(div26, t6);
    			append_dev(div26, div25);
    			append_dev(div25, div24);
    			append_dev(div24, div22);
    			append_dev(div22, div21);
    			append_dev(div21, div7);
    			append_dev(div7, h5);
    			append_dev(div7, t8);
    			append_dev(div7, p1);
    			append_dev(div21, t10);
    			append_dev(div21, div20);
    			append_dev(div20, form);
    			append_dev(form, div9);
    			append_dev(div9, label0);
    			append_dev(label0, t11);
    			append_dev(label0, span0);
    			append_dev(div9, t13);
    			append_dev(div9, input0);
    			set_input_value(input0, /*dataUsuario*/ ctx[0].name);
    			append_dev(div9, t14);
    			append_dev(div9, div8);
    			append_dev(form, t16);
    			append_dev(form, div11);
    			append_dev(div11, label1);
    			append_dev(label1, t17);
    			append_dev(label1, span1);
    			append_dev(div11, t19);
    			append_dev(div11, input1);
    			set_input_value(input1, /*dataUsuario*/ ctx[0].lastname);
    			append_dev(div11, t20);
    			append_dev(div11, div10);
    			append_dev(form, t22);
    			append_dev(form, div13);
    			append_dev(div13, label2);
    			append_dev(label2, t23);
    			append_dev(label2, span2);
    			append_dev(div13, t25);
    			append_dev(div13, input2);
    			set_input_value(input2, /*dataUsuario*/ ctx[0].email);
    			append_dev(div13, t26);
    			append_dev(div13, div12);
    			append_dev(form, t28);
    			append_dev(form, div15);
    			append_dev(div15, label3);
    			append_dev(label3, t29);
    			append_dev(label3, span3);
    			append_dev(div15, t31);
    			append_dev(div15, input3);
    			set_input_value(input3, /*dataUsuario*/ ctx[0].phone);
    			append_dev(div15, t32);
    			append_dev(div15, div14);
    			append_dev(form, t34);
    			append_dev(form, div17);
    			append_dev(div17, label4);
    			append_dev(div17, t36);
    			append_dev(div17, div16);
    			append_dev(div16, input4);
    			set_input_value(input4, /*dataUsuario*/ ctx[0].password);
    			append_dev(div16, t37);
    			append_dev(div16, button0);
    			append_dev(button0, i0);
    			append_dev(form, t38);
    			append_dev(form, div18);
    			append_dev(div18, input5);
    			append_dev(form, t39);
    			append_dev(form, div19);
    			append_dev(div19, button1);
    			append_dev(form, t41);
    			append_dev(form, input6);
    			append_dev(div24, t42);
    			append_dev(div24, div23);
    			append_dev(div23, p2);
    			append_dev(p2, t43);
    			append_dev(p2, a1);
    			append_dev(div31, t45);
    			append_dev(div31, footer);
    			append_dev(footer, div30);
    			append_dev(div30, div29);
    			append_dev(div29, div28);
    			append_dev(div28, div27);
    			append_dev(div27, p3);
    			append_dev(p3, t46);
    			append_dev(p3, i1);
    			append_dev(p3, t47);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[1]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[2]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[3]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[4]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[5])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dataUsuario*/ 1 && input0.value !== /*dataUsuario*/ ctx[0].name) {
    				set_input_value(input0, /*dataUsuario*/ ctx[0].name);
    			}

    			if (dirty & /*dataUsuario*/ 1 && input1.value !== /*dataUsuario*/ ctx[0].lastname) {
    				set_input_value(input1, /*dataUsuario*/ ctx[0].lastname);
    			}

    			if (dirty & /*dataUsuario*/ 1 && input2.value !== /*dataUsuario*/ ctx[0].email) {
    				set_input_value(input2, /*dataUsuario*/ ctx[0].email);
    			}

    			if (dirty & /*dataUsuario*/ 1) {
    				set_input_value(input3, /*dataUsuario*/ ctx[0].phone);
    			}

    			if (dirty & /*dataUsuario*/ 1 && input4.value !== /*dataUsuario*/ ctx[0].password) {
    				set_input_value(input4, /*dataUsuario*/ ctx[0].password);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!main_transition) main_transition = create_bidirectional_transition(main, fade, {}, true);
    				main_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!main_transition) main_transition = create_bidirectional_transition(main, fade, {}, false);
    			main_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(script0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(script1);
    			detach_dev(script2);
    			detach_dev(script3);
    			detach_dev(script4);
    			detach_dev(script5);
    			detach_dev(script6);
    			detach_dev(script7);
    			detach_dev(script8);
    			detach_dev(script9);
    			detach_dev(script10);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(main);
    			if (detaching && main_transition) main_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('RegisterUser', slots, []);

    	let dataUsuario = {
    		name: "",
    		lastname: "",
    		email: "",
    		phone: "",
    		password: ""
    	};

    	function registerUser() {
    		let bodyForm = new FormData();
    		bodyForm.append('action', 'create');
    		bodyForm.append('name', dataUsuario.name);
    		bodyForm.append('lastname', dataUsuario.lastname);
    		bodyForm.append('email', dataUsuario.email);
    		bodyForm.append('phone_number', dataUsuario.phone);
    		bodyForm.append('password', dataUsuario.password);

    		axios.post('https://newphpecommercejona.herokuapp.com/app/AuthController.php', bodyForm).then(function (response) {
    			if (response.data) {
    				console.log(response.data);
    			} else {
    				console.log(response); // location.href = '/' // Redireccion a login
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<RegisterUser> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		dataUsuario.name = this.value;
    		$$invalidate(0, dataUsuario);
    	}

    	function input1_input_handler() {
    		dataUsuario.lastname = this.value;
    		$$invalidate(0, dataUsuario);
    	}

    	function input2_input_handler() {
    		dataUsuario.email = this.value;
    		$$invalidate(0, dataUsuario);
    	}

    	function input3_input_handler() {
    		dataUsuario.phone = this.value;
    		$$invalidate(0, dataUsuario);
    	}

    	function input4_input_handler() {
    		dataUsuario.password = this.value;
    		$$invalidate(0, dataUsuario);
    	}

    	$$self.$capture_state = () => ({ axios, fade, dataUsuario, registerUser });

    	$$self.$inject_state = $$props => {
    		if ('dataUsuario' in $$props) $$invalidate(0, dataUsuario = $$props.dataUsuario);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dataUsuario,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler
    	];
    }

    class RegisterUser extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RegisterUser",
    			options,
    			id: create_fragment$k.name
    		});
    	}
    }

    /* src\views\Users.svelte generated by Svelte v3.52.0 */
    const file$j = "src\\views\\Users.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (608:0) {:catch error}
    function create_catch_block_1$a(ctx) {
    	const block = {
    		c: noop$1,
    		m: noop$1,
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: noop$1
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$a.name,
    		type: "catch",
    		source: "(608:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (164:0) {:then data}
    function create_then_block$a(ctx) {
    	let main;
    	let div42;
    	let headerapp;
    	let t0;
    	let div0;
    	let sidebar;
    	let t1;
    	let div1;
    	let t2;
    	let div23;
    	let div22;
    	let div21;
    	let div5;
    	let div4;
    	let div3;
    	let h40;
    	let t4;
    	let div2;
    	let ol;
    	let li0;
    	let a;
    	let t6;
    	let li1;
    	let t8;
    	let div20;
    	let div19;
    	let div18;
    	let div6;
    	let h41;
    	let t10;
    	let div17;
    	let div16;
    	let div12;
    	let div8;
    	let div7;
    	let button0;
    	let i0;
    	let t11;
    	let t12;
    	let div11;
    	let div10;
    	let div9;
    	let input0;
    	let t13;
    	let i1;
    	let t14;
    	let div13;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t16;
    	let th1;
    	let t18;
    	let th2;
    	let t20;
    	let th3;
    	let t22;
    	let th4;
    	let t24;
    	let tbody;
    	let tbody_transition;
    	let t25;
    	let div15;
    	let div14;
    	let lord_icon;
    	let lord_icon_src_value;
    	let t26;
    	let h50;
    	let t28;
    	let p;
    	let t30;
    	let button1;
    	let i2;
    	let t31;
    	let div40;
    	let div39;
    	let div38;
    	let div24;
    	let h51;
    	let t33;
    	let button2;
    	let t34;
    	let form;
    	let div35;
    	let div29;
    	let label0;
    	let t36;
    	let div28;
    	let div27;
    	let div26;
    	let img;
    	let img_src_value;
    	let t37;
    	let div25;
    	let input1;
    	let t38;
    	let label1;
    	let span;
    	let i3;
    	let t39;
    	let div30;
    	let label2;
    	let t41;
    	let input2;
    	let t42;
    	let div31;
    	let label3;
    	let t44;
    	let input3;
    	let t45;
    	let div32;
    	let label4;
    	let t47;
    	let input4;
    	let t48;
    	let div33;
    	let label5;
    	let t50;
    	let input5;
    	let t51;
    	let div34;
    	let label6;
    	let t53;
    	let input6;
    	let t54;
    	let div37;
    	let div36;
    	let button3;
    	let t56;
    	let button4;
    	let t58;
    	let input7;
    	let t59;
    	let div41;
    	let script0;
    	let script0_src_value;
    	let t60;
    	let script1;
    	let script1_src_value;
    	let t61;
    	let script2;
    	let script2_src_value;
    	let t62;
    	let script3;
    	let script3_src_value;
    	let t63;
    	let script4;
    	let script4_src_value;
    	let t64;
    	let script5;
    	let script5_src_value;
    	let t65;
    	let script6;
    	let script6_src_value;
    	let t66;
    	let script7;
    	let script7_src_value;
    	let t67;
    	let script8;
    	let script8_src_value;
    	let t68;
    	let script9;
    	let script9_src_value;
    	let t69;
    	let script10;
    	let script10_src_value;
    	let t70;
    	let script11;
    	let script11_src_value;
    	let current;
    	let mounted;
    	let dispose;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[9] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block_1$a,
    		then: create_then_block_1$a,
    		catch: create_catch_block$a,
    		value: 9
    	};

    	handle_promise(/*allUsers*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div42 = element("div");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div23 = element("div");
    			div22 = element("div");
    			div21 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			h40 = element("h4");
    			h40.textContent = "Usuarios";
    			t4 = space();
    			div2 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a = element("a");
    			a.textContent = "Home";
    			t6 = space();
    			li1 = element("li");
    			li1.textContent = "Usuarios";
    			t8 = space();
    			div20 = element("div");
    			div19 = element("div");
    			div18 = element("div");
    			div6 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Lista Usuarios";
    			t10 = space();
    			div17 = element("div");
    			div16 = element("div");
    			div12 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t11 = text(" Añadir Usuario");
    			t12 = space();
    			div11 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			input0 = element("input");
    			t13 = space();
    			i1 = element("i");
    			t14 = space();
    			div13 = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Foto";
    			t16 = space();
    			th1 = element("th");
    			th1.textContent = "Nombre";
    			t18 = space();
    			th2 = element("th");
    			th2.textContent = "Apellido";
    			t20 = space();
    			th3 = element("th");
    			th3.textContent = "Correo";
    			t22 = space();
    			th4 = element("th");
    			th4.textContent = "Acción";
    			t24 = space();
    			tbody = element("tbody");
    			info.block.c();
    			t25 = space();
    			div15 = element("div");
    			div14 = element("div");
    			lord_icon = element("lord-icon");
    			t26 = space();
    			h50 = element("h5");
    			h50.textContent = "Lo sentimos! No se\r\n                                                        encontraron resultados";
    			t28 = space();
    			p = element("p");
    			p.textContent = "Hemos buscado en todos\r\n                                                        los Usuarios. No\r\n                                                        encontramos ningún\r\n                                                        usuario para su\r\n                                                        búsqueda.";
    			t30 = space();
    			button1 = element("button");
    			i2 = element("i");
    			t31 = space();
    			div40 = element("div");
    			div39 = element("div");
    			div38 = element("div");
    			div24 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Añadir Nuevo Usuario";
    			t33 = space();
    			button2 = element("button");
    			t34 = space();
    			form = element("form");
    			div35 = element("div");
    			div29 = element("div");
    			label0 = element("label");
    			label0.textContent = "Foto";
    			t36 = space();
    			div28 = element("div");
    			div27 = element("div");
    			div26 = element("div");
    			img = element("img");
    			t37 = space();
    			div25 = element("div");
    			input1 = element("input");
    			t38 = space();
    			label1 = element("label");
    			span = element("span");
    			i3 = element("i");
    			t39 = space();
    			div30 = element("div");
    			label2 = element("label");
    			label2.textContent = "Nombre";
    			t41 = space();
    			input2 = element("input");
    			t42 = space();
    			div31 = element("div");
    			label3 = element("label");
    			label3.textContent = "Apellido";
    			t44 = space();
    			input3 = element("input");
    			t45 = space();
    			div32 = element("div");
    			label4 = element("label");
    			label4.textContent = "Correo";
    			t47 = space();
    			input4 = element("input");
    			t48 = space();
    			div33 = element("div");
    			label5 = element("label");
    			label5.textContent = "Teléfono";
    			t50 = space();
    			input5 = element("input");
    			t51 = space();
    			div34 = element("div");
    			label6 = element("label");
    			label6.textContent = "Contraseña";
    			t53 = space();
    			input6 = element("input");
    			t54 = space();
    			div37 = element("div");
    			div36 = element("div");
    			button3 = element("button");
    			button3.textContent = "Cerrar";
    			t56 = space();
    			button4 = element("button");
    			button4.textContent = "Añadir Usuario";
    			t58 = space();
    			input7 = element("input");
    			t59 = space();
    			div41 = element("div");
    			script0 = element("script");
    			t60 = space();
    			script1 = element("script");
    			t61 = space();
    			script2 = element("script");
    			t62 = space();
    			script3 = element("script");
    			t63 = space();
    			script4 = element("script");
    			t64 = space();
    			script5 = element("script");
    			t65 = space();
    			script6 = element("script");
    			t66 = space();
    			script7 = element("script");
    			t67 = space();
    			script8 = element("script");
    			t68 = space();
    			script9 = element("script");
    			t69 = space();
    			script10 = element("script");
    			t70 = space();
    			script11 = element("script");
    			attr_dev(div0, "class", "app-menu navbar-menu");
    			add_location(div0, file$j, 170, 12, 5338);
    			attr_dev(div1, "class", "vertical-overlay");
    			add_location(div1, file$j, 176, 12, 5543);
    			attr_dev(h40, "class", "mb-sm-0");
    			add_location(h40, file$j, 190, 36, 6297);
    			attr_dev(a, "href", "#!");
    			add_location(a, file$j, 195, 48, 6593);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$j, 194, 44, 6515);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$j, 197, 44, 6711);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$j, 193, 40, 6442);
    			attr_dev(div2, "class", "page-title-right");
    			add_location(div2, file$j, 192, 36, 6370);
    			attr_dev(div3, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div3, file$j, 187, 32, 6107);
    			attr_dev(div4, "class", "col-12");
    			add_location(div4, file$j, 186, 28, 6053);
    			attr_dev(div5, "class", "row");
    			add_location(div5, file$j, 185, 24, 6006);
    			attr_dev(h41, "class", "card-title mb-0");
    			add_location(h41, file$j, 211, 40, 7358);
    			attr_dev(div6, "class", "card-header");
    			add_location(div6, file$j, 210, 36, 7291);
    			attr_dev(i0, "class", "ri-add-line align-bottom me-1");
    			add_location(i0, file$j, 228, 61, 8485);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-success add-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "id", "create-btn");
    			attr_dev(button0, "data-bs-target", "#showModalAñadir");
    			add_location(button0, file$j, 222, 56, 7991);
    			add_location(div7, file$j, 221, 52, 7928);
    			attr_dev(div8, "class", "col-sm-auto");
    			add_location(div8, file$j, 220, 48, 7849);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "class", "form-control search");
    			attr_dev(input0, "placeholder", "Buscar Usuarios...");
    			add_location(input0, file$j, 241, 60, 9398);
    			attr_dev(i1, "class", "ri-search-line search-icon");
    			add_location(i1, file$j, 246, 60, 9798);
    			attr_dev(div9, "class", "search-box ms-2");
    			add_location(div9, file$j, 238, 56, 9188);
    			attr_dev(div10, "class", "d-flex justify-content-sm-end");
    			add_location(div10, file$j, 235, 52, 8976);
    			attr_dev(div11, "class", "col-sm");
    			add_location(div11, file$j, 234, 48, 8902);
    			attr_dev(div12, "class", "row g-4 mb-3");
    			add_location(div12, file$j, 219, 44, 7773);
    			add_location(th0, file$j, 263, 60, 10867);
    			add_location(th1, file$j, 264, 60, 10942);
    			add_location(th2, file$j, 265, 60, 11019);
    			add_location(th3, file$j, 266, 60, 11098);
    			add_location(th4, file$j, 267, 60, 11175);
    			add_location(tr, file$j, 262, 56, 10801);
    			attr_dev(thead, "class", "table-light");
    			add_location(thead, file$j, 261, 52, 10716);
    			attr_dev(tbody, "class", "list form-check-all");
    			add_location(tbody, file$j, 271, 52, 11371);
    			attr_dev(table, "class", "table align-middle table-nowrap");
    			attr_dev(table, "id", "customerTable");
    			add_location(table, file$j, 257, 48, 10440);
    			attr_dev(div13, "class", "table-responsive table-card mt-3 mb-1");
    			add_location(div13, file$j, 254, 44, 10244);
    			if (!src_url_equal(lord_icon.src, lord_icon_src_value = "https://cdn.lordicon.com/msoeawqm.json")) set_custom_element_data(lord_icon, "src", lord_icon_src_value);
    			set_custom_element_data(lord_icon, "trigger", "loop");
    			set_custom_element_data(lord_icon, "colors", "primary:#121331,secondary:#08a88a");
    			set_style(lord_icon, "width", "75px");
    			set_style(lord_icon, "height", "75px");
    			add_location(lord_icon, file$j, 352, 52, 18009);
    			attr_dev(h50, "class", "mt-2");
    			add_location(h50, file$j, 358, 52, 18491);
    			attr_dev(p, "class", "text-muted mb-0");
    			add_location(p, file$j, 362, 52, 18777);
    			attr_dev(div14, "class", "text-center");
    			add_location(div14, file$j, 351, 48, 17930);
    			attr_dev(div15, "class", "noresult");
    			set_style(div15, "display", "none");
    			add_location(div15, file$j, 347, 44, 17692);
    			attr_dev(i2, "class", "ri-arrow-up-line");
    			add_location(i2, file$j, 378, 48, 19782);
    			attr_dev(button1, "onclick", "topFunction()");
    			attr_dev(button1, "class", "btn btn-danger btn-icon");
    			attr_dev(button1, "id", "back-to-top");
    			add_location(button1, file$j, 373, 44, 19458);
    			attr_dev(div16, "id", "customerList");
    			add_location(div16, file$j, 218, 40, 7704);
    			attr_dev(div17, "class", "card-body");
    			add_location(div17, file$j, 217, 36, 7639);
    			attr_dev(div18, "class", "card");
    			add_location(div18, file$j, 209, 32, 7235);
    			attr_dev(div19, "class", "col-lg-12");
    			add_location(div19, file$j, 208, 28, 7178);
    			attr_dev(div20, "class", "row");
    			add_location(div20, file$j, 207, 24, 7131);
    			attr_dev(div21, "class", "container-fluid");
    			add_location(div21, file$j, 183, 20, 5900);
    			attr_dev(div22, "class", "page-content");
    			add_location(div22, file$j, 182, 16, 5852);
    			attr_dev(div23, "class", "main-content");
    			add_location(div23, file$j, 181, 12, 5808);
    			attr_dev(h51, "class", "modal-title");
    			attr_dev(h51, "id", "exampleModalLabel");
    			add_location(h51, file$j, 408, 28, 21002);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn-close");
    			attr_dev(button2, "data-bs-dismiss", "modal");
    			attr_dev(button2, "aria-label", "Close");
    			attr_dev(button2, "id", "close-modal");
    			add_location(button2, file$j, 411, 28, 21168);
    			attr_dev(div24, "class", "modal-header bg-light p-3");
    			add_location(div24, file$j, 407, 24, 20933);
    			attr_dev(label0, "for", "foto-field");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$j, 426, 36, 21903);
    			if (!src_url_equal(img.src, img_src_value = "http://localhost:8080/images/users/avatar-1.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "rounded-circle avatar-xl img-thumbnail user-profile-image shadow");
    			attr_dev(img, "alt", "user-profile");
    			add_location(img, file$j, 435, 48, 22436);
    			attr_dev(input1, "id", "profile-img-file-input");
    			attr_dev(input1, "type", "file");
    			attr_dev(input1, "name", "cover");
    			attr_dev(input1, "class", "profile-img-file-input");
    			add_location(input1, file$j, 443, 52, 23066);
    			attr_dev(i3, "class", "ri-camera-fill");
    			add_location(i3, file$j, 456, 60, 24042);
    			attr_dev(span, "class", "avatar-title rounded-circle bg-light text-body shadow");
    			add_location(span, file$j, 453, 56, 23793);
    			attr_dev(label1, "for", "profile-img-file-input");
    			attr_dev(label1, "class", "profile-photo-edit avatar-xs");
    			add_location(label1, file$j, 449, 52, 23494);
    			attr_dev(div25, "class", "avatar-xs p-0 rounded-circle profile-photo-edit");
    			add_location(div25, file$j, 440, 48, 22848);
    			attr_dev(div26, "class", "profile-user position-relative d-inline-block mx-auto mb-4");
    			add_location(div26, file$j, 432, 44, 22218);
    			attr_dev(div27, "class", "text-center");
    			add_location(div27, file$j, 431, 40, 22147);
    			attr_dev(div28, "class", "card-body p-4");
    			add_location(div28, file$j, 430, 36, 22078);
    			attr_dev(div29, "class", "mb-3");
    			add_location(div29, file$j, 425, 32, 21847);
    			attr_dev(label2, "for", "name-field");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$j, 467, 36, 24653);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "id", "name-field");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "placeholder", "Ingresar Nombre");
    			input2.required = true;
    			attr_dev(input2, "name", "name");
    			add_location(input2, file$j, 470, 36, 24828);
    			attr_dev(div30, "class", "mb-3");
    			add_location(div30, file$j, 466, 32, 24597);
    			attr_dev(label3, "for", "lastname-field");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$j, 480, 36, 25350);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "id", "lastname-field");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "placeholder", "Ingresar Apellido");
    			input3.required = true;
    			attr_dev(input3, "name", "lastname");
    			add_location(input3, file$j, 484, 36, 25571);
    			attr_dev(div31, "class", "mb-3");
    			add_location(div31, file$j, 479, 32, 25294);
    			attr_dev(label4, "for", "email-field");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$j, 495, 36, 26105);
    			attr_dev(input4, "type", "email");
    			attr_dev(input4, "id", "email-field");
    			attr_dev(input4, "class", "form-control");
    			attr_dev(input4, "placeholder", "Ingresar Correo");
    			input4.required = true;
    			attr_dev(input4, "name", "email");
    			add_location(input4, file$j, 498, 36, 26281);
    			attr_dev(div32, "class", "mb-3");
    			add_location(div32, file$j, 494, 32, 26049);
    			attr_dev(label5, "for", "phone-field");
    			attr_dev(label5, "class", "form-label");
    			add_location(label5, file$j, 509, 36, 26808);
    			attr_dev(input5, "type", "text");
    			attr_dev(input5, "id", "phone-field");
    			attr_dev(input5, "class", "form-control");
    			attr_dev(input5, "placeholder", "Ingresar Número de Teléfono");
    			input5.required = true;
    			attr_dev(input5, "name", "phone_number");
    			add_location(input5, file$j, 512, 36, 26986);
    			attr_dev(div33, "class", "mb-3");
    			add_location(div33, file$j, 508, 32, 26752);
    			attr_dev(label6, "for", "password-field");
    			attr_dev(label6, "class", "form-label");
    			add_location(label6, file$j, 523, 36, 27531);
    			attr_dev(input6, "type", "password");
    			attr_dev(input6, "id", "password-field");
    			attr_dev(input6, "class", "form-control");
    			attr_dev(input6, "placeholder", "Ingresar Contraseña");
    			input6.required = true;
    			attr_dev(input6, "name", "password");
    			add_location(input6, file$j, 527, 36, 27754);
    			attr_dev(div34, "class", "mb-3");
    			add_location(div34, file$j, 522, 32, 27475);
    			attr_dev(div35, "class", "modal-body");
    			add_location(div35, file$j, 424, 28, 21789);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "btn btn-light");
    			attr_dev(button3, "data-bs-dismiss", "modal");
    			add_location(button3, file$j, 539, 36, 28412);
    			attr_dev(button4, "type", "sumbit");
    			attr_dev(button4, "class", "btn btn-success");
    			attr_dev(button4, "id", "edit-btn");
    			add_location(button4, file$j, 544, 36, 28694);
    			attr_dev(div36, "class", "hstack gap-2 justify-content-end");
    			add_location(div36, file$j, 538, 32, 28328);
    			attr_dev(div37, "class", "modal-footer");
    			add_location(div37, file$j, 537, 28, 28268);
    			attr_dev(input7, "type", "hidden");
    			attr_dev(input7, "name", "action");
    			input7.value = "create";
    			add_location(input7, file$j, 552, 28, 29110);
    			attr_dev(form, "enctype", "multipart/form-data");
    			attr_dev(form, "method", "POST");
    			attr_dev(form, "action", "https://newphpecommercejona.herokuapp.com/app/AuthController.php");
    			add_location(form, file$j, 419, 24, 21522);
    			attr_dev(div38, "class", "modal-content");
    			add_location(div38, file$j, 406, 20, 20880);
    			attr_dev(div39, "class", "modal-dialog modal-dialog-centered");
    			add_location(div39, file$j, 405, 16, 20810);
    			attr_dev(div40, "class", "modal fade");
    			attr_dev(div40, "id", "showModalAñadir");
    			attr_dev(div40, "tabindex", "-1");
    			attr_dev(div40, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div40, "aria-hidden", "true");
    			add_location(div40, file$j, 398, 12, 20579);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$j, 565, 16, 29561);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$j, 568, 16, 29705);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$j, 571, 16, 29839);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$j, 574, 16, 29970);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$j, 577, 16, 30106);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$j, 580, 16, 30244);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/prismjs/prism.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$j, 582, 16, 30362);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/list.js/list.min.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$j, 585, 16, 30486);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/libs/list.pagination.js/list.pagination.min.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$j, 588, 16, 30613);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/listjs.init.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$j, 593, 16, 30802);
    			if (!src_url_equal(script10.src, script10_src_value = "http://localhost:8080/libs/sweetalert2/sweetalert2.min.js")) attr_dev(script10, "src", script10_src_value);
    			add_location(script10, file$j, 598, 16, 30972);
    			if (!src_url_equal(script11.src, script11_src_value = "http://localhost:8080/js/app.js")) attr_dev(script11, "src", script11_src_value);
    			add_location(script11, file$j, 603, 16, 31145);
    			add_location(div41, file$j, 560, 12, 29321);
    			attr_dev(div42, "id", "layout-wrapper");
    			add_location(div42, file$j, 166, 8, 5210);
    			add_location(main, file$j, 164, 4, 5165);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div42);
    			mount_component(headerapp, div42, null);
    			append_dev(div42, t0);
    			append_dev(div42, div0);
    			mount_component(sidebar, div0, null);
    			append_dev(div42, t1);
    			append_dev(div42, div1);
    			append_dev(div42, t2);
    			append_dev(div42, div23);
    			append_dev(div23, div22);
    			append_dev(div22, div21);
    			append_dev(div21, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h40);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a);
    			append_dev(ol, t6);
    			append_dev(ol, li1);
    			append_dev(div21, t8);
    			append_dev(div21, div20);
    			append_dev(div20, div19);
    			append_dev(div19, div18);
    			append_dev(div18, div6);
    			append_dev(div6, h41);
    			append_dev(div18, t10);
    			append_dev(div18, div17);
    			append_dev(div17, div16);
    			append_dev(div16, div12);
    			append_dev(div12, div8);
    			append_dev(div8, div7);
    			append_dev(div7, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t11);
    			append_dev(div12, t12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, input0);
    			append_dev(div9, t13);
    			append_dev(div9, i1);
    			append_dev(div16, t14);
    			append_dev(div16, div13);
    			append_dev(div13, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t16);
    			append_dev(tr, th1);
    			append_dev(tr, t18);
    			append_dev(tr, th2);
    			append_dev(tr, t20);
    			append_dev(tr, th3);
    			append_dev(tr, t22);
    			append_dev(tr, th4);
    			append_dev(table, t24);
    			append_dev(table, tbody);
    			info.block.m(tbody, info.anchor = null);
    			info.mount = () => tbody;
    			info.anchor = null;
    			append_dev(div16, t25);
    			append_dev(div16, div15);
    			append_dev(div15, div14);
    			append_dev(div14, lord_icon);
    			append_dev(div14, t26);
    			append_dev(div14, h50);
    			append_dev(div14, t28);
    			append_dev(div14, p);
    			append_dev(div16, t30);
    			append_dev(div16, button1);
    			append_dev(button1, i2);
    			append_dev(div42, t31);
    			append_dev(div42, div40);
    			append_dev(div40, div39);
    			append_dev(div39, div38);
    			append_dev(div38, div24);
    			append_dev(div24, h51);
    			append_dev(div24, t33);
    			append_dev(div24, button2);
    			append_dev(div38, t34);
    			append_dev(div38, form);
    			append_dev(form, div35);
    			append_dev(div35, div29);
    			append_dev(div29, label0);
    			append_dev(div29, t36);
    			append_dev(div29, div28);
    			append_dev(div28, div27);
    			append_dev(div27, div26);
    			append_dev(div26, img);
    			append_dev(div26, t37);
    			append_dev(div26, div25);
    			append_dev(div25, input1);
    			append_dev(div25, t38);
    			append_dev(div25, label1);
    			append_dev(label1, span);
    			append_dev(span, i3);
    			append_dev(div35, t39);
    			append_dev(div35, div30);
    			append_dev(div30, label2);
    			append_dev(div30, t41);
    			append_dev(div30, input2);
    			append_dev(div35, t42);
    			append_dev(div35, div31);
    			append_dev(div31, label3);
    			append_dev(div31, t44);
    			append_dev(div31, input3);
    			append_dev(div35, t45);
    			append_dev(div35, div32);
    			append_dev(div32, label4);
    			append_dev(div32, t47);
    			append_dev(div32, input4);
    			append_dev(div35, t48);
    			append_dev(div35, div33);
    			append_dev(div33, label5);
    			append_dev(div33, t50);
    			append_dev(div33, input5);
    			append_dev(div35, t51);
    			append_dev(div35, div34);
    			append_dev(div34, label6);
    			append_dev(div34, t53);
    			append_dev(div34, input6);
    			append_dev(form, t54);
    			append_dev(form, div37);
    			append_dev(div37, div36);
    			append_dev(div36, button3);
    			append_dev(div36, t56);
    			append_dev(div36, button4);
    			append_dev(form, t58);
    			append_dev(form, input7);
    			append_dev(div42, t59);
    			append_dev(div42, div41);
    			append_dev(div41, script0);
    			append_dev(div41, t60);
    			append_dev(div41, script1);
    			append_dev(div41, t61);
    			append_dev(div41, script2);
    			append_dev(div41, t62);
    			append_dev(div41, script3);
    			append_dev(div41, t63);
    			append_dev(div41, script4);
    			append_dev(div41, t64);
    			append_dev(div41, script5);
    			append_dev(div41, t65);
    			append_dev(div41, script6);
    			append_dev(div41, t66);
    			append_dev(div41, script7);
    			append_dev(div41, t67);
    			append_dev(div41, script8);
    			append_dev(div41, t68);
    			append_dev(div41, script9);
    			append_dev(div41, t69);
    			append_dev(div41, script10);
    			append_dev(div41, t70);
    			append_dev(div41, script11);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button4, "click", /*newUserReload*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);

    			add_render_callback(() => {
    				if (!tbody_transition) tbody_transition = create_bidirectional_transition(tbody, fade, {}, true);
    				tbody_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			if (!tbody_transition) tbody_transition = create_bidirectional_transition(tbody, fade, {}, false);
    			tbody_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    			if (detaching && tbody_transition) tbody_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$a.name,
    		type: "then",
    		source: "(164:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (1:0) //verificado  <script>      // Components      import HeaderApp from '../components/HeaderApp.svelte';      import Sidebar from '../components/Sidebar.svelte';        import Swal from 'sweetalert2';        // Transiciones      import { fly }
    function create_catch_block$a(ctx) {
    	const block = { c: noop$1, m: noop$1, p: noop$1, d: noop$1 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$a.name,
    		type: "catch",
    		source: "(1:0) //verificado  <script>      // Components      import HeaderApp from '../components/HeaderApp.svelte';      import Sidebar from '../components/Sidebar.svelte';        import Swal from 'sweetalert2';        // Transiciones      import { fly }",
    		ctx
    	});

    	return block;
    }

    // (278:56) {:then data}
    function create_then_block_1$a(ctx) {
    	let each_1_anchor;
    	let each_value = /*data*/ ctx[9];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*deleteUser, allUsers*/ 10) {
    				each_value = /*data*/ ctx[9];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$a.name,
    		type: "then",
    		source: "(278:56) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (279:60) {#each data as dataUsers}
    function create_each_block$9(ctx) {
    	let tr;
    	let td0;
    	let img;
    	let img_src_value;
    	let t0;
    	let td1;
    	let t1_value = /*dataUsers*/ ctx[10].name + "";
    	let t1;
    	let t2;
    	let td2;
    	let t3_value = /*dataUsers*/ ctx[10].lastname + "";
    	let t3;
    	let t4;
    	let td3;
    	let t5_value = /*dataUsers*/ ctx[10].email + "";
    	let t5;
    	let t6;
    	let td4;
    	let div3;
    	let div0;
    	let a0;
    	let t7;
    	let t8;
    	let div1;
    	let a1;
    	let t9;
    	let t10;
    	let div2;
    	let button;
    	let t12;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*dataUsers*/ ctx[10]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			img = element("img");
    			t0 = space();
    			td1 = element("td");
    			t1 = text(t1_value);
    			t2 = space();
    			td2 = element("td");
    			t3 = text(t3_value);
    			t4 = space();
    			td3 = element("td");
    			t5 = text(t5_value);
    			t6 = space();
    			td4 = element("td");
    			div3 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			t7 = text("Ver\r\n                                                                                    Detalles");
    			t8 = space();
    			div1 = element("div");
    			a1 = element("a");
    			t9 = text("Editar");
    			t10 = space();
    			div2 = element("div");
    			button = element("button");
    			button.textContent = "Borrar";
    			t12 = space();
    			attr_dev(img, "class", "image avatar-xs rounded-circle shadow");
    			attr_dev(img, "alt", "");
    			if (!src_url_equal(img.src, img_src_value = /*dataUsers*/ ctx[10].avatar)) attr_dev(img, "src", img_src_value);
    			add_location(img, file$j, 283, 72, 12278);
    			attr_dev(td0, "class", "Avatar");
    			add_location(td0, file$j, 280, 68, 12042);
    			attr_dev(td1, "class", "user_name");
    			add_location(td1, file$j, 290, 68, 12812);
    			attr_dev(td2, "class", "lastnmae");
    			add_location(td2, file$j, 294, 68, 13142);
    			attr_dev(td3, "class", "email");
    			add_location(td3, file$j, 298, 68, 13475);
    			attr_dev(a0, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(a0, "href", "/users/" + /*dataUsers*/ ctx[10].id);
    			add_location(a0, file$j, 310, 80, 14396);
    			attr_dev(div0, "class", "edit");
    			add_location(div0, file$j, 307, 76, 14137);
    			attr_dev(a1, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(a1, "href", "/users/settings/" + /*dataUsers*/ ctx[10].id);
    			add_location(a1, file$j, 320, 80, 15333);
    			attr_dev(div1, "class", "edit");
    			add_location(div1, file$j, 317, 76, 15074);
    			attr_dev(button, "class", "btn btn-sm btn-danger remove-item-btn");
    			add_location(button, file$j, 330, 80, 16292);
    			attr_dev(div2, "class", "remove");
    			attr_dev(div2, "id", "removeItemModal");
    			add_location(div2, file$j, 326, 76, 15929);
    			attr_dev(div3, "class", "d-flex gap-2");
    			add_location(div3, file$j, 304, 72, 13882);
    			add_location(td4, file$j, 303, 68, 13804);
    			add_location(tr, file$j, 279, 64, 11968);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, img);
    			append_dev(tr, t0);
    			append_dev(tr, td1);
    			append_dev(td1, t1);
    			append_dev(tr, t2);
    			append_dev(tr, td2);
    			append_dev(td2, t3);
    			append_dev(tr, t4);
    			append_dev(tr, td3);
    			append_dev(td3, t5);
    			append_dev(tr, t6);
    			append_dev(tr, td4);
    			append_dev(td4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, a0);
    			append_dev(a0, t7);
    			append_dev(div3, t8);
    			append_dev(div3, div1);
    			append_dev(div1, a1);
    			append_dev(a1, t9);
    			append_dev(div3, t10);
    			append_dev(div3, div2);
    			append_dev(div2, button);
    			append_dev(tr, t12);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", prevent_default(click_handler), false, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(279:60) {#each data as dataUsers}",
    		ctx
    	});

    	return block;
    }

    // (276:75)                                                               Loading users...                                                          {:then data}
    function create_pending_block_1$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading users...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$a.name,
    		type: "pending",
    		source: "(276:75)                                                               Loading users...                                                          {:then data}",
    		ctx
    	});

    	return block;
    }

    // (162:28)       Loading Header...  {:then data}
    function create_pending_block$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading Header...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$a.name,
    		type: "pending",
    		source: "(162:28)       Loading Header...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let t0;
    	let link0;
    	let link1;
    	let script;
    	let script_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t1;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$a,
    		then: create_then_block$a,
    		catch: create_catch_block_1$a,
    		value: 9,
    		error: 13,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[0](), info);

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			link0 = element("link");
    			link1 = element("link");
    			script = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t1 = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Usuarios";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$j, 124, 4, 4121);
    			attr_dev(link1, "href", "http://localhost:8080/libs/sweetalert2/sweetalert2.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$j, 127, 4, 4234);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$j, 134, 4, 4412);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$j, 136, 4, 4504);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$j, 142, 4, 4658);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$j, 148, 4, 4805);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$j, 154, 4, 4953);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(5, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Users', slots, []);
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = '/';
    	}

    	var myHeaders = new Headers();
    	myHeaders.append('Authorization', `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	var requestOptions = {
    		method: 'GET',
    		headers: myHeaders,
    		redirect: 'follow'
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	async function allUsers() {
    		const res = await fetch('https://crud.jonathansoto.mx/api/users', requestOptions);
    		const dataUsers = await res.json();
    		return dataUsers.data;
    	}

    	function newUserReload() {
    		setTimeout(
    			() => {
    				sweetalert2_all.fire({
    					title: 'Recargara ventana',
    					text: 'Se recargara la pagina para ver tu nuevos cambios :)',
    					icon: 'info',
    					showCancelButton: false,
    					confirmButtonText: 'Aceptar'
    				}).then(result => {
    					if (result.value) {
    						location.reload();
    					}
    				});
    			},
    			2000
    		);
    	}

    	async function deleteUser(idUser) {
    		const swalWithBootstrapButtons = sweetalert2_all.mixin({
    			customClass: {
    				confirmButton: 'btn btn-success',
    				cancelButton: 'btn btn-danger'
    			},
    			buttonsStyling: false
    		});

    		let requestOptionsDelete = {
    			method: 'DELETE',
    			headers: myHeaders,
    			redirect: 'follow'
    		};

    		swalWithBootstrapButtons.fire({
    			title: 'Seguro que quieres eliminar el usuario?',
    			text: 'No podras revertir los cambios',
    			icon: 'warning',
    			showCancelButton: true,
    			confirmButtonText: 'Si, eliminalo!',
    			cancelButtonText: 'No, cancelar!',
    			reverseButtons: true
    		}).then(async result => {
    			if (result.isConfirmed) {
    				const res = await fetch(`https://crud.jonathansoto.mx/api/users/${idUser}`, requestOptionsDelete);
    				const data = await res.json();

    				if (data.code > 0) {
    					location.reload();
    					swalWithBootstrapButtons.fire('Eliminado!', 'El usuario ha sido eliminado.', 'success');
    				}
    			} else if (result.dismiss === sweetalert2_all.DismissReason.cancel) {
    				swalWithBootstrapButtons.fire('Cancelado', 'Tu usuario esta a salvo :)', 'error');
    			}
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Users> was created with unknown prop '${key}'`);
    	});

    	const click_handler = dataUsers => deleteUser(dataUsers.id);

    	$$self.$capture_state = () => ({
    		HeaderApp,
    		Sidebar,
    		Swal: sweetalert2_all,
    		fly,
    		fade,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		allUsers,
    		newUserReload,
    		deleteUser,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getDataUserLoggin, allUsers, newUserReload, deleteUser, click_handler];
    }

    class Users extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Users",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    /* src\views\UserDetails.svelte generated by Svelte v3.52.0 */
    const file$i = "src\\views\\UserDetails.svelte";

    // (357:0) {:catch error}
    function create_catch_block_1$9(ctx) {
    	const block = {
    		c: noop$1,
    		m: noop$1,
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: noop$1
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$9.name,
    		type: "catch",
    		source: "(357:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (85:0) {:then data}
    function create_then_block$9(ctx) {
    	let main;
    	let div4;
    	let header;
    	let div0;
    	let headerapp;
    	let t0;
    	let div1;
    	let sidebar;
    	let t1;
    	let div2;
    	let t2;
    	let t3;
    	let div3;
    	let script0;
    	let script0_src_value;
    	let t4;
    	let script1;
    	let script1_src_value;
    	let t5;
    	let script2;
    	let script2_src_value;
    	let t6;
    	let script3;
    	let script3_src_value;
    	let t7;
    	let script4;
    	let script4_src_value;
    	let t8;
    	let script5;
    	let script5_src_value;
    	let t9;
    	let script6;
    	let script6_src_value;
    	let t10;
    	let script7;
    	let script7_src_value;
    	let t11;
    	let script8;
    	let script8_src_value;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[7] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$9,
    		then: create_then_block_1$9,
    		catch: create_catch_block$9,
    		value: 7,
    		error: 8
    	};

    	handle_promise(/*getDataUserSelected*/ ctx[0](), info);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div4 = element("div");
    			header = element("header");
    			div0 = element("div");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			info.block.c();
    			t3 = space();
    			div3 = element("div");
    			script0 = element("script");
    			t4 = space();
    			script1 = element("script");
    			t5 = space();
    			script2 = element("script");
    			t6 = space();
    			script3 = element("script");
    			t7 = space();
    			script4 = element("script");
    			t8 = space();
    			script5 = element("script");
    			t9 = space();
    			script6 = element("script");
    			t10 = space();
    			script7 = element("script");
    			t11 = space();
    			script8 = element("script");
    			attr_dev(div0, "class", "layout-width");
    			add_location(div0, file$i, 89, 16, 2539);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$i, 88, 12, 2496);
    			attr_dev(div1, "class", "app-menu navbar-menu");
    			add_location(div1, file$i, 95, 12, 2723);
    			attr_dev(div2, "class", "vertical-overlay");
    			add_location(div2, file$i, 100, 12, 2902);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$i, 328, 16, 17780);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$i, 331, 16, 17924);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$i, 334, 16, 18058);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$i, 337, 16, 18189);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$i, 340, 16, 18325);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$i, 343, 16, 18463);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/particles.js/particles.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$i, 344, 16, 18540);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/js/pages/particles.app.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$i, 347, 16, 18673);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/pages/password-addon.init.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$i, 350, 16, 18801);
    			add_location(div3, file$i, 323, 12, 17575);
    			attr_dev(div4, "id", "layout-wrapper");
    			add_location(div4, file$i, 87, 8, 2457);
    			add_location(main, file$i, 85, 4, 2412);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div4);
    			append_dev(div4, header);
    			append_dev(header, div0);
    			mount_component(headerapp, div0, null);
    			append_dev(div4, t0);
    			append_dev(div4, div1);
    			mount_component(sidebar, div1, null);
    			append_dev(div4, t1);
    			append_dev(div4, div2);
    			append_dev(div4, t2);
    			info.block.m(div4, info.anchor = null);
    			info.mount = () => div4;
    			info.anchor = t3;
    			append_dev(div4, t3);
    			append_dev(div4, div3);
    			append_dev(div3, script0);
    			append_dev(div3, t4);
    			append_dev(div3, script1);
    			append_dev(div3, t5);
    			append_dev(div3, script2);
    			append_dev(div3, t6);
    			append_dev(div3, script3);
    			append_dev(div3, t7);
    			append_dev(div3, script4);
    			append_dev(div3, t8);
    			append_dev(div3, script5);
    			append_dev(div3, t9);
    			append_dev(div3, script6);
    			append_dev(div3, t10);
    			append_dev(div3, script7);
    			append_dev(div3, t11);
    			append_dev(div3, script8);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$9.name,
    		type: "then",
    		source: "(85:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (318:12) {:catch error}
    function create_catch_block$9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Error en datos");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$9.name,
    		type: "catch",
    		source: "(318:12) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (108:12) {:then data}
    function create_then_block_1$9(ctx) {
    	let div27;
    	let div26;
    	let div25;
    	let div3;
    	let div2;
    	let div1;
    	let h4;
    	let t1;
    	let div0;
    	let ol;
    	let li0;
    	let a0;
    	let t3;
    	let li1;
    	let t5;
    	let div5;
    	let div4;
    	let img0;
    	let img0_src_value;
    	let t6;
    	let div13;
    	let div8;
    	let div7;
    	let div6;
    	let img1;
    	let img1_src_value;
    	let t7;
    	let div12;
    	let div11;
    	let div10;
    	let h3;
    	let t8_value = /*data*/ ctx[7].name + "";
    	let t8;
    	let t9;
    	let t10_value = /*data*/ ctx[7].lastname + "";
    	let t10;
    	let t11;
    	let div9;
    	let t12;
    	let div24;
    	let div23;
    	let div22;
    	let div14;
    	let ul;
    	let li2;
    	let a1;
    	let i;
    	let t13;
    	let span;
    	let t15;
    	let div21;
    	let div20;
    	let div19;
    	let div18;
    	let div17;
    	let div16;
    	let h5;
    	let t17;
    	let div15;
    	let table;
    	let tbody;
    	let tr0;
    	let th0;
    	let t19;
    	let td0;
    	let t20_value = /*data*/ ctx[7].name + "";
    	let t20;
    	let t21;
    	let tr1;
    	let th1;
    	let t23;
    	let td1;
    	let t24_value = /*data*/ ctx[7].lastname + "";
    	let t24;
    	let t25;
    	let tr2;
    	let th2;
    	let t27;
    	let td2;
    	let t28_value = /*data*/ ctx[7].email + "";
    	let t28;
    	let t29;
    	let tr3;
    	let th3;
    	let t31;
    	let td3;
    	let t32_value = (/*data*/ ctx[7]?.phone_number ?? '') + "";
    	let t32;
    	let t33;
    	let tr4;
    	let th4;
    	let t35;
    	let td4;
    	let t36_value = /*data*/ ctx[7].role + "";
    	let t36;

    	const block = {
    		c: function create() {
    			div27 = element("div");
    			div26 = element("div");
    			div25 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Detalle de usuario";
    			t1 = space();
    			div0 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "Ecommerce";
    			t3 = space();
    			li1 = element("li");
    			li1.textContent = "Perfil";
    			t5 = space();
    			div5 = element("div");
    			div4 = element("div");
    			img0 = element("img");
    			t6 = space();
    			div13 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			div6 = element("div");
    			img1 = element("img");
    			t7 = space();
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			h3 = element("h3");
    			t8 = text(t8_value);
    			t9 = space();
    			t10 = text(t10_value);
    			t11 = space();
    			div9 = element("div");
    			t12 = space();
    			div24 = element("div");
    			div23 = element("div");
    			div22 = element("div");
    			div14 = element("div");
    			ul = element("ul");
    			li2 = element("li");
    			a1 = element("a");
    			i = element("i");
    			t13 = space();
    			span = element("span");
    			span.textContent = "Regresar";
    			t15 = space();
    			div21 = element("div");
    			div20 = element("div");
    			div19 = element("div");
    			div18 = element("div");
    			div17 = element("div");
    			div16 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Info Usuario";
    			t17 = space();
    			div15 = element("div");
    			table = element("table");
    			tbody = element("tbody");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Nombre\r\n                                                                                    :";
    			t19 = space();
    			td0 = element("td");
    			t20 = text(t20_value);
    			t21 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Apellido\r\n                                                                                    :";
    			t23 = space();
    			td1 = element("td");
    			t24 = text(t24_value);
    			t25 = space();
    			tr2 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Correo:";
    			t27 = space();
    			td2 = element("td");
    			t28 = text(t28_value);
    			t29 = space();
    			tr3 = element("tr");
    			th3 = element("th");
    			th3.textContent = "Teléfono\r\n                                                                                    :";
    			t31 = space();
    			td3 = element("td");
    			t32 = text(t32_value);
    			t33 = space();
    			tr4 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Rol:";
    			t35 = space();
    			td4 = element("td");
    			t36 = text(t36_value);
    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$i, 117, 40, 3811);
    			attr_dev(a0, "href", "#!");
    			add_location(a0, file$i, 122, 52, 4133);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$i, 121, 48, 4051);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$i, 124, 48, 4264);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$i, 120, 44, 3974);
    			attr_dev(div0, "class", "page-title-right");
    			add_location(div0, file$i, 119, 40, 3898);
    			attr_dev(div1, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div1, file$i, 114, 36, 3609);
    			attr_dev(div2, "class", "col-12");
    			add_location(div2, file$i, 113, 32, 3551);
    			attr_dev(div3, "class", "row");
    			add_location(div3, file$i, 112, 28, 3500);
    			if (!src_url_equal(img0.src, img0_src_value = /*data*/ ctx[7].avatar)) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", /*data*/ ctx[7].name & /*data*/ ctx[7].lastname);
    			attr_dev(img0, "class", "profile-wid-img");
    			add_location(img0, file$i, 140, 36, 5046);
    			attr_dev(div4, "class", "profile-wid-bg");
    			add_location(div4, file$i, 139, 32, 4980);
    			attr_dev(div5, "class", "profile-foreground position-relative mx-n4 mt-n4");
    			add_location(div5, file$i, 136, 28, 4821);
    			if (!src_url_equal(img1.src, img1_src_value = /*data*/ ctx[7].avatar)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", /*data*/ ctx[7].name & /*data*/ ctx[7].lastname);
    			attr_dev(img1, "class", "img-thumbnail rounded-circle");
    			set_style(img1, "width", "112px");
    			set_style(img1, "height", "100%");
    			add_location(img1, file$i, 154, 44, 5809);
    			attr_dev(div6, "class", "avatar-lg");
    			set_style(div6, "margin", "0 auto");
    			add_location(div6, file$i, 150, 40, 5584);
    			attr_dev(div7, "class", "col");
    			add_location(div7, file$i, 149, 36, 5525);
    			attr_dev(div8, "class", "row g-4");
    			add_location(div8, file$i, 148, 32, 5466);
    			attr_dev(h3, "class", "text-white mb-1");
    			set_style(h3, "text-align", "center");
    			add_location(h3, file$i, 168, 44, 6628);
    			attr_dev(div9, "class", "hstack text-white-50 gap-1");
    			add_location(div9, file$i, 176, 44, 7053);
    			attr_dev(div10, "class", "p-2");
    			add_location(div10, file$i, 167, 40, 6565);
    			attr_dev(div11, "class", "col");
    			add_location(div11, file$i, 166, 36, 6506);
    			attr_dev(div12, "class", "row g-4");
    			add_location(div12, file$i, 164, 32, 6395);
    			attr_dev(div13, "class", "pt-5 mb-4 mb-lg-3 pb-lg-4");
    			add_location(div13, file$i, 147, 28, 5393);
    			attr_dev(i, "class", "ri-airplay-fill d-inline-block d-md-none");
    			add_location(i, file$i, 199, 56, 8361);
    			attr_dev(span, "class", "d-none d-md-inline-block");
    			add_location(span, file$i, 202, 56, 8591);
    			attr_dev(a1, "class", "nav-link fs-14 active");
    			attr_dev(a1, "href", "/users");
    			add_location(a1, file$i, 195, 52, 8088);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$i, 194, 48, 8013);
    			attr_dev(ul, "class", "nav nav-pills animation-nav profile-nav gap-2 gap-lg-3 flex-grow-1");
    			attr_dev(ul, "role", "tablist");
    			add_location(ul, file$i, 190, 44, 7725);
    			attr_dev(div14, "class", "d-flex");
    			add_location(div14, file$i, 188, 40, 7596);
    			attr_dev(h5, "class", "card-title mb-3");
    			add_location(h5, file$i, 225, 64, 10069);
    			attr_dev(th0, "class", "ps-0");
    			attr_dev(th0, "scope", "row");
    			add_location(th0, file$i, 238, 80, 11117);
    			attr_dev(td0, "class", "text-muted");
    			add_location(td0, file$i, 244, 80, 11664);
    			add_location(tr0, file$i, 237, 76, 11031);
    			attr_dev(th1, "class", "ps-0");
    			attr_dev(th1, "scope", "row");
    			add_location(th1, file$i, 250, 80, 12203);
    			attr_dev(td1, "class", "text-muted");
    			add_location(td1, file$i, 256, 80, 12752);
    			add_location(tr1, file$i, 249, 76, 12117);
    			attr_dev(th2, "class", "ps-0");
    			attr_dev(th2, "scope", "row");
    			add_location(th2, file$i, 262, 80, 13295);
    			attr_dev(td2, "class", "text-muted");
    			add_location(td2, file$i, 267, 80, 13756);
    			add_location(tr2, file$i, 261, 76, 13209);
    			attr_dev(th3, "class", "ps-0");
    			attr_dev(th3, "scope", "row");
    			add_location(th3, file$i, 273, 80, 14296);
    			attr_dev(td3, "class", "text-muted");
    			add_location(td3, file$i, 279, 80, 14845);
    			add_location(tr3, file$i, 272, 76, 14210);
    			attr_dev(th4, "class", "ps-0");
    			attr_dev(th4, "scope", "row");
    			add_location(th4, file$i, 286, 80, 15488);
    			attr_dev(td4, "class", "text-muted");
    			add_location(td4, file$i, 291, 80, 15946);
    			add_location(tr4, file$i, 285, 76, 15402);
    			add_location(tbody, file$i, 236, 72, 10946);
    			attr_dev(table, "class", "table table-borderless mb-0");
    			add_location(table, file$i, 233, 68, 10686);
    			attr_dev(div15, "class", "table-responsive");
    			add_location(div15, file$i, 230, 64, 10451);
    			attr_dev(div16, "class", "card-body");
    			add_location(div16, file$i, 222, 60, 9853);
    			attr_dev(div17, "class", "card");
    			add_location(div17, file$i, 221, 56, 9773);
    			attr_dev(div18, "class", "col-xxl-12");
    			add_location(div18, file$i, 220, 52, 9691);
    			attr_dev(div19, "class", "row");
    			add_location(div19, file$i, 219, 48, 9620);
    			attr_dev(div20, "class", "tab-pane active");
    			attr_dev(div20, "id", "overview-tab");
    			attr_dev(div20, "role", "tabpanel");
    			add_location(div20, file$i, 214, 44, 9314);
    			attr_dev(div21, "class", "tab-content pt-4 text-muted");
    			add_location(div21, file$i, 211, 40, 9140);
    			add_location(div22, file$i, 187, 36, 7549);
    			attr_dev(div23, "class", "col-lg-12");
    			add_location(div23, file$i, 186, 32, 7488);
    			attr_dev(div24, "class", "row");
    			add_location(div24, file$i, 185, 28, 7437);
    			attr_dev(div25, "class", "container-fluid");
    			add_location(div25, file$i, 110, 24, 3386);
    			attr_dev(div26, "class", "page-content");
    			add_location(div26, file$i, 109, 20, 3334);
    			attr_dev(div27, "class", "main-content");
    			add_location(div27, file$i, 108, 16, 3286);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div27, anchor);
    			append_dev(div27, div26);
    			append_dev(div26, div25);
    			append_dev(div25, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h4);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a0);
    			append_dev(ol, t3);
    			append_dev(ol, li1);
    			append_dev(div25, t5);
    			append_dev(div25, div5);
    			append_dev(div5, div4);
    			append_dev(div4, img0);
    			append_dev(div25, t6);
    			append_dev(div25, div13);
    			append_dev(div13, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			append_dev(div6, img1);
    			append_dev(div13, t7);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, h3);
    			append_dev(h3, t8);
    			append_dev(h3, t9);
    			append_dev(h3, t10);
    			append_dev(div10, t11);
    			append_dev(div10, div9);
    			append_dev(div25, t12);
    			append_dev(div25, div24);
    			append_dev(div24, div23);
    			append_dev(div23, div22);
    			append_dev(div22, div14);
    			append_dev(div14, ul);
    			append_dev(ul, li2);
    			append_dev(li2, a1);
    			append_dev(a1, i);
    			append_dev(a1, t13);
    			append_dev(a1, span);
    			append_dev(div22, t15);
    			append_dev(div22, div21);
    			append_dev(div21, div20);
    			append_dev(div20, div19);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, div16);
    			append_dev(div16, h5);
    			append_dev(div16, t17);
    			append_dev(div16, div15);
    			append_dev(div15, table);
    			append_dev(table, tbody);
    			append_dev(tbody, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t19);
    			append_dev(tr0, td0);
    			append_dev(td0, t20);
    			append_dev(tbody, t21);
    			append_dev(tbody, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t23);
    			append_dev(tr1, td1);
    			append_dev(td1, t24);
    			append_dev(tbody, t25);
    			append_dev(tbody, tr2);
    			append_dev(tr2, th2);
    			append_dev(tr2, t27);
    			append_dev(tr2, td2);
    			append_dev(td2, t28);
    			append_dev(tbody, t29);
    			append_dev(tbody, tr3);
    			append_dev(tr3, th3);
    			append_dev(tr3, t31);
    			append_dev(tr3, td3);
    			append_dev(td3, t32);
    			append_dev(tbody, t33);
    			append_dev(tbody, tr4);
    			append_dev(tr4, th4);
    			append_dev(tr4, t35);
    			append_dev(tr4, td4);
    			append_dev(td4, t36);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div27);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$9.name,
    		type: "then",
    		source: "(108:12) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (106:42)                   <!-- promise is pending -->              {:then data}
    function create_pending_block_1$9(ctx) {
    	const block = { c: noop$1, m: noop$1, p: noop$1, d: noop$1 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$9.name,
    		type: "pending",
    		source: "(106:42)                   <!-- promise is pending -->              {:then data}",
    		ctx
    	});

    	return block;
    }

    // (83:28)       Loading...  {:then data}
    function create_pending_block$9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$9.name,
    		type: "pending",
    		source: "(83:28)       Loading...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let t0;
    	let svelte;
    	let title;
    	let t2;
    	let script;
    	let script_src_value;
    	let t3;
    	let link0;
    	let t4;
    	let link1;
    	let t5;
    	let link2;
    	let t6;
    	let link3;
    	let t7;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$9,
    		then: create_then_block$9,
    		catch: create_catch_block_1$9,
    		value: 7,
    		error: 8,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			svelte = element("svelte");
    			title = element("title");
    			title.textContent = "DevEcommerce | Perfil";
    			t2 = space();
    			script = element("script");
    			t3 = space();
    			link0 = element("link");
    			t4 = space();
    			link1 = element("link");
    			t5 = space();
    			link2 = element("link");
    			t6 = space();
    			link3 = element("link");
    			t7 = space();
    			await_block_anchor = empty();
    			info.block.c();
    			add_location(title, file$i, 49, 4, 1445);
    			script.defer = true;
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$i, 55, 4, 1665);
    			attr_dev(link0, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link0, "rel", "stylesheet");
    			attr_dev(link0, "type", "text/css");
    			add_location(link0, file$i, 57, 4, 1763);
    			attr_dev(link1, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$i, 63, 4, 1917);
    			attr_dev(link2, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$i, 69, 4, 2064);
    			attr_dev(link3, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$i, 75, 4, 2212);
    			add_location(svelte, file$i, 48, 0, 1431);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, svelte, anchor);
    			append_dev(svelte, title);
    			append_dev(svelte, t2);
    			append_dev(svelte, script);
    			append_dev(svelte, t3);
    			append_dev(svelte, link0);
    			append_dev(svelte, t4);
    			append_dev(svelte, link1);
    			append_dev(svelte, t5);
    			append_dev(svelte, link2);
    			append_dev(svelte, t6);
    			append_dev(svelte, link3);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(svelte);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(3, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserDetails', slots, []);
    	let { id } = $$props;
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = '/';
    	}

    	var myHeaders = new Headers();
    	myHeaders.append('Authorization', `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	var requestOptions = {
    		method: 'GET',
    		headers: myHeaders,
    		redirect: 'follow'
    	};

    	async function getDataUserSelected() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${id}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	$$self.$$.on_mount.push(function () {
    		if (id === undefined && !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])) {
    			console.warn("<UserDetails> was created without expected prop 'id'");
    		}
    	});

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserDetails> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		id,
    		Sidebar,
    		HeaderApp,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserSelected,
    		getDataUserLoggin,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getDataUserSelected, getDataUserLoggin, id];
    }

    class UserDetails extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { id: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserDetails",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get id() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\views\UserSettings.svelte generated by Svelte v3.52.0 */

    const { console: console_1$4 } = globals;
    const file$h = "src\\views\\UserSettings.svelte";

    // (531:0) {:catch error}
    function create_catch_block_1$8(ctx) {
    	let t0;
    	let t1_value = /*error*/ ctx[20] + "";
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text("Error al cargar datos: ");
    			t1 = text(t1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$8.name,
    		type: "catch",
    		source: "(531:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (171:0) {:then data}
    function create_then_block$8(ctx) {
    	let main;
    	let div41;
    	let t0;
    	let div0;
    	let sidebar;
    	let t1;
    	let div1;
    	let t2;
    	let div40;
    	let div39;
    	let div38;
    	let div5;
    	let div4;
    	let div3;
    	let h4;
    	let t4;
    	let div2;
    	let ol;
    	let li0;
    	let a0;
    	let t6;
    	let li1;
    	let t8;
    	let div10;
    	let div9;
    	let img0;
    	let img0_src_value;
    	let t9;
    	let div8;
    	let div7;
    	let div6;
    	let t10;
    	let div37;
    	let div16;
    	let div15;
    	let div14;
    	let form;
    	let div13;
    	let div12;
    	let img1;
    	let img1_src_value;
    	let t11;
    	let div11;
    	let input0;
    	let t12;
    	let label0;
    	let span;
    	let i0;
    	let t13;
    	let t14;
    	let h5;
    	let t15_value = /*datosUsuarioToEdit*/ ctx[0].name + "";
    	let t15;
    	let t16;
    	let t17_value = /*datosUsuarioToEdit*/ ctx[0].lastname + "";
    	let t17;
    	let t18;
    	let input1;
    	let input1_value_value;
    	let t19;
    	let input2;
    	let t20;
    	let div36;
    	let div35;
    	let div17;
    	let ul;
    	let li2;
    	let a1;
    	let i1;
    	let t21;
    	let t22;
    	let div34;
    	let div33;
    	let div32;
    	let div31;
    	let div19;
    	let div18;
    	let label1;
    	let t24;
    	let input3;
    	let t25;
    	let div21;
    	let div20;
    	let label2;
    	let t27;
    	let input4;
    	let t28;
    	let div23;
    	let div22;
    	let label3;
    	let t30;
    	let input5;
    	let t31;
    	let div25;
    	let div24;
    	let label4;
    	let t33;
    	let input6;
    	let t34;
    	let div28;
    	let div27;
    	let div26;
    	let input7;
    	let t35;
    	let label5;
    	let t37;
    	let t38;
    	let div30;
    	let div29;
    	let button;
    	let t40;
    	let div42;
    	let script0;
    	let script0_src_value;
    	let t41;
    	let script1;
    	let script1_src_value;
    	let t42;
    	let script2;
    	let script2_src_value;
    	let t43;
    	let script3;
    	let script3_src_value;
    	let t44;
    	let script4;
    	let script4_src_value;
    	let t45;
    	let script5;
    	let script5_src_value;
    	let t46;
    	let script6;
    	let script6_src_value;
    	let t47;
    	let script7;
    	let script7_src_value;
    	let t48;
    	let script8;
    	let script8_src_value;
    	let current;
    	let mounted;
    	let dispose;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$8,
    		then: create_then_block_1$8,
    		catch: create_catch_block$8,
    		value: 19,
    		error: 20,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[3](), info);
    	sidebar = new Sidebar({ $$inline: true });
    	let if_block0 = /*btnEditPicture*/ ctx[2] && create_if_block_1$2(ctx);
    	let if_block1 = /*visible*/ ctx[1] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div41 = element("div");
    			info.block.c();
    			t0 = space();
    			div0 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div40 = element("div");
    			div39 = element("div");
    			div38 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Editar Perfil";
    			t4 = space();
    			div2 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "Home";
    			t6 = space();
    			li1 = element("li");
    			li1.textContent = "Editar Perfil";
    			t8 = space();
    			div10 = element("div");
    			div9 = element("div");
    			img0 = element("img");
    			t9 = space();
    			div8 = element("div");
    			div7 = element("div");
    			div6 = element("div");
    			t10 = space();
    			div37 = element("div");
    			div16 = element("div");
    			div15 = element("div");
    			div14 = element("div");
    			form = element("form");
    			div13 = element("div");
    			div12 = element("div");
    			img1 = element("img");
    			t11 = space();
    			div11 = element("div");
    			input0 = element("input");
    			t12 = space();
    			label0 = element("label");
    			span = element("span");
    			i0 = element("i");
    			t13 = space();
    			if (if_block0) if_block0.c();
    			t14 = space();
    			h5 = element("h5");
    			t15 = text(t15_value);
    			t16 = space();
    			t17 = text(t17_value);
    			t18 = space();
    			input1 = element("input");
    			t19 = space();
    			input2 = element("input");
    			t20 = space();
    			div36 = element("div");
    			div35 = element("div");
    			div17 = element("div");
    			ul = element("ul");
    			li2 = element("li");
    			a1 = element("a");
    			i1 = element("i");
    			t21 = text("Detalles Personales");
    			t22 = space();
    			div34 = element("div");
    			div33 = element("div");
    			div32 = element("div");
    			div31 = element("div");
    			div19 = element("div");
    			div18 = element("div");
    			label1 = element("label");
    			label1.textContent = "Nombre";
    			t24 = space();
    			input3 = element("input");
    			t25 = space();
    			div21 = element("div");
    			div20 = element("div");
    			label2 = element("label");
    			label2.textContent = "Apellido";
    			t27 = space();
    			input4 = element("input");
    			t28 = space();
    			div23 = element("div");
    			div22 = element("div");
    			label3 = element("label");
    			label3.textContent = "Correo";
    			t30 = space();
    			input5 = element("input");
    			t31 = space();
    			div25 = element("div");
    			div24 = element("div");
    			label4 = element("label");
    			label4.textContent = "Teléfono";
    			t33 = space();
    			input6 = element("input");
    			t34 = space();
    			div28 = element("div");
    			div27 = element("div");
    			div26 = element("div");
    			input7 = element("input");
    			t35 = space();
    			label5 = element("label");
    			label5.textContent = "Cambiar\r\n                                                                    contraseña";
    			t37 = space();
    			if (if_block1) if_block1.c();
    			t38 = space();
    			div30 = element("div");
    			div29 = element("div");
    			button = element("button");
    			button.textContent = "Editar";
    			t40 = space();
    			div42 = element("div");
    			script0 = element("script");
    			t41 = space();
    			script1 = element("script");
    			t42 = space();
    			script2 = element("script");
    			t43 = space();
    			script3 = element("script");
    			t44 = space();
    			script4 = element("script");
    			t45 = space();
    			script5 = element("script");
    			t46 = space();
    			script6 = element("script");
    			t47 = space();
    			script7 = element("script");
    			t48 = space();
    			script8 = element("script");
    			attr_dev(div0, "class", "app-menu navbar-menu");
    			add_location(div0, file$h, 187, 12, 5845);
    			attr_dev(div1, "class", "vertical-overlay");
    			add_location(div1, file$h, 192, 12, 6019);
    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$h, 206, 36, 6773);
    			attr_dev(a0, "href", "/home");
    			add_location(a0, file$h, 211, 48, 7074);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$h, 210, 44, 6996);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$h, 213, 44, 7195);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$h, 209, 40, 6923);
    			attr_dev(div2, "class", "page-title-right");
    			add_location(div2, file$h, 208, 36, 6851);
    			attr_dev(div3, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div3, file$h, 203, 32, 6583);
    			attr_dev(div4, "class", "col-12");
    			add_location(div4, file$h, 202, 28, 6529);
    			attr_dev(div5, "class", "row");
    			add_location(div5, file$h, 201, 24, 6482);
    			if (!src_url_equal(img0.src, img0_src_value = "http://localhost:8080/images/profile-bg.jpg")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "class", "profile-wid-img");
    			attr_dev(img0, "alt", "");
    			add_location(img0, file$h, 224, 32, 7773);
    			attr_dev(div6, "class", "p-0 ms-auto rounded-circle profile-photo-edit");
    			add_location(div6, file$h, 231, 40, 8174);
    			attr_dev(div7, "class", "text-end p-3");
    			add_location(div7, file$h, 230, 36, 8106);
    			attr_dev(div8, "class", "overlay-content");
    			add_location(div8, file$h, 229, 32, 8039);
    			attr_dev(div9, "class", "profile-wid-bg profile-setting-img");
    			add_location(div9, file$h, 223, 28, 7691);
    			attr_dev(div10, "class", "position-relative mx-n4 mt-n4");
    			add_location(div10, file$h, 222, 24, 7618);
    			if (!src_url_equal(img1.src, img1_src_value = /*data*/ ctx[19].avatar)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "class", "rounded-circle avatar-xl img-thumbnail user-profile-image shadow");
    			attr_dev(img1, "alt", "user-profile");
    			add_location(img1, file$h, 252, 52, 9388);
    			attr_dev(input0, "id", "profile-img-file-input");
    			attr_dev(input0, "type", "file");
    			attr_dev(input0, "class", "profile-img-file-input");
    			attr_dev(input0, "name", "cover");
    			add_location(input0, file$h, 260, 56, 10014);
    			attr_dev(i0, "class", "ri-camera-fill");
    			add_location(i0, file$h, 274, 64, 11132);
    			attr_dev(span, "class", "avatar-title rounded-circle bg-light text-body shadow");
    			add_location(span, file$h, 271, 60, 10871);
    			attr_dev(label0, "for", "profile-img-file-input");
    			attr_dev(label0, "class", "profile-photo-edit avatar-xs");
    			add_location(label0, file$h, 267, 56, 10556);
    			attr_dev(div11, "class", "avatar-xs p-0 rounded-circle profile-photo-edit");
    			add_location(div11, file$h, 257, 52, 9784);
    			attr_dev(div12, "class", "profile-user position-relative d-inline-block mx-auto mb-4");
    			add_location(div12, file$h, 249, 48, 9158);
    			attr_dev(h5, "class", "fs-16 mb-1");
    			add_location(h5, file$h, 299, 48, 12887);
    			attr_dev(div13, "class", "text-center");
    			add_location(div13, file$h, 248, 44, 9083);
    			attr_dev(input1, "type", "hidden");
    			attr_dev(input1, "name", "id");
    			input1.value = input1_value_value = /*datosUsuarioToEdit*/ ctx[0].id;
    			add_location(input1, file$h, 304, 44, 13225);
    			attr_dev(input2, "type", "hidden");
    			attr_dev(input2, "name", "action");
    			input2.value = "updateAvatar";
    			add_location(input2, file$h, 309, 44, 13526);
    			attr_dev(form, "method", "post");
    			attr_dev(form, "action", "https://newphpecommercejona.herokuapp.com/app/UserController.php");
    			attr_dev(form, "enctype", "multipart/form-data");
    			add_location(form, file$h, 243, 40, 8736);
    			attr_dev(div14, "class", "card-body p-4");
    			add_location(div14, file$h, 242, 36, 8667);
    			attr_dev(div15, "class", "card mt-n5");
    			add_location(div15, file$h, 241, 32, 8605);
    			attr_dev(div16, "class", "col-xxl-3");
    			add_location(div16, file$h, 240, 28, 8548);
    			attr_dev(i1, "class", "fas fa-home");
    			add_location(i1, file$h, 333, 52, 14945);
    			attr_dev(a1, "class", "nav-link active");
    			attr_dev(a1, "data-bs-toggle", "tab");
    			attr_dev(a1, "href", "#personalDetails");
    			attr_dev(a1, "role", "tab");
    			add_location(a1, file$h, 327, 48, 14546);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$h, 326, 44, 14475);
    			attr_dev(ul, "class", "nav nav-tabs-custom rounded card-header-tabs border-bottom-0");
    			attr_dev(ul, "role", "tablist");
    			add_location(ul, file$h, 322, 40, 14209);
    			attr_dev(div17, "class", "card-header");
    			add_location(div17, file$h, 321, 36, 14142);
    			attr_dev(label1, "for", "nameInput");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$h, 351, 60, 16087);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "id", "nameInput");
    			attr_dev(input3, "name", "name");
    			attr_dev(input3, "placeholder", "Enter your firstname");
    			add_location(input3, file$h, 356, 60, 16463);
    			attr_dev(div18, "class", "mb-3");
    			add_location(div18, file$h, 350, 56, 16007);
    			attr_dev(div19, "class", "col-lg-6");
    			add_location(div19, file$h, 349, 52, 15927);
    			attr_dev(label2, "for", "lastnameInput");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$h, 369, 60, 17461);
    			attr_dev(input4, "type", "text");
    			attr_dev(input4, "class", "form-control");
    			attr_dev(input4, "id", "lastnameInput");
    			attr_dev(input4, "name", "lastname");
    			attr_dev(input4, "placeholder", "Enter your lastname");
    			add_location(input4, file$h, 374, 60, 17843);
    			attr_dev(div20, "class", "mb-3");
    			add_location(div20, file$h, 368, 56, 17381);
    			attr_dev(div21, "class", "col-lg-6");
    			add_location(div21, file$h, 367, 52, 17301);
    			attr_dev(label3, "for", "emailInput");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$h, 387, 60, 18852);
    			attr_dev(input5, "type", "email");
    			attr_dev(input5, "class", "form-control");
    			attr_dev(input5, "id", "emailInput");
    			attr_dev(input5, "name", "email");
    			attr_dev(input5, "placeholder", "Enter your email");
    			add_location(input5, file$h, 392, 60, 19229);
    			attr_dev(div22, "class", "mb-3");
    			add_location(div22, file$h, 386, 56, 18772);
    			attr_dev(div23, "class", "col-lg-6");
    			add_location(div23, file$h, 385, 52, 18692);
    			attr_dev(label4, "for", "phonenumberInput");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$h, 404, 60, 20159);
    			attr_dev(input6, "type", "text");
    			attr_dev(input6, "class", "form-control");
    			attr_dev(input6, "id", "phonenumberInput");
    			attr_dev(input6, "name", "phone_number");
    			attr_dev(input6, "placeholder", "Enter your phone number");
    			add_location(input6, file$h, 409, 60, 20544);
    			attr_dev(div24, "class", "mb-3");
    			add_location(div24, file$h, 403, 56, 20079);
    			attr_dev(div25, "class", "col-lg-6");
    			add_location(div25, file$h, 402, 52, 19999);
    			attr_dev(input7, "class", "form-check-input");
    			attr_dev(input7, "type", "checkbox");
    			input7.value = "";
    			attr_dev(input7, "id", "flexCheckDefault");
    			add_location(input7, file$h, 425, 64, 21779);
    			attr_dev(label5, "class", "form-check-label");
    			attr_dev(label5, "for", "flexCheckDefault");
    			add_location(label5, file$h, 432, 64, 22362);
    			attr_dev(div26, "class", "form-check");
    			add_location(div26, file$h, 422, 60, 21562);
    			attr_dev(div27, "class", "mb-3");
    			add_location(div27, file$h, 421, 56, 21482);
    			attr_dev(div28, "class", "col-lg-12");
    			add_location(div28, file$h, 420, 52, 21401);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "btn btn-primary");
    			add_location(button, file$h, 472, 60, 25280);
    			attr_dev(div29, "class", "hstack gap-2 justify-content-end");
    			add_location(div29, file$h, 469, 56, 25053);
    			attr_dev(div30, "class", "col-lg-12");
    			add_location(div30, file$h, 468, 52, 24972);
    			attr_dev(div31, "class", "row");
    			add_location(div31, file$h, 348, 48, 15856);
    			attr_dev(div32, "class", "tab-pane active");
    			attr_dev(div32, "id", "personalDetails");
    			attr_dev(div32, "role", "tabpanel");
    			add_location(div32, file$h, 342, 44, 15473);
    			attr_dev(div33, "class", "tab-content");
    			add_location(div33, file$h, 341, 40, 15402);
    			attr_dev(div34, "class", "card-body p-4");
    			add_location(div34, file$h, 340, 36, 15333);
    			attr_dev(div35, "class", "card mt-xxl-n5");
    			add_location(div35, file$h, 320, 32, 14076);
    			attr_dev(div36, "class", "col-xxl-9");
    			add_location(div36, file$h, 319, 28, 14019);
    			attr_dev(div37, "class", "row");
    			add_location(div37, file$h, 239, 24, 8501);
    			attr_dev(div38, "class", "container-fluid");
    			add_location(div38, file$h, 199, 20, 6376);
    			attr_dev(div39, "class", "page-content");
    			add_location(div39, file$h, 198, 16, 6328);
    			attr_dev(div40, "class", "main-content");
    			add_location(div40, file$h, 197, 12, 6284);
    			attr_dev(div41, "id", "layout-wrapper");
    			add_location(div41, file$h, 173, 8, 5388);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$h, 503, 12, 26834);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$h, 506, 12, 26966);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$h, 509, 12, 27088);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$h, 512, 12, 27207);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$h, 515, 12, 27331);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$h, 518, 12, 27457);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/particles.js/particles.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$h, 519, 12, 27530);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/js/pages/particles.app.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$h, 522, 12, 27651);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/pages/password-addon.init.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$h, 525, 12, 27767);
    			add_location(div42, file$h, 498, 8, 26645);
    			add_location(main, file$h, 171, 4, 5343);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div41);
    			info.block.m(div41, info.anchor = null);
    			info.mount = () => div41;
    			info.anchor = t0;
    			append_dev(div41, t0);
    			append_dev(div41, div0);
    			mount_component(sidebar, div0, null);
    			append_dev(div41, t1);
    			append_dev(div41, div1);
    			append_dev(div41, t2);
    			append_dev(div41, div40);
    			append_dev(div40, div39);
    			append_dev(div39, div38);
    			append_dev(div38, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h4);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a0);
    			append_dev(ol, t6);
    			append_dev(ol, li1);
    			append_dev(div38, t8);
    			append_dev(div38, div10);
    			append_dev(div10, div9);
    			append_dev(div9, img0);
    			append_dev(div9, t9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			append_dev(div38, t10);
    			append_dev(div38, div37);
    			append_dev(div37, div16);
    			append_dev(div16, div15);
    			append_dev(div15, div14);
    			append_dev(div14, form);
    			append_dev(form, div13);
    			append_dev(div13, div12);
    			append_dev(div12, img1);
    			append_dev(div12, t11);
    			append_dev(div12, div11);
    			append_dev(div11, input0);
    			append_dev(div11, t12);
    			append_dev(div11, label0);
    			append_dev(label0, span);
    			append_dev(span, i0);
    			append_dev(div13, t13);
    			if (if_block0) if_block0.m(div13, null);
    			append_dev(div13, t14);
    			append_dev(div13, h5);
    			append_dev(h5, t15);
    			append_dev(h5, t16);
    			append_dev(h5, t17);
    			append_dev(form, t18);
    			append_dev(form, input1);
    			append_dev(form, t19);
    			append_dev(form, input2);
    			append_dev(div37, t20);
    			append_dev(div37, div36);
    			append_dev(div36, div35);
    			append_dev(div35, div17);
    			append_dev(div17, ul);
    			append_dev(ul, li2);
    			append_dev(li2, a1);
    			append_dev(a1, i1);
    			append_dev(a1, t21);
    			append_dev(div35, t22);
    			append_dev(div35, div34);
    			append_dev(div34, div33);
    			append_dev(div33, div32);
    			append_dev(div32, div31);
    			append_dev(div31, div19);
    			append_dev(div19, div18);
    			append_dev(div18, label1);
    			append_dev(div18, t24);
    			append_dev(div18, input3);
    			set_input_value(input3, /*datosUsuarioToEdit*/ ctx[0].name);
    			append_dev(div31, t25);
    			append_dev(div31, div21);
    			append_dev(div21, div20);
    			append_dev(div20, label2);
    			append_dev(div20, t27);
    			append_dev(div20, input4);
    			set_input_value(input4, /*datosUsuarioToEdit*/ ctx[0].lastname);
    			append_dev(div31, t28);
    			append_dev(div31, div23);
    			append_dev(div23, div22);
    			append_dev(div22, label3);
    			append_dev(div22, t30);
    			append_dev(div22, input5);
    			set_input_value(input5, /*datosUsuarioToEdit*/ ctx[0].email);
    			append_dev(div31, t31);
    			append_dev(div31, div25);
    			append_dev(div25, div24);
    			append_dev(div24, label4);
    			append_dev(div24, t33);
    			append_dev(div24, input6);
    			set_input_value(input6, /*datosUsuarioToEdit*/ ctx[0].phone);
    			append_dev(div31, t34);
    			append_dev(div31, div28);
    			append_dev(div28, div27);
    			append_dev(div27, div26);
    			append_dev(div26, input7);
    			append_dev(div26, t35);
    			append_dev(div26, label5);
    			append_dev(div31, t37);
    			if (if_block1) if_block1.m(div31, null);
    			append_dev(div31, t38);
    			append_dev(div31, div30);
    			append_dev(div30, div29);
    			append_dev(div29, button);
    			append_dev(main, t40);
    			append_dev(main, div42);
    			append_dev(div42, script0);
    			append_dev(div42, t41);
    			append_dev(div42, script1);
    			append_dev(div42, t42);
    			append_dev(div42, script2);
    			append_dev(div42, t43);
    			append_dev(div42, script3);
    			append_dev(div42, t44);
    			append_dev(div42, script4);
    			append_dev(div42, t45);
    			append_dev(div42, script5);
    			append_dev(div42, t46);
    			append_dev(div42, script6);
    			append_dev(div42, t47);
    			append_dev(div42, script7);
    			append_dev(div42, t48);
    			append_dev(div42, script8);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "click", /*btnSendImage*/ ctx[6], { once: true }, false, false),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[10]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[11]),
    					listen_dev(input5, "input", /*input5_input_handler*/ ctx[12]),
    					listen_dev(input6, "input", /*input6_input_handler*/ ctx[13]),
    					listen_dev(input7, "click", /*toggleVissible*/ ctx[5], false, false, false),
    					listen_dev(button, "click", /*editUser*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);

    			if (/*btnEditPicture*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*btnEditPicture*/ 4) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div13, t14);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*datosUsuarioToEdit*/ 1) && t15_value !== (t15_value = /*datosUsuarioToEdit*/ ctx[0].name + "")) set_data_dev(t15, t15_value);
    			if ((!current || dirty & /*datosUsuarioToEdit*/ 1) && t17_value !== (t17_value = /*datosUsuarioToEdit*/ ctx[0].lastname + "")) set_data_dev(t17, t17_value);

    			if (!current || dirty & /*datosUsuarioToEdit*/ 1 && input1_value_value !== (input1_value_value = /*datosUsuarioToEdit*/ ctx[0].id)) {
    				prop_dev(input1, "value", input1_value_value);
    			}

    			if (dirty & /*datosUsuarioToEdit*/ 1 && input3.value !== /*datosUsuarioToEdit*/ ctx[0].name) {
    				set_input_value(input3, /*datosUsuarioToEdit*/ ctx[0].name);
    			}

    			if (dirty & /*datosUsuarioToEdit*/ 1 && input4.value !== /*datosUsuarioToEdit*/ ctx[0].lastname) {
    				set_input_value(input4, /*datosUsuarioToEdit*/ ctx[0].lastname);
    			}

    			if (dirty & /*datosUsuarioToEdit*/ 1 && input5.value !== /*datosUsuarioToEdit*/ ctx[0].email) {
    				set_input_value(input5, /*datosUsuarioToEdit*/ ctx[0].email);
    			}

    			if (dirty & /*datosUsuarioToEdit*/ 1 && input6.value !== /*datosUsuarioToEdit*/ ctx[0].phone) {
    				set_input_value(input6, /*datosUsuarioToEdit*/ ctx[0].phone);
    			}

    			if (/*visible*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*visible*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div31, t38);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			transition_in(sidebar.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			transition_out(sidebar.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			info.block.d();
    			info.token = null;
    			info = null;
    			destroy_component(sidebar);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$8.name,
    		type: "then",
    		source: "(171:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (183:12) {:catch error}
    function create_catch_block$8(ctx) {
    	let t_value = /*error*/ ctx[20] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$8.name,
    		type: "catch",
    		source: "(183:12) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (177:12) {:then data}
    function create_then_block_1$8(ctx) {
    	let header;
    	let div;
    	let headerapp;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[19] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			header = element("header");
    			div = element("div");
    			create_component(headerapp.$$.fragment);
    			attr_dev(div, "class", "layout-width");
    			add_location(div, file$h, 178, 20, 5574);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$h, 177, 16, 5527);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			append_dev(header, div);
    			mount_component(headerapp, div, null);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			destroy_component(headerapp);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$8.name,
    		type: "then",
    		source: "(177:12) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (175:40)                   Loading...              {:then data}
    function create_pending_block_1$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$8.name,
    		type: "pending",
    		source: "(175:40)                   Loading...              {:then data}",
    		ctx
    	});

    	return block;
    }

    // (282:48) {#if btnEditPicture}
    function create_if_block_1$2(ctx) {
    	let div1;
    	let div0;
    	let button;
    	let div1_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			button = element("button");
    			button.textContent = "Aceptar";
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "btn btn-success btn-profile");
    			add_location(button, file$h, 289, 60, 12169);
    			attr_dev(div0, "class", "hstack gap-2 justify-content-center mb-4");
    			add_location(div0, file$h, 286, 56, 11934);
    			attr_dev(div1, "class", "col-lg-12");
    			add_location(div1, file$h, 282, 52, 11669);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*sendToLogin*/ ctx[8], { once: true }, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_transition) div1_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(282:48) {#if btnEditPicture}",
    		ctx
    	});

    	return block;
    }

    // (444:52) {#if visible}
    function create_if_block$2(ctx) {
    	let div1;
    	let div0;
    	let label;
    	let t1;
    	let input;
    	let div1_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			label = element("label");
    			label.textContent = "Contraseña";
    			t1 = space();
    			input = element("input");
    			attr_dev(label, "for", "passwordInput");
    			attr_dev(label, "class", "form-label");
    			add_location(label, file$h, 449, 64, 23536);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "class", "form-control");
    			attr_dev(input, "data-provider", "flatpickr");
    			attr_dev(input, "id", "passwordInput");
    			attr_dev(input, "name", "password");
    			attr_dev(input, "placeholder", "Contraseña");
    			add_location(input, file$h, 454, 64, 23940);
    			attr_dev(div0, "class", "mb-3");
    			add_location(div0, file$h, 448, 60, 23452);
    			attr_dev(div1, "class", "col-lg-12");
    			add_location(div1, file$h, 444, 56, 23171);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, label);
    			append_dev(div0, t1);
    			append_dev(div0, input);
    			set_input_value(input, /*datosUsuarioToEdit*/ ctx[0].password);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[14]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*datosUsuarioToEdit*/ 1 && input.value !== /*datosUsuarioToEdit*/ ctx[0].password) {
    				set_input_value(input, /*datosUsuarioToEdit*/ ctx[0].password);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_transition) div1_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(444:52) {#if visible}",
    		ctx
    	});

    	return block;
    }

    // (169:30)       Loading...  {:then data}
    function create_pending_block$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$8.name,
    		type: "pending",
    		source: "(169:30)       Loading...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let t0;
    	let script;
    	let script_src_value;
    	let link0;
    	let link1;
    	let link2;
    	let link3;
    	let t1;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$8,
    		then: create_then_block$8,
    		catch: create_catch_block_1$8,
    		value: 19,
    		error: 20,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserSelected*/ ctx[4](), info);

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			script = element("script");
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			link3 = element("link");
    			t1 = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Editar Usuario";
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$h, 141, 4, 4595);
    			attr_dev(link0, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link0, "rel", "stylesheet");
    			attr_dev(link0, "type", "text/css");
    			add_location(link0, file$h, 143, 4, 4687);
    			attr_dev(link1, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$h, 149, 4, 4841);
    			attr_dev(link2, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$h, 155, 4, 4988);
    			attr_dev(link3, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$h, 161, 4, 5136);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, script);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(script);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			detach_dev(link3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(15, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserSettings', slots, []);
    	let { id } = $$props;
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = '/';
    	}

    	let datosUsuarioToEdit = {
    		action: 'updateUser',
    		id: 0,
    		name: '',
    		lastname: '',
    		email: '',
    		phone: '',
    		password: ''
    	};

    	var myHeaders = new Headers();
    	myHeaders.append('Authorization', `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	var requestOptions = {
    		method: 'GET',
    		headers: myHeaders,
    		redirect: 'follow'
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	async function getDataUserSelected() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${id}`, requestOptions);
    		const dataUser = await response.json();

    		// Se guarda la informacion del usuario a editar dentro de la clase temporal
    		$$invalidate(0, datosUsuarioToEdit.id = dataUser.data.id, datosUsuarioToEdit);

    		$$invalidate(0, datosUsuarioToEdit.name = dataUser.data.name, datosUsuarioToEdit);
    		$$invalidate(0, datosUsuarioToEdit.lastname = dataUser.data.lastname, datosUsuarioToEdit);
    		$$invalidate(0, datosUsuarioToEdit.email = dataUser.data.email, datosUsuarioToEdit);
    		$$invalidate(0, datosUsuarioToEdit.phone = dataUser.data.phone_number, datosUsuarioToEdit);
    		$$invalidate(0, datosUsuarioToEdit.password = dataUser.data.password, datosUsuarioToEdit);
    		console.log(dataUser.data);
    		return dataUser.data;
    	}

    	// Password hidden options
    	let visible = false;

    	function toggleVissible() {
    		$$invalidate(1, visible = !visible);
    	}

    	// ==========================
    	// Edit picture
    	let btnEditPicture = false;

    	function btnSendImage() {
    		$$invalidate(2, btnEditPicture = true);
    	}

    	async function editUser(e) {
    		e.preventDefault();
    		let bodyForm = new FormData();
    		bodyForm.append('action', datosUsuarioToEdit.action);
    		bodyForm.append('name', datosUsuarioToEdit.name);
    		bodyForm.append('lastname', datosUsuarioToEdit.lastname);
    		bodyForm.append('email', datosUsuarioToEdit.email);
    		bodyForm.append('phone_number', datosUsuarioToEdit.phone_number);
    		bodyForm.append('password', datosUsuarioToEdit.password);
    		bodyForm.append('id', datosUsuarioToEdit.id);
    		console.log(bodyForm);

    		axios.post('https://newphpecommercejona.herokuapp.com/app/UserController.php', bodyForm).then(function (response) {
    			if (response) {
    				sweetalert2_all.fire({
    					title: 'Recargara ventana',
    					text: 'Se recargara la pagina para ver tu nuevos cambios :)',
    					icon: 'info',
    					showCancelButton: false,
    					confirmButtonText: 'Aceptar'
    				}).then(result => {
    					if (result.value) {
    						location.reload();
    					}
    				});
    			} else {
    				console.log('Nel');
    			}
    		}).catch(resp => console.log(resp));
    	}

    	async function sendToLogin(e) {
    		e.preventDefault();

    		sweetalert2_all.fire({
    			title: 'Recargara ventana',
    			text: 'Se recargara la pagina para ver tu nueva foto de perfil :)',
    			icon: 'info',
    			showCancelButton: false,
    			confirmButtonText: 'Aceptar'
    		}).then(result => {
    			if (result.value) {
    				location.reload();
    			}
    		});
    	}

    	$$self.$$.on_mount.push(function () {
    		if (id === undefined && !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])) {
    			console_1$4.warn("<UserSettings> was created without expected prop 'id'");
    		}
    	});

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<UserSettings> was created with unknown prop '${key}'`);
    	});

    	function input3_input_handler() {
    		datosUsuarioToEdit.name = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	function input4_input_handler() {
    		datosUsuarioToEdit.lastname = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	function input5_input_handler() {
    		datosUsuarioToEdit.email = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	function input6_input_handler() {
    		datosUsuarioToEdit.phone = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	function input_input_handler() {
    		datosUsuarioToEdit.password = this.value;
    		$$invalidate(0, datosUsuarioToEdit);
    	}

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(9, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		id,
    		axios,
    		Swal: sweetalert2_all,
    		Sidebar,
    		HeaderApp,
    		fade,
    		get: get_store_value,
    		preferences,
    		number,
    		datosUsuarioToEdit,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		getDataUserSelected,
    		visible,
    		toggleVissible,
    		btnEditPicture,
    		btnSendImage,
    		editUser,
    		sendToLogin,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(9, id = $$props.id);
    		if ('datosUsuarioToEdit' in $$props) $$invalidate(0, datosUsuarioToEdit = $$props.datosUsuarioToEdit);
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    		if ('visible' in $$props) $$invalidate(1, visible = $$props.visible);
    		if ('btnEditPicture' in $$props) $$invalidate(2, btnEditPicture = $$props.btnEditPicture);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		datosUsuarioToEdit,
    		visible,
    		btnEditPicture,
    		getDataUserLoggin,
    		getDataUserSelected,
    		toggleVissible,
    		btnSendImage,
    		editUser,
    		sendToLogin,
    		id,
    		input3_input_handler,
    		input4_input_handler,
    		input5_input_handler,
    		input6_input_handler,
    		input_input_handler
    	];
    }

    class UserSettings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { id: 9 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserSettings",
    			options,
    			id: create_fragment$h.name
    		});
    	}

    	get id() {
    		throw new Error("<UserSettings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<UserSettings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\views\Clientes.svelte generated by Svelte v3.52.0 */
    const file$g = "src\\views\\Clientes.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    // (678:0) {:catch error}
    function create_catch_block_2$3(ctx) {
    	let t_value = /*error*/ ctx[20] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_2$3.name,
    		type: "catch",
    		source: "(678:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (189:0) {:then data}
    function create_then_block$7(ctx) {
    	let main;
    	let div38;
    	let headerapp;
    	let t0;
    	let div0;
    	let sidebar;
    	let t1;
    	let div1;
    	let t2;
    	let div37;
    	let div35;
    	let div34;
    	let div5;
    	let div4;
    	let div3;
    	let h40;
    	let t4;
    	let div2;
    	let ol;
    	let li0;
    	let a;
    	let t6;
    	let li1;
    	let t8;
    	let div33;
    	let div32;
    	let div31;
    	let div6;
    	let h41;
    	let t10;
    	let div30;
    	let div29;
    	let div12;
    	let div8;
    	let div7;
    	let button0;
    	let i0;
    	let t11;
    	let t12;
    	let div11;
    	let div10;
    	let div9;
    	let input0;
    	let t13;
    	let i1;
    	let t14;
    	let div28;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t16;
    	let th1;
    	let t18;
    	let th2;
    	let t20;
    	let th3;
    	let t22;
    	let th4;
    	let t24;
    	let tbody;
    	let t25;
    	let div14;
    	let div13;
    	let lord_icon;
    	let lord_icon_src_value;
    	let t26;
    	let h50;
    	let t28;
    	let p;
    	let t30;
    	let t31;
    	let div27;
    	let div26;
    	let div25;
    	let div15;
    	let h51;
    	let t33;
    	let button1;
    	let t34;
    	let form;
    	let div22;
    	let div16;
    	let label0;
    	let t36;
    	let input1;
    	let t37;
    	let div17;
    	let label1;
    	let t39;
    	let input2;
    	let t40;
    	let div18;
    	let label2;
    	let t42;
    	let input3;
    	let t43;
    	let div19;
    	let label3;
    	let t45;
    	let input4;
    	let t46;
    	let div20;
    	let label4;
    	let t48;
    	let input5;
    	let t49;
    	let div21;
    	let label5;
    	let t51;
    	let input6;
    	let t52;
    	let div24;
    	let div23;
    	let button2;
    	let t54;
    	let button3;
    	let t56;
    	let div36;
    	let script0;
    	let script0_src_value;
    	let t57;
    	let script1;
    	let script1_src_value;
    	let t58;
    	let script2;
    	let script2_src_value;
    	let t59;
    	let script3;
    	let script3_src_value;
    	let t60;
    	let script4;
    	let script4_src_value;
    	let t61;
    	let script5;
    	let script5_src_value;
    	let t62;
    	let script6;
    	let script6_src_value;
    	let t63;
    	let script7;
    	let script7_src_value;
    	let t64;
    	let script8;
    	let script8_src_value;
    	let t65;
    	let script9;
    	let script9_src_value;
    	let t66;
    	let script10;
    	let script10_src_value;
    	let t67;
    	let script11;
    	let script11_src_value;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[16] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_2$3,
    		then: create_then_block_2$3,
    		catch: create_catch_block_1$7,
    		value: 16,
    		error: 20
    	};

    	handle_promise(/*getDataClientes*/ ctx[2](), info);

    	let info_1 = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$7,
    		then: create_then_block_1$7,
    		catch: create_catch_block$7,
    		value: 16,
    		error: 20
    	};

    	handle_promise(/*getLevels*/ ctx[5](), info_1);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div38 = element("div");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div37 = element("div");
    			div35 = element("div");
    			div34 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			h40 = element("h4");
    			h40.textContent = "Clientes";
    			t4 = space();
    			div2 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a = element("a");
    			a.textContent = "Home";
    			t6 = space();
    			li1 = element("li");
    			li1.textContent = "Clientes";
    			t8 = space();
    			div33 = element("div");
    			div32 = element("div");
    			div31 = element("div");
    			div6 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Lista Clientes";
    			t10 = space();
    			div30 = element("div");
    			div29 = element("div");
    			div12 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t11 = text("\r\n                                             Añadir Cliente");
    			t12 = space();
    			div11 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			input0 = element("input");
    			t13 = space();
    			i1 = element("i");
    			t14 = space();
    			div28 = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Nombre";
    			t16 = space();
    			th1 = element("th");
    			th1.textContent = "Correo";
    			t18 = space();
    			th2 = element("th");
    			th2.textContent = "Telefono";
    			t20 = space();
    			th3 = element("th");
    			th3.textContent = "Nivel";
    			t22 = space();
    			th4 = element("th");
    			th4.textContent = "Acción";
    			t24 = space();
    			tbody = element("tbody");
    			info.block.c();
    			t25 = space();
    			div14 = element("div");
    			div13 = element("div");
    			lord_icon = element("lord-icon");
    			t26 = space();
    			h50 = element("h5");
    			h50.textContent = "Lo sentimos! No se encontraron\r\n                                             resultados";
    			t28 = space();
    			p = element("p");
    			p.textContent = "Hemos buscado en todos los\r\n                                             clientes. No encontramos ningún\r\n                                             cliente para tu busqueda.";
    			t30 = space();
    			info_1.block.c();
    			t31 = space();
    			div27 = element("div");
    			div26 = element("div");
    			div25 = element("div");
    			div15 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Añadir Cliente";
    			t33 = space();
    			button1 = element("button");
    			t34 = space();
    			form = element("form");
    			div22 = element("div");
    			div16 = element("div");
    			label0 = element("label");
    			label0.textContent = "Nombre Completo";
    			t36 = space();
    			input1 = element("input");
    			t37 = space();
    			div17 = element("div");
    			label1 = element("label");
    			label1.textContent = "Correo";
    			t39 = space();
    			input2 = element("input");
    			t40 = space();
    			div18 = element("div");
    			label2 = element("label");
    			label2.textContent = "Teléfono";
    			t42 = space();
    			input3 = element("input");
    			t43 = space();
    			div19 = element("div");
    			label3 = element("label");
    			label3.textContent = "Contraseña";
    			t45 = space();
    			input4 = element("input");
    			t46 = space();
    			div20 = element("div");
    			label4 = element("label");
    			label4.textContent = "¿Está suscrito?";
    			t48 = space();
    			input5 = element("input");
    			t49 = space();
    			div21 = element("div");
    			label5 = element("label");
    			label5.textContent = "Nivel ID";
    			t51 = space();
    			input6 = element("input");
    			t52 = space();
    			div24 = element("div");
    			div23 = element("div");
    			button2 = element("button");
    			button2.textContent = "Cerrar";
    			t54 = space();
    			button3 = element("button");
    			button3.textContent = "Añadir Cliente";
    			t56 = space();
    			div36 = element("div");
    			script0 = element("script");
    			t57 = space();
    			script1 = element("script");
    			t58 = space();
    			script2 = element("script");
    			t59 = space();
    			script3 = element("script");
    			t60 = space();
    			script4 = element("script");
    			t61 = space();
    			script5 = element("script");
    			t62 = space();
    			script6 = element("script");
    			t63 = space();
    			script7 = element("script");
    			t64 = space();
    			script8 = element("script");
    			t65 = space();
    			script9 = element("script");
    			t66 = space();
    			script10 = element("script");
    			t67 = space();
    			script11 = element("script");
    			attr_dev(div0, "class", "app-menu navbar-menu");
    			add_location(div0, file$g, 194, 9, 5872);
    			attr_dev(div1, "class", "vertical-overlay");
    			add_location(div1, file$g, 200, 9, 6057);
    			attr_dev(h40, "class", "mb-sm-0");
    			add_location(h40, file$g, 213, 27, 6711);
    			attr_dev(a, "href", "/home");
    			add_location(a, file$g, 218, 36, 6965);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$g, 217, 33, 6899);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$g, 220, 33, 7064);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$g, 216, 30, 6837);
    			attr_dev(div2, "class", "page-title-right");
    			add_location(div2, file$g, 215, 27, 6775);
    			attr_dev(div3, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div3, file$g, 211, 24, 6573);
    			attr_dev(div4, "class", "col-12");
    			add_location(div4, file$g, 210, 21, 6527);
    			attr_dev(div5, "class", "row");
    			add_location(div5, file$g, 209, 18, 6487);
    			attr_dev(h41, "class", "card-title mb-0");
    			add_location(h41, file$g, 234, 30, 7602);
    			attr_dev(div6, "class", "card-header");
    			add_location(div6, file$g, 233, 27, 7545);
    			attr_dev(i0, "class", "ri-add-line align-bottom me-1");
    			add_location(i0, file$g, 249, 46, 8471);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-success add-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "id", "create-btn");
    			attr_dev(button0, "data-bs-target", "#showModalAñadirCliente");
    			add_location(button0, file$g, 243, 42, 8060);
    			add_location(div7, file$g, 242, 39, 8011);
    			attr_dev(div8, "class", "col-sm-auto");
    			add_location(div8, file$g, 241, 36, 7945);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "class", "form-control search");
    			attr_dev(input0, "placeholder", "Buscar Clientes...");
    			add_location(input0, file$g, 258, 45, 9029);
    			attr_dev(i1, "class", "ri-search-line search-icon");
    			add_location(i1, file$g, 262, 45, 9305);
    			attr_dev(div9, "class", "search-box ms-2");
    			add_location(div9, file$g, 257, 42, 8953);
    			attr_dev(div10, "class", "d-flex justify-content-sm-end");
    			add_location(div10, file$g, 255, 39, 8823);
    			attr_dev(div11, "class", "col-sm");
    			add_location(div11, file$g, 254, 36, 8762);
    			attr_dev(div12, "class", "row g-4 mb-3");
    			add_location(div12, file$g, 240, 33, 7881);
    			add_location(th0, file$g, 276, 45, 10048);
    			add_location(th1, file$g, 277, 45, 10110);
    			add_location(th2, file$g, 278, 45, 10172);
    			add_location(th3, file$g, 279, 45, 10236);
    			add_location(th4, file$g, 280, 45, 10297);
    			add_location(tr, file$g, 275, 42, 9997);
    			attr_dev(thead, "class", "table-light");
    			add_location(thead, file$g, 274, 39, 9926);
    			attr_dev(tbody, "class", "list form-check-all");
    			add_location(tbody, file$g, 283, 39, 10451);
    			attr_dev(table, "class", "table align-middle table-nowrap");
    			attr_dev(table, "id", "customerTable");
    			add_location(table, file$g, 271, 36, 9739);
    			if (!src_url_equal(lord_icon.src, lord_icon_src_value = "https://cdn.lordicon.com/msoeawqm.json")) set_custom_element_data(lord_icon, "src", lord_icon_src_value);
    			set_custom_element_data(lord_icon, "trigger", "loop");
    			set_custom_element_data(lord_icon, "colors", "primary:#121331,secondary:#08a88a");
    			set_style(lord_icon, "width", "75px");
    			set_style(lord_icon, "height", "75px");
    			add_location(lord_icon, file$g, 342, 42, 14694);
    			attr_dev(h50, "class", "mt-2");
    			add_location(h50, file$g, 347, 42, 15069);
    			attr_dev(p, "class", "text-muted mb-0");
    			add_location(p, file$g, 351, 42, 15313);
    			attr_dev(div13, "class", "text-center");
    			add_location(div13, file$g, 341, 39, 14625);
    			attr_dev(div14, "class", "noresult");
    			set_style(div14, "display", "none");
    			add_location(div14, file$g, 340, 36, 14540);
    			attr_dev(h51, "class", "modal-title");
    			attr_dev(h51, "id", "exampleModalLabel");
    			add_location(h51, file$g, 510, 48, 26253);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn-close");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			attr_dev(button1, "aria-label", "Close");
    			attr_dev(button1, "id", "close-modal");
    			add_location(button1, file$g, 515, 48, 26576);
    			attr_dev(div15, "class", "modal-header bg-light p-3");
    			add_location(div15, file$g, 508, 45, 26115);
    			attr_dev(label0, "for", "name-field");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$g, 525, 54, 27245);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "id", "name-field");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "placeholder", "Ingresar Nombre");
    			input1.required = true;
    			add_location(input1, file$g, 529, 54, 27542);
    			attr_dev(div16, "class", "mb-3");
    			add_location(div16, file$g, 524, 51, 27171);
    			attr_dev(label1, "for", "email-field");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$g, 538, 54, 28117);
    			attr_dev(input2, "type", "email");
    			attr_dev(input2, "id", "email-field");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "placeholder", "Ingresar Correo");
    			input2.required = true;
    			add_location(input2, file$g, 542, 54, 28406);
    			attr_dev(div17, "class", "mb-3");
    			add_location(div17, file$g, 537, 51, 28043);
    			attr_dev(label2, "for", "phone-field");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$g, 551, 54, 28983);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "id", "phone-field");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "placeholder", "Ingresar Teléfono");
    			input3.required = true;
    			add_location(input3, file$g, 555, 54, 29274);
    			attr_dev(div18, "class", "mb-3");
    			add_location(div18, file$g, 550, 51, 28909);
    			attr_dev(label3, "for", "password-field");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$g, 564, 54, 29852);
    			attr_dev(input4, "type", "text");
    			attr_dev(input4, "id", "password-field");
    			attr_dev(input4, "class", "form-control");
    			attr_dev(input4, "placeholder", "Ingresar Contraseña");
    			input4.required = true;
    			add_location(input4, file$g, 568, 54, 30148);
    			attr_dev(div19, "class", "mb-3");
    			add_location(div19, file$g, 563, 51, 29778);
    			attr_dev(label4, "for", "suscribed-field");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$g, 577, 54, 30731);
    			attr_dev(input5, "type", "text");
    			attr_dev(input5, "id", "suscribed-field");
    			attr_dev(input5, "class", "form-control");
    			attr_dev(input5, "placeholder", "Cantidad de suscripción");
    			input5.required = true;
    			add_location(input5, file$g, 581, 54, 31033);
    			attr_dev(div20, "class", "mb-3");
    			add_location(div20, file$g, 576, 51, 30657);
    			attr_dev(label5, "for", "id-field");
    			attr_dev(label5, "class", "form-label");
    			add_location(label5, file$g, 590, 54, 31621);
    			attr_dev(input6, "type", "text");
    			attr_dev(input6, "id", "id-field");
    			attr_dev(input6, "class", "form-control");
    			attr_dev(input6, "placeholder", "Cantidad de suscripción");
    			input6.required = true;
    			add_location(input6, file$g, 594, 54, 31909);
    			attr_dev(div21, "class", "mb-3");
    			add_location(div21, file$g, 589, 51, 31547);
    			attr_dev(div22, "class", "modal-body");
    			add_location(div22, file$g, 523, 48, 27094);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn btn-danger");
    			attr_dev(button2, "data-bs-dismiss", "modal");
    			add_location(button2, file$g, 605, 54, 32703);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "btn btn-success");
    			attr_dev(button3, "id", "edit-btn");
    			add_location(button3, file$g, 610, 54, 33076);
    			attr_dev(div23, "class", "hstack gap-2 justify-content-end");
    			add_location(div23, file$g, 603, 51, 32546);
    			attr_dev(div24, "class", "modal-footer");
    			add_location(div24, file$g, 602, 48, 32467);
    			add_location(form, file$g, 522, 45, 27038);
    			attr_dev(div25, "class", "modal-content");
    			add_location(div25, file$g, 507, 42, 26041);
    			attr_dev(div26, "class", "modal-dialog modal-dialog-centered");
    			add_location(div26, file$g, 505, 39, 25906);
    			attr_dev(div27, "class", "modal fade");
    			attr_dev(div27, "id", "showModalAñadirCliente");
    			attr_dev(div27, "tabindex", "-1");
    			attr_dev(div27, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div27, "aria-hidden", "true");
    			add_location(div27, file$g, 499, 36, 25544);
    			attr_dev(div28, "class", "table-responsive table-card mt-3 mb-1");
    			add_location(div28, file$g, 269, 33, 9613);
    			attr_dev(div29, "id", "customerList");
    			add_location(div29, file$g, 239, 30, 7823);
    			attr_dev(div30, "class", "card-body");
    			add_location(div30, file$g, 238, 27, 7768);
    			attr_dev(div31, "class", "card");
    			add_location(div31, file$g, 232, 24, 7498);
    			attr_dev(div32, "class", "col-lg-12");
    			add_location(div32, file$g, 231, 21, 7449);
    			attr_dev(div33, "class", "row");
    			add_location(div33, file$g, 230, 18, 7409);
    			attr_dev(div34, "class", "container-fluid");
    			add_location(div34, file$g, 207, 15, 6393);
    			attr_dev(div35, "class", "page-content");
    			add_location(div35, file$g, 206, 12, 6350);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$g, 644, 15, 34528);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$g, 646, 15, 34651);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$g, 648, 15, 34764);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$g, 650, 15, 34874);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$g, 652, 15, 34989);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$g, 654, 15, 35106);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/prismjs/prism.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$g, 656, 15, 35222);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/list.js/list.min.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$g, 658, 15, 35325);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/libs/list.pagination.js/list.pagination.min.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$g, 660, 15, 35431);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/listjs.init.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$g, 664, 15, 35598);
    			if (!src_url_equal(script10.src, script10_src_value = "http://localhost:8080/libs/sweetalert2/sweetalert2.min.js")) attr_dev(script10, "src", script10_src_value);
    			add_location(script10, file$g, 668, 15, 35746);
    			if (!src_url_equal(script11.src, script11_src_value = "http://localhost:8080/js/app.js")) attr_dev(script11, "src", script11_src_value);
    			add_location(script11, file$g, 672, 15, 35897);
    			add_location(div36, file$g, 639, 12, 34293);
    			attr_dev(div37, "class", "main-content");
    			add_location(div37, file$g, 205, 9, 6310);
    			attr_dev(div38, "id", "layout-wrapper");
    			add_location(div38, file$g, 191, 6, 5755);
    			add_location(main, file$g, 189, 3, 5714);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div38);
    			mount_component(headerapp, div38, null);
    			append_dev(div38, t0);
    			append_dev(div38, div0);
    			mount_component(sidebar, div0, null);
    			append_dev(div38, t1);
    			append_dev(div38, div1);
    			append_dev(div38, t2);
    			append_dev(div38, div37);
    			append_dev(div37, div35);
    			append_dev(div35, div34);
    			append_dev(div34, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h40);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a);
    			append_dev(ol, t6);
    			append_dev(ol, li1);
    			append_dev(div34, t8);
    			append_dev(div34, div33);
    			append_dev(div33, div32);
    			append_dev(div32, div31);
    			append_dev(div31, div6);
    			append_dev(div6, h41);
    			append_dev(div31, t10);
    			append_dev(div31, div30);
    			append_dev(div30, div29);
    			append_dev(div29, div12);
    			append_dev(div12, div8);
    			append_dev(div8, div7);
    			append_dev(div7, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t11);
    			append_dev(div12, t12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, input0);
    			append_dev(div9, t13);
    			append_dev(div9, i1);
    			append_dev(div29, t14);
    			append_dev(div29, div28);
    			append_dev(div28, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t16);
    			append_dev(tr, th1);
    			append_dev(tr, t18);
    			append_dev(tr, th2);
    			append_dev(tr, t20);
    			append_dev(tr, th3);
    			append_dev(tr, t22);
    			append_dev(tr, th4);
    			append_dev(table, t24);
    			append_dev(table, tbody);
    			info.block.m(tbody, info.anchor = null);
    			info.mount = () => tbody;
    			info.anchor = null;
    			append_dev(div28, t25);
    			append_dev(div28, div14);
    			append_dev(div14, div13);
    			append_dev(div13, lord_icon);
    			append_dev(div13, t26);
    			append_dev(div13, h50);
    			append_dev(div13, t28);
    			append_dev(div13, p);
    			append_dev(div28, t30);
    			info_1.block.m(div28, info_1.anchor = null);
    			info_1.mount = () => div28;
    			info_1.anchor = t31;
    			append_dev(div28, t31);
    			append_dev(div28, div27);
    			append_dev(div27, div26);
    			append_dev(div26, div25);
    			append_dev(div25, div15);
    			append_dev(div15, h51);
    			append_dev(div15, t33);
    			append_dev(div15, button1);
    			append_dev(div25, t34);
    			append_dev(div25, form);
    			append_dev(form, div22);
    			append_dev(div22, div16);
    			append_dev(div16, label0);
    			append_dev(div16, t36);
    			append_dev(div16, input1);
    			append_dev(div22, t37);
    			append_dev(div22, div17);
    			append_dev(div17, label1);
    			append_dev(div17, t39);
    			append_dev(div17, input2);
    			append_dev(div22, t40);
    			append_dev(div22, div18);
    			append_dev(div18, label2);
    			append_dev(div18, t42);
    			append_dev(div18, input3);
    			append_dev(div22, t43);
    			append_dev(div22, div19);
    			append_dev(div19, label3);
    			append_dev(div19, t45);
    			append_dev(div19, input4);
    			append_dev(div22, t46);
    			append_dev(div22, div20);
    			append_dev(div20, label4);
    			append_dev(div20, t48);
    			append_dev(div20, input5);
    			append_dev(div22, t49);
    			append_dev(div22, div21);
    			append_dev(div21, label5);
    			append_dev(div21, t51);
    			append_dev(div21, input6);
    			append_dev(form, t52);
    			append_dev(form, div24);
    			append_dev(div24, div23);
    			append_dev(div23, button2);
    			append_dev(div23, t54);
    			append_dev(div23, button3);
    			append_dev(div37, t56);
    			append_dev(div37, div36);
    			append_dev(div36, script0);
    			append_dev(div36, t57);
    			append_dev(div36, script1);
    			append_dev(div36, t58);
    			append_dev(div36, script2);
    			append_dev(div36, t59);
    			append_dev(div36, script3);
    			append_dev(div36, t60);
    			append_dev(div36, script4);
    			append_dev(div36, t61);
    			append_dev(div36, script5);
    			append_dev(div36, t62);
    			append_dev(div36, script6);
    			append_dev(div36, t63);
    			append_dev(div36, script7);
    			append_dev(div36, t64);
    			append_dev(div36, script8);
    			append_dev(div36, t65);
    			append_dev(div36, script9);
    			append_dev(div36, t66);
    			append_dev(div36, script10);
    			append_dev(div36, t67);
    			append_dev(div36, script11);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    			update_await_block_branch(info_1, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    			info_1.block.d();
    			info_1.token = null;
    			info_1 = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$7.name,
    		type: "then",
    		source: "(189:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (335:42) {:catch error}
    function create_catch_block_1$7(ctx) {
    	const block = { c: noop$1, m: noop$1, p: noop$1, d: noop$1 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$7.name,
    		type: "catch",
    		source: "(335:42) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (287:42) {:then data}
    function create_then_block_2$3(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*data*/ ctx[16];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*deleteClient, getDataClientes, getDataClientSelected*/ 28) {
    				each_value_1 = /*data*/ ctx[16];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_2$3.name,
    		type: "then",
    		source: "(287:42) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (288:45) {#each data as dataClients}
    function create_each_block_1$3(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*dataClients*/ ctx[21].name + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*dataClients*/ ctx[21].email + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*dataClients*/ ctx[21].phone_number + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*dataClients*/ ctx[21].level_id + "";
    	let t6;
    	let t7;
    	let td4;
    	let div3;
    	let div0;
    	let a;
    	let t8;
    	let t9;
    	let div1;
    	let button0;
    	let t11;
    	let div2;
    	let button1;
    	let t13;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[7](/*dataClients*/ ctx[21]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[8](/*dataClients*/ ctx[21]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text(t6_value);
    			t7 = space();
    			td4 = element("td");
    			div3 = element("div");
    			div0 = element("div");
    			a = element("a");
    			t8 = text("Ver Detalles");
    			t9 = space();
    			div1 = element("div");
    			button0 = element("button");
    			button0.textContent = "Editar";
    			t11 = space();
    			div2 = element("div");
    			button1 = element("button");
    			button1.textContent = "Borrar";
    			t13 = space();
    			attr_dev(td0, "class", "name");
    			add_location(td0, file$g, 289, 51, 10850);
    			attr_dev(td1, "class", "email");
    			add_location(td1, file$g, 291, 51, 10999);
    			attr_dev(td2, "class", "telefono");
    			add_location(td2, file$g, 293, 51, 11150);
    			attr_dev(td3, "class", "nivel");
    			add_location(td3, file$g, 296, 51, 11364);
    			attr_dev(a, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(a, "href", "/client_info/" + /*dataClients*/ ctx[21].id);
    			add_location(a, file$g, 303, 60, 11798);
    			attr_dev(div0, "class", "edit");
    			add_location(div0, file$g, 302, 57, 11718);
    			attr_dev(button0, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "data-bs-target", "#showModalEditar");
    			add_location(button0, file$g, 309, 60, 12296);
    			attr_dev(div1, "class", "edit");
    			add_location(div1, file$g, 308, 57, 12216);
    			attr_dev(button1, "class", "btn btn-sm btn-danger remove-item-btn");
    			attr_dev(button1, "data-bs-toggle", "modal");
    			attr_dev(button1, "data-bs-target", "#deleteRecordModal");
    			add_location(button1, file$g, 320, 60, 13209);
    			attr_dev(div2, "class", "remove");
    			add_location(div2, file$g, 319, 57, 13127);
    			attr_dev(div3, "class", "d-flex gap-2");
    			add_location(div3, file$g, 301, 54, 11633);
    			add_location(td4, file$g, 300, 51, 11573);
    			add_location(tr, file$g, 288, 48, 10793);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, a);
    			append_dev(a, t8);
    			append_dev(div3, t9);
    			append_dev(div3, div1);
    			append_dev(div1, button0);
    			append_dev(div3, t11);
    			append_dev(div3, div2);
    			append_dev(div2, button1);
    			append_dev(tr, t13);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", click_handler, false, false, false),
    					listen_dev(button1, "click", prevent_default(click_handler_1), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(288:45) {#each data as dataClients}",
    		ctx
    	});

    	return block;
    }

    // (285:68)                                                Loading...                                            {:then data}
    function create_pending_block_2$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_2$3.name,
    		type: "pending",
    		source: "(285:68)                                                Loading...                                            {:then data}",
    		ctx
    	});

    	return block;
    }

    // (496:36) {:catch error}
    function create_catch_block$7(ctx) {
    	let t_value = /*error*/ ctx[20] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$7.name,
    		type: "catch",
    		source: "(496:36) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (362:36) {:then data}
    function create_then_block_1$7(ctx) {
    	let div11;
    	let div10;
    	let div9;
    	let div0;
    	let h5;
    	let t1;
    	let button0;
    	let t2;
    	let form;
    	let div6;
    	let div1;
    	let label0;
    	let t4;
    	let input0;
    	let t5;
    	let div2;
    	let label1;
    	let t7;
    	let input1;
    	let t8;
    	let div3;
    	let label2;
    	let t10;
    	let input2;
    	let t11;
    	let div4;
    	let label3;
    	let t13;
    	let input3;
    	let input3_value_value;
    	let t14;
    	let div5;
    	let label4;
    	let t16;
    	let select;
    	let t17;
    	let div8;
    	let div7;
    	let button1;
    	let t19;
    	let button2;
    	let t21;
    	let input4;
    	let t22;
    	let input5;
    	let input5_value_value;
    	let mounted;
    	let dispose;
    	let each_value = /*data*/ ctx[16];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div11 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			div0 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Editar Cliente";
    			t1 = space();
    			button0 = element("button");
    			t2 = space();
    			form = element("form");
    			div6 = element("div");
    			div1 = element("div");
    			label0 = element("label");
    			label0.textContent = "Nombre Completo";
    			t4 = space();
    			input0 = element("input");
    			t5 = space();
    			div2 = element("div");
    			label1 = element("label");
    			label1.textContent = "Correo";
    			t7 = space();
    			input1 = element("input");
    			t8 = space();
    			div3 = element("div");
    			label2 = element("label");
    			label2.textContent = "Teléfono";
    			t10 = space();
    			input2 = element("input");
    			t11 = space();
    			div4 = element("div");
    			label3 = element("label");
    			label3.textContent = "¿Está suscrito?";
    			t13 = space();
    			input3 = element("input");
    			t14 = space();
    			div5 = element("div");
    			label4 = element("label");
    			label4.textContent = "Nivel";
    			t16 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t17 = space();
    			div8 = element("div");
    			div7 = element("div");
    			button1 = element("button");
    			button1.textContent = "Cerrar";
    			t19 = space();
    			button2 = element("button");
    			button2.textContent = "Guardar cambios";
    			t21 = space();
    			input4 = element("input");
    			t22 = space();
    			input5 = element("input");
    			attr_dev(h5, "class", "modal-title");
    			attr_dev(h5, "id", "exampleModalLabel");
    			add_location(h5, file$g, 373, 51, 16639);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn-close");
    			attr_dev(button0, "data-bs-dismiss", "modal");
    			attr_dev(button0, "aria-label", "Close");
    			attr_dev(button0, "id", "close-modal");
    			add_location(button0, file$g, 378, 51, 16977);
    			attr_dev(div0, "class", "modal-header bg-light p-3");
    			add_location(div0, file$g, 371, 48, 16495);
    			attr_dev(label0, "for", "name-field");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$g, 390, 57, 17871);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "name-field");
    			attr_dev(input0, "class", "form-control");
    			attr_dev(input0, "placeholder", "Ingresar Nombre");
    			attr_dev(input0, "name", "name");
    			input0.required = true;
    			add_location(input0, file$g, 394, 57, 18180);
    			attr_dev(div1, "class", "mb-3");
    			add_location(div1, file$g, 389, 54, 17794);
    			attr_dev(label1, "for", "email-field");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$g, 405, 57, 18950);
    			attr_dev(input1, "type", "email");
    			attr_dev(input1, "id", "email-field");
    			attr_dev(input1, "name", "email");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "placeholder", "Ingresar Correo");
    			input1.required = true;
    			add_location(input1, file$g, 409, 57, 19251);
    			attr_dev(div2, "class", "mb-3");
    			add_location(div2, file$g, 404, 54, 18873);
    			attr_dev(label2, "for", "phone-field");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$g, 420, 57, 20025);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "id", "phone-field");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "name", "phone_number");
    			attr_dev(input2, "placeholder", "Ingresar Teléfono");
    			input2.required = true;
    			add_location(input2, file$g, 424, 57, 20328);
    			attr_dev(div3, "class", "mb-3");
    			add_location(div3, file$g, 419, 54, 19948);
    			attr_dev(label3, "for", "suscribed-field");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$g, 435, 57, 21117);
    			attr_dev(input3, "name", "is_suscribed");
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "placeholder", "1.- SI  2.- NO");

    			input3.value = input3_value_value = /*dataClientSelected*/ ctx[0].is_suscribed == 1
    			? "SI"
    			: "NO";

    			add_location(input3, file$g, 439, 57, 21431);
    			attr_dev(div4, "class", "mb-3");
    			add_location(div4, file$g, 434, 54, 21040);
    			attr_dev(label4, "for", "id-field");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$g, 450, 57, 22190);
    			attr_dev(select, "name", "level_id");
    			add_location(select, file$g, 454, 57, 22487);
    			attr_dev(div5, "class", "mb-3");
    			add_location(div5, file$g, 449, 54, 22113);
    			attr_dev(div6, "class", "modal-body");
    			add_location(div6, file$g, 388, 51, 17714);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-danger");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			add_location(button1, file$g, 470, 57, 23689);
    			attr_dev(button2, "type", "submit");
    			attr_dev(button2, "class", "btn btn-success");
    			attr_dev(button2, "id", "add-btn");
    			add_location(button2, file$g, 475, 57, 24077);
    			attr_dev(div7, "class", "hstack gap-2 justify-content-end");
    			add_location(div7, file$g, 468, 54, 23526);
    			attr_dev(div8, "class", "modal-footer");
    			add_location(div8, file$g, 467, 51, 23444);
    			attr_dev(input4, "name", "action");
    			input4.value = "update";
    			input4.hidden = true;
    			add_location(input4, file$g, 483, 51, 24667);
    			attr_dev(input5, "name", "id");
    			input5.value = input5_value_value = /*dataClientSelected*/ ctx[0].id;
    			input5.hidden = true;
    			add_location(input5, file$g, 487, 51, 24930);
    			attr_dev(form, "method", "post");
    			attr_dev(form, "action", "https://newphpecommercejona.herokuapp.com/app/ClientsController.php");
    			add_location(form, file$g, 385, 48, 17460);
    			attr_dev(div9, "class", "modal-content");
    			add_location(div9, file$g, 370, 45, 16418);
    			attr_dev(div10, "class", "modal-dialog modal-dialog-centered");
    			add_location(div10, file$g, 368, 42, 16277);
    			attr_dev(div11, "class", "modal fade");
    			attr_dev(div11, "id", "showModalEditar");
    			attr_dev(div11, "tabindex", "-1");
    			attr_dev(div11, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div11, "aria-hidden", "true");
    			add_location(div11, file$g, 362, 39, 15904);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div11, anchor);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div0);
    			append_dev(div0, h5);
    			append_dev(div0, t1);
    			append_dev(div0, button0);
    			append_dev(div9, t2);
    			append_dev(div9, form);
    			append_dev(form, div6);
    			append_dev(div6, div1);
    			append_dev(div1, label0);
    			append_dev(div1, t4);
    			append_dev(div1, input0);
    			set_input_value(input0, /*dataClientSelected*/ ctx[0].name);
    			append_dev(div6, t5);
    			append_dev(div6, div2);
    			append_dev(div2, label1);
    			append_dev(div2, t7);
    			append_dev(div2, input1);
    			set_input_value(input1, /*dataClientSelected*/ ctx[0].email);
    			append_dev(div6, t8);
    			append_dev(div6, div3);
    			append_dev(div3, label2);
    			append_dev(div3, t10);
    			append_dev(div3, input2);
    			set_input_value(input2, /*dataClientSelected*/ ctx[0].phone_number);
    			append_dev(div6, t11);
    			append_dev(div6, div4);
    			append_dev(div4, label3);
    			append_dev(div4, t13);
    			append_dev(div4, input3);
    			append_dev(div6, t14);
    			append_dev(div6, div5);
    			append_dev(div5, label4);
    			append_dev(div5, t16);
    			append_dev(div5, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			append_dev(form, t17);
    			append_dev(form, div8);
    			append_dev(div8, div7);
    			append_dev(div7, button1);
    			append_dev(div7, t19);
    			append_dev(div7, button2);
    			append_dev(form, t21);
    			append_dev(form, input4);
    			append_dev(form, t22);
    			append_dev(form, input5);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[9]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[10]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[11]),
    					listen_dev(button2, "click", /*reloadPage*/ ctx[6], { once: true }, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*dataClientSelected*/ 1 && input0.value !== /*dataClientSelected*/ ctx[0].name) {
    				set_input_value(input0, /*dataClientSelected*/ ctx[0].name);
    			}

    			if (dirty & /*dataClientSelected*/ 1 && input1.value !== /*dataClientSelected*/ ctx[0].email) {
    				set_input_value(input1, /*dataClientSelected*/ ctx[0].email);
    			}

    			if (dirty & /*dataClientSelected*/ 1 && input2.value !== /*dataClientSelected*/ ctx[0].phone_number) {
    				set_input_value(input2, /*dataClientSelected*/ ctx[0].phone_number);
    			}

    			if (dirty & /*dataClientSelected*/ 1 && input3_value_value !== (input3_value_value = /*dataClientSelected*/ ctx[0].is_suscribed == 1
    			? "SI"
    			: "NO") && input3.value !== input3_value_value) {
    				prop_dev(input3, "value", input3_value_value);
    			}

    			if (dirty & /*getLevels*/ 32) {
    				each_value = /*data*/ ctx[16];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*dataClientSelected*/ 1 && input5_value_value !== (input5_value_value = /*dataClientSelected*/ ctx[0].id) && input5.value !== input5_value_value) {
    				prop_dev(input5, "value", input5_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div11);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$7.name,
    		type: "then",
    		source: "(362:36) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (457:60) {#each data as dataLevel}
    function create_each_block$8(ctx) {
    	let option;
    	let t0_value = /*dataLevel*/ ctx[17].id + "";
    	let t0;
    	let t1;
    	let t2_value = /*dataLevel*/ ctx[17].name + "";
    	let t2;
    	let t3;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t0 = text(t0_value);
    			t1 = text("\r\n                                                                  (\r\n                                                                  ");
    			t2 = text(t2_value);
    			t3 = text("\r\n                                                                  )");
    			option.__value = /*dataLevel*/ ctx[17].id;
    			option.value = option.__value;
    			add_location(option, file$g, 457, 63, 22724);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t0);
    			append_dev(option, t1);
    			append_dev(option, t2);
    			append_dev(option, t3);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(457:60) {#each data as dataLevel}",
    		ctx
    	});

    	return block;
    }

    // (360:56)                                          Loading...                                      {:then data}
    function create_pending_block_1$7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$7.name,
    		type: "pending",
    		source: "(360:56)                                          Loading...                                      {:then data}",
    		ctx
    	});

    	return block;
    }

    // (187:28)      Loading Header...  {:then data}
    function create_pending_block$7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading Header...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$7.name,
    		type: "pending",
    		source: "(187:28)      Loading Header...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let link0;
    	let link1;
    	let script;
    	let script_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$7,
    		then: create_then_block$7,
    		catch: create_catch_block_2$3,
    		value: 16,
    		error: 20,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			link0 = element("link");
    			link1 = element("link");
    			script = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Clientes";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$g, 154, 3, 4739);
    			attr_dev(link1, "href", "http://localhost:8080/libs/sweetalert2/sweetalert2.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$g, 157, 3, 4850);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$g, 163, 3, 5015);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$g, 165, 3, 5105);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$g, 170, 3, 5246);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$g, 175, 3, 5380);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$g, 180, 3, 5515);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(12, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Clientes', slots, []);
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = "/";
    	}

    	let myHeaders = new Headers();
    	myHeaders.append("Authorization", `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	let requestOptions = {
    		method: "GET",
    		headers: myHeaders,
    		redirect: "follow"
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	async function getDataClientes() {
    		const response = await fetch("https://crud.jonathansoto.mx/api/clients", requestOptions);
    		const dataClientes = await response.json();
    		return dataClientes.data;
    	}

    	async function deleteClient(idClient) {
    		const swalWithBootstrapButtons = sweetalert2_all.mixin({
    			customClass: {
    				confirmButton: "btn btn-success",
    				cancelButton: "btn btn-danger"
    			},
    			buttonsStyling: false
    		});

    		let requestOptionsDelete = {
    			method: "DELETE",
    			headers: myHeaders,
    			redirect: "follow"
    		};

    		swalWithBootstrapButtons.fire({
    			title: "Seguro que quieres eliminar el usuario?",
    			text: "No podras revertir los cambios",
    			icon: "warning",
    			showCancelButton: true,
    			confirmButtonText: "Si, eliminalo!",
    			cancelButtonText: "No, cancelar!",
    			reverseButtons: true
    		}).then(async result => {
    			if (result.isConfirmed) {
    				const res = await fetch(`https://crud.jonathansoto.mx/api/clients/${idClient}`, requestOptionsDelete);
    				const data = await res.json();

    				if (data.code > 0) {
    					location.reload();
    					swalWithBootstrapButtons.fire("Eliminado!", "El usuario ha sido eliminado.", "success");
    				}
    			} else if (result.dismiss === sweetalert2_all.DismissReason.cancel) {
    				swalWithBootstrapButtons.fire("Cancelado", "Tu usuario esta a salvo :)", "error");
    			}
    		});
    	}

    	// Funcion para obtener los datos del cliente seleccionado
    	const dataClientSelected = {
    		id: 0,
    		name: "",
    		lastname: "",
    		email: "",
    		password: "",
    		phone_number: "",
    		is_suscribed: 0
    	};

    	async function getDataClientSelected(id) {
    		const resp = await fetch("https://crud.jonathansoto.mx/api/clients/" + id, requestOptions);
    		const data = await resp.json();
    		const clientInfo = data.data;
    		$$invalidate(0, dataClientSelected.id = clientInfo.id, dataClientSelected);
    		$$invalidate(0, dataClientSelected.name = clientInfo.name, dataClientSelected);
    		$$invalidate(0, dataClientSelected.lastname = clientInfo.lastname, dataClientSelected);
    		$$invalidate(0, dataClientSelected.email = clientInfo.email, dataClientSelected);
    		$$invalidate(0, dataClientSelected.phone_number = clientInfo.phone_number, dataClientSelected);
    		$$invalidate(0, dataClientSelected.is_suscribed = clientInfo.is_suscribed, dataClientSelected);
    	}

    	async function getLevels() {
    		const resp = await fetch("https://crud.jonathansoto.mx/api/levels", requestOptions);
    		const data = await resp.json();
    		return data.data;
    	}

    	function reloadPage(e) {
    		sweetalert2_all.fire({
    			title: "Recargara ventana",
    			text: "Se recargara la pagina para ver los cambios realizados :)",
    			icon: "info",
    			showCancelButton: false,
    			confirmButtonText: "Aceptar"
    		}).then(result => {
    			if (result.value) {
    				location.reload();
    			}
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Clientes> was created with unknown prop '${key}'`);
    	});

    	const click_handler = dataClients => getDataClientSelected(dataClients.id);
    	const click_handler_1 = dataClients => deleteClient(dataClients.id);

    	function input0_input_handler() {
    		dataClientSelected.name = this.value;
    		$$invalidate(0, dataClientSelected);
    	}

    	function input1_input_handler() {
    		dataClientSelected.email = this.value;
    		$$invalidate(0, dataClientSelected);
    	}

    	function input2_input_handler() {
    		dataClientSelected.phone_number = this.value;
    		$$invalidate(0, dataClientSelected);
    	}

    	$$self.$capture_state = () => ({
    		HeaderApp,
    		Sidebar,
    		Swal: sweetalert2_all,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		getDataClientes,
    		deleteClient,
    		dataClientSelected,
    		getDataClientSelected,
    		getLevels,
    		reloadPage,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dataClientSelected,
    		getDataUserLoggin,
    		getDataClientes,
    		deleteClient,
    		getDataClientSelected,
    		getLevels,
    		reloadPage,
    		click_handler,
    		click_handler_1,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler
    	];
    }

    class Clientes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Clientes",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    /* src\views\Cupones.svelte generated by Svelte v3.52.0 */

    const { console: console_1$3 } = globals;
    const file$f = "src\\views\\Cupones.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    // (806:0) {:catch error}
    function create_catch_block_1$6(ctx) {
    	let t_value = /*error*/ ctx[23] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$6.name,
    		type: "catch",
    		source: "(806:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (187:0) {:then data}
    function create_then_block$6(ctx) {
    	let main;
    	let div62;
    	let header;
    	let div0;
    	let headerapp;
    	let t0;
    	let div1;
    	let sidebar;
    	let t1;
    	let div2;
    	let t2;
    	let div60;
    	let div59;
    	let div58;
    	let div6;
    	let div5;
    	let div4;
    	let h40;
    	let t4;
    	let div3;
    	let ol;
    	let li0;
    	let a;
    	let t6;
    	let li1;
    	let t8;
    	let div57;
    	let div56;
    	let div55;
    	let div7;
    	let h41;
    	let t10;
    	let div54;
    	let div53;
    	let div10;
    	let div9;
    	let div8;
    	let button0;
    	let i;
    	let t11;
    	let t12;
    	let div11;
    	let t13;
    	let div28;
    	let div27;
    	let div26;
    	let div12;
    	let h50;
    	let t15;
    	let button1;
    	let t16;
    	let form0;
    	let div23;
    	let div13;
    	let label0;
    	let t18;
    	let input0;
    	let t19;
    	let div14;
    	let label1;
    	let t21;
    	let input1;
    	let t22;
    	let div15;
    	let label2;
    	let t24;
    	let input2;
    	let t25;
    	let div16;
    	let label3;
    	let t27;
    	let input3;
    	let t28;
    	let div17;
    	let label4;
    	let t30;
    	let input4;
    	let t31;
    	let div18;
    	let label5;
    	let t33;
    	let input5;
    	let t34;
    	let div19;
    	let label6;
    	let t36;
    	let input6;
    	let t37;
    	let div20;
    	let label7;
    	let t39;
    	let input7;
    	let t40;
    	let div21;
    	let label8;
    	let t42;
    	let input8;
    	let t43;
    	let div22;
    	let label9;
    	let t45;
    	let input9;
    	let t46;
    	let div25;
    	let div24;
    	let button2;
    	let t48;
    	let button3;
    	let t50;
    	let div44;
    	let div43;
    	let div42;
    	let div29;
    	let h51;
    	let t52;
    	let button4;
    	let t53;
    	let form1;
    	let div39;
    	let div30;
    	let label10;
    	let t55;
    	let input10;
    	let t56;
    	let div31;
    	let label11;
    	let t58;
    	let input11;
    	let t59;
    	let div32;
    	let label12;
    	let t61;
    	let input12;
    	let t62;
    	let div33;
    	let label13;
    	let t64;
    	let input13;
    	let t65;
    	let div34;
    	let label14;
    	let t67;
    	let input14;
    	let t68;
    	let div35;
    	let label15;
    	let t70;
    	let input15;
    	let t71;
    	let div36;
    	let label16;
    	let t73;
    	let input16;
    	let t74;
    	let div37;
    	let label17;
    	let t76;
    	let input17;
    	let t77;
    	let div38;
    	let label18;
    	let t79;
    	let input18;
    	let t80;
    	let div41;
    	let div40;
    	let button5;
    	let t82;
    	let button6;
    	let t84;
    	let div52;
    	let div51;
    	let div50;
    	let div45;
    	let button7;
    	let t85;
    	let div49;
    	let div47;
    	let lord_icon;
    	let lord_icon_src_value;
    	let t86;
    	let div46;
    	let h42;
    	let t88;
    	let p;
    	let t90;
    	let div48;
    	let button8;
    	let t92;
    	let button9;
    	let t94;
    	let div61;
    	let script0;
    	let script0_src_value;
    	let t95;
    	let script1;
    	let script1_src_value;
    	let t96;
    	let script2;
    	let script2_src_value;
    	let t97;
    	let script3;
    	let script3_src_value;
    	let t98;
    	let script4;
    	let script4_src_value;
    	let t99;
    	let script5;
    	let script5_src_value;
    	let t100;
    	let script6;
    	let script6_src_value;
    	let t101;
    	let script7;
    	let script7_src_value;
    	let t102;
    	let script8;
    	let script8_src_value;
    	let t103;
    	let script9;
    	let script9_src_value;
    	let t104;
    	let script10;
    	let script10_src_value;
    	let t105;
    	let script11;
    	let script11_src_value;
    	let t106;
    	let script12;
    	let script12_src_value;
    	let t107;
    	let script13;
    	let script13_src_value;
    	let current;
    	let mounted;
    	let dispose;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[19] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$6,
    		then: create_then_block_1$6,
    		catch: create_catch_block$6,
    		value: 19,
    		error: 23
    	};

    	handle_promise(/*getAllCupons*/ ctx[2](), info);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div62 = element("div");
    			header = element("header");
    			div0 = element("div");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			div60 = element("div");
    			div59 = element("div");
    			div58 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			h40 = element("h4");
    			h40.textContent = "Cupones";
    			t4 = space();
    			div3 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a = element("a");
    			a.textContent = "Home";
    			t6 = space();
    			li1 = element("li");
    			li1.textContent = "Cupones";
    			t8 = space();
    			div57 = element("div");
    			div56 = element("div");
    			div55 = element("div");
    			div7 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Lista Cupones";
    			t10 = space();
    			div54 = element("div");
    			div53 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			div8 = element("div");
    			button0 = element("button");
    			i = element("i");
    			t11 = text("\r\n                                             Añadir Cupón");
    			t12 = space();
    			div11 = element("div");
    			info.block.c();
    			t13 = space();
    			div28 = element("div");
    			div27 = element("div");
    			div26 = element("div");
    			div12 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Editar Cupón";
    			t15 = space();
    			button1 = element("button");
    			t16 = space();
    			form0 = element("form");
    			div23 = element("div");
    			div13 = element("div");
    			label0 = element("label");
    			label0.textContent = "Nombre";
    			t18 = space();
    			input0 = element("input");
    			t19 = space();
    			div14 = element("div");
    			label1 = element("label");
    			label1.textContent = "Código del cupón";
    			t21 = space();
    			input1 = element("input");
    			t22 = space();
    			div15 = element("div");
    			label2 = element("label");
    			label2.textContent = "Porcentaje de descuento";
    			t24 = space();
    			input2 = element("input");
    			t25 = space();
    			div16 = element("div");
    			label3 = element("label");
    			label3.textContent = "Monto mínimo solicitado";
    			t27 = space();
    			input3 = element("input");
    			t28 = space();
    			div17 = element("div");
    			label4 = element("label");
    			label4.textContent = "Monto mínimo de producto\r\n                                                      solicitado";
    			t30 = space();
    			input4 = element("input");
    			t31 = space();
    			div18 = element("div");
    			label5 = element("label");
    			label5.textContent = "Fecha de inicio del cupón";
    			t33 = space();
    			input5 = element("input");
    			t34 = space();
    			div19 = element("div");
    			label6 = element("label");
    			label6.textContent = "Fecha caducidad del cupón";
    			t36 = space();
    			input6 = element("input");
    			t37 = space();
    			div20 = element("div");
    			label7 = element("label");
    			label7.textContent = "Fecha caducidad del cupón";
    			t39 = space();
    			input7 = element("input");
    			t40 = space();
    			div21 = element("div");
    			label8 = element("label");
    			label8.textContent = "Cantidad de usos";
    			t42 = space();
    			input8 = element("input");
    			t43 = space();
    			div22 = element("div");
    			label9 = element("label");
    			label9.textContent = "Disponible para usar en\r\n                                                      una sola compra?";
    			t45 = space();
    			input9 = element("input");
    			t46 = space();
    			div25 = element("div");
    			div24 = element("div");
    			button2 = element("button");
    			button2.textContent = "Cerrar";
    			t48 = space();
    			button3 = element("button");
    			button3.textContent = "Guardar cambios";
    			t50 = space();
    			div44 = element("div");
    			div43 = element("div");
    			div42 = element("div");
    			div29 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Añadir Cupón";
    			t52 = space();
    			button4 = element("button");
    			t53 = space();
    			form1 = element("form");
    			div39 = element("div");
    			div30 = element("div");
    			label10 = element("label");
    			label10.textContent = "Nombre";
    			t55 = space();
    			input10 = element("input");
    			t56 = space();
    			div31 = element("div");
    			label11 = element("label");
    			label11.textContent = "Código del cupón";
    			t58 = space();
    			input11 = element("input");
    			t59 = space();
    			div32 = element("div");
    			label12 = element("label");
    			label12.textContent = "Porcentaje de descuento";
    			t61 = space();
    			input12 = element("input");
    			t62 = space();
    			div33 = element("div");
    			label13 = element("label");
    			label13.textContent = "Monto mínimo solicitado";
    			t64 = space();
    			input13 = element("input");
    			t65 = space();
    			div34 = element("div");
    			label14 = element("label");
    			label14.textContent = "Monto mínimo de producto\r\n                                                      solicitado";
    			t67 = space();
    			input14 = element("input");
    			t68 = space();
    			div35 = element("div");
    			label15 = element("label");
    			label15.textContent = "Fecha de inicio del cupón";
    			t70 = space();
    			input15 = element("input");
    			t71 = space();
    			div36 = element("div");
    			label16 = element("label");
    			label16.textContent = "Fecha caducidad del cupón";
    			t73 = space();
    			input16 = element("input");
    			t74 = space();
    			div37 = element("div");
    			label17 = element("label");
    			label17.textContent = "Cantidad de usos";
    			t76 = space();
    			input17 = element("input");
    			t77 = space();
    			div38 = element("div");
    			label18 = element("label");
    			label18.textContent = "Disponible para usar en\r\n                                                      una sola compra?";
    			t79 = space();
    			input18 = element("input");
    			t80 = space();
    			div41 = element("div");
    			div40 = element("div");
    			button5 = element("button");
    			button5.textContent = "Cerrar";
    			t82 = space();
    			button6 = element("button");
    			button6.textContent = "Añadir Cupón";
    			t84 = space();
    			div52 = element("div");
    			div51 = element("div");
    			div50 = element("div");
    			div45 = element("div");
    			button7 = element("button");
    			t85 = space();
    			div49 = element("div");
    			div47 = element("div");
    			lord_icon = element("lord-icon");
    			t86 = space();
    			div46 = element("div");
    			h42 = element("h4");
    			h42.textContent = "Estás seguro ?";
    			t88 = space();
    			p = element("p");
    			p.textContent = "¿Estás seguro de eliminar\r\n                                                      este cupón?";
    			t90 = space();
    			div48 = element("div");
    			button8 = element("button");
    			button8.textContent = "Cerrar";
    			t92 = space();
    			button9 = element("button");
    			button9.textContent = "Sí, borrar cupón!";
    			t94 = space();
    			div61 = element("div");
    			script0 = element("script");
    			t95 = space();
    			script1 = element("script");
    			t96 = space();
    			script2 = element("script");
    			t97 = space();
    			script3 = element("script");
    			t98 = space();
    			script4 = element("script");
    			t99 = space();
    			script5 = element("script");
    			t100 = space();
    			script6 = element("script");
    			t101 = space();
    			script7 = element("script");
    			t102 = space();
    			script8 = element("script");
    			t103 = space();
    			script9 = element("script");
    			t104 = space();
    			script10 = element("script");
    			t105 = space();
    			script11 = element("script");
    			t106 = space();
    			script12 = element("script");
    			t107 = space();
    			script13 = element("script");
    			attr_dev(div0, "class", "layout-width");
    			add_location(div0, file$f, 191, 12, 6176);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$f, 190, 9, 6137);
    			attr_dev(div1, "class", "app-menu navbar-menu");
    			add_location(div1, file$f, 197, 9, 6342);
    			attr_dev(div2, "class", "vertical-overlay");
    			add_location(div2, file$f, 203, 9, 6527);
    			attr_dev(h40, "class", "mb-sm-0");
    			add_location(h40, file$f, 216, 27, 7181);
    			attr_dev(a, "href", "/home");
    			add_location(a, file$f, 221, 36, 7434);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$f, 220, 33, 7368);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$f, 223, 33, 7533);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$f, 219, 30, 7306);
    			attr_dev(div3, "class", "page-title-right");
    			add_location(div3, file$f, 218, 27, 7244);
    			attr_dev(div4, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div4, file$f, 214, 24, 7043);
    			attr_dev(div5, "class", "col-12");
    			add_location(div5, file$f, 213, 21, 6997);
    			attr_dev(div6, "class", "row");
    			add_location(div6, file$f, 212, 18, 6957);
    			attr_dev(h41, "class", "card-title mb-0");
    			add_location(h41, file$f, 235, 30, 7997);
    			attr_dev(div7, "class", "card-header");
    			add_location(div7, file$f, 234, 27, 7940);
    			attr_dev(i, "class", "ri-add-line align-bottom me-1");
    			add_location(i, file$f, 250, 46, 8855);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-info add-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "id", "create-btn");
    			attr_dev(button0, "data-bs-target", "#showModalAñadir");
    			add_location(button0, file$f, 244, 42, 8454);
    			add_location(div8, file$f, 243, 39, 8405);
    			attr_dev(div9, "class", "col-sm-auto");
    			add_location(div9, file$f, 242, 36, 8339);
    			attr_dev(div10, "class", "row g-4 mb-3");
    			add_location(div10, file$f, 241, 33, 8275);
    			attr_dev(div11, "class", "row");
    			add_location(div11, file$f, 257, 33, 9184);
    			attr_dev(h50, "class", "modal-title");
    			attr_dev(h50, "id", "exampleModalLabel");
    			add_location(h50, file$f, 353, 45, 15800);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn-close");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			attr_dev(button1, "aria-label", "Close");
    			attr_dev(button1, "id", "close-modal");
    			add_location(button1, file$f, 358, 45, 16106);
    			attr_dev(div12, "class", "modal-header bg-light p-3");
    			add_location(div12, file$f, 351, 42, 15668);
    			attr_dev(label0, "for", "name-field");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$f, 368, 51, 16745);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "name-field");
    			attr_dev(input0, "class", "form-control");
    			attr_dev(input0, "placeholder", "Ingresar Nombre cupón");
    			input0.required = true;
    			add_location(input0, file$f, 372, 51, 17021);
    			attr_dev(div13, "class", "mb-3");
    			add_location(div13, file$f, 367, 48, 16674);
    			attr_dev(label1, "for", "code-field");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$f, 380, 51, 17576);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "id", "code-field");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "placeholder", "Ingresar Código del cupón");
    			input1.required = true;
    			add_location(input1, file$f, 384, 51, 17862);
    			attr_dev(div14, "class", "mb-3");
    			add_location(div14, file$f, 379, 48, 17505);
    			attr_dev(label2, "for", "desc-field");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$f, 393, 51, 18423);
    			attr_dev(input2, "type", "email");
    			attr_dev(input2, "id", "desc-field");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "placeholder", "Ingresar Porcentaje de descuento");
    			input2.required = true;
    			add_location(input2, file$f, 397, 51, 18716);
    			attr_dev(div15, "class", "mb-3");
    			add_location(div15, file$f, 392, 48, 18352);
    			attr_dev(label3, "for", "monto-field");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$f, 405, 51, 19283);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "id", "monto-field");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "placeholder", "Ingresar Monto mínimo solicitado");
    			input3.required = true;
    			add_location(input3, file$f, 409, 51, 19577);
    			attr_dev(div16, "class", "mb-3");
    			add_location(div16, file$f, 404, 48, 19212);
    			attr_dev(label4, "for", "montoP-field");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$f, 418, 51, 20146);
    			attr_dev(input4, "type", "text");
    			attr_dev(input4, "id", "montoP-field");
    			attr_dev(input4, "class", "form-control");
    			attr_dev(input4, "placeholder", "Ingresar Monto mínimo de producto");
    			input4.required = true;
    			add_location(input4, file$f, 423, 51, 20508);
    			attr_dev(div17, "class", "mb-3");
    			add_location(div17, file$f, 417, 48, 20075);
    			attr_dev(label5, "for", "fecha-field");
    			attr_dev(label5, "class", "form-label");
    			add_location(label5, file$f, 431, 51, 21077);
    			attr_dev(input5, "type", "text");
    			attr_dev(input5, "id", "fecha-field");
    			attr_dev(input5, "class", "form-control");
    			attr_dev(input5, "placeholder", "Ingresar Fecha inicio del cupón");
    			input5.required = true;
    			add_location(input5, file$f, 435, 51, 21373);
    			attr_dev(div18, "class", "mb-3");
    			add_location(div18, file$f, 430, 48, 21006);
    			attr_dev(label6, "for", "fechaC-field");
    			attr_dev(label6, "class", "form-label");
    			add_location(label6, file$f, 444, 51, 21941);
    			attr_dev(input6, "type", "text");
    			attr_dev(input6, "class", "form-control");
    			attr_dev(input6, "data-provider", "flatpickr");
    			attr_dev(input6, "data-date-format", "d M, Y");
    			attr_dev(input6, "data-disable-date", "15 12,2021");
    			add_location(input6, file$f, 448, 51, 22238);
    			attr_dev(div19, "class", "mb-3");
    			add_location(div19, file$f, 443, 48, 21870);
    			attr_dev(label7, "for", "fechaC-field");
    			attr_dev(label7, "class", "form-label");
    			add_location(label7, file$f, 456, 51, 22815);
    			attr_dev(input7, "type", "text");
    			attr_dev(input7, "class", "form-control");
    			attr_dev(input7, "data-provider", "flatpickr");
    			attr_dev(input7, "data-date-format", "d M, Y");
    			attr_dev(input7, "data-disable-date", "15 12,2021");
    			add_location(input7, file$f, 460, 51, 23112);
    			attr_dev(div20, "class", "mb-3");
    			add_location(div20, file$f, 455, 48, 22744);
    			attr_dev(label8, "for", "fecha-field");
    			attr_dev(label8, "class", "form-label");
    			add_location(label8, file$f, 468, 51, 23689);
    			attr_dev(input8, "type", "text");
    			attr_dev(input8, "id", "fecha-field");
    			attr_dev(input8, "class", "form-control");
    			attr_dev(input8, "placeholder", "Ingresar Cantidad de usos");
    			input8.required = true;
    			add_location(input8, file$f, 472, 51, 23976);
    			attr_dev(div21, "class", "mb-3");
    			add_location(div21, file$f, 467, 48, 23618);
    			attr_dev(label9, "for", "fecha-field");
    			attr_dev(label9, "class", "form-label");
    			add_location(label9, file$f, 480, 51, 24536);
    			attr_dev(input9, "type", "text");
    			attr_dev(input9, "id", "fecha-field");
    			attr_dev(input9, "class", "form-control");
    			attr_dev(input9, "placeholder", "Ingresar Número de disponibilidad para usar en compras");
    			input9.required = true;
    			add_location(input9, file$f, 485, 51, 24902);
    			attr_dev(div22, "class", "mb-3");
    			add_location(div22, file$f, 479, 48, 24465);
    			attr_dev(div23, "class", "modal-body");
    			add_location(div23, file$f, 366, 45, 16600);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn btn-light");
    			attr_dev(button2, "data-bs-dismiss", "modal");
    			add_location(button2, file$f, 496, 51, 25697);
    			attr_dev(button3, "type", "submit");
    			attr_dev(button3, "class", "btn btn-success");
    			attr_dev(button3, "id", "add-btn");
    			add_location(button3, file$f, 501, 51, 26054);
    			attr_dev(div24, "class", "hstack gap-2 justify-content-end");
    			add_location(div24, file$f, 494, 48, 25546);
    			attr_dev(div25, "class", "modal-footer");
    			add_location(div25, file$f, 493, 45, 25470);
    			add_location(form0, file$f, 365, 42, 16547);
    			attr_dev(div26, "class", "modal-content");
    			add_location(div26, file$f, 350, 39, 15597);
    			attr_dev(div27, "class", "modal-dialog modal-dialog-centered");
    			add_location(div27, file$f, 348, 36, 15468);
    			attr_dev(div28, "class", "modal fade");
    			attr_dev(div28, "id", "showModalEditar");
    			attr_dev(div28, "tabindex", "-1");
    			attr_dev(div28, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div28, "aria-hidden", "true");
    			add_location(div28, file$f, 342, 33, 15131);
    			attr_dev(h51, "class", "modal-title");
    			attr_dev(h51, "id", "exampleModalLabel");
    			add_location(h51, file$f, 526, 45, 27414);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "btn-close");
    			attr_dev(button4, "data-bs-dismiss", "modal");
    			attr_dev(button4, "aria-label", "Close");
    			attr_dev(button4, "id", "close-modal");
    			add_location(button4, file$f, 531, 45, 27720);
    			attr_dev(div29, "class", "modal-header bg-light p-3");
    			add_location(div29, file$f, 524, 42, 27282);
    			attr_dev(label10, "for", "name-field");
    			attr_dev(label10, "class", "form-label");
    			add_location(label10, file$f, 541, 51, 28359);
    			attr_dev(input10, "type", "text");
    			attr_dev(input10, "id", "name-field");
    			attr_dev(input10, "class", "form-control");
    			attr_dev(input10, "placeholder", "Ingresar Nombre cupón");
    			input10.required = true;
    			add_location(input10, file$f, 545, 51, 28635);
    			attr_dev(div30, "class", "mb-3");
    			add_location(div30, file$f, 540, 48, 28288);
    			attr_dev(label11, "for", "code-field");
    			attr_dev(label11, "class", "form-label");
    			add_location(label11, file$f, 554, 51, 29274);
    			attr_dev(input11, "type", "text");
    			attr_dev(input11, "id", "code-field");
    			attr_dev(input11, "class", "form-control");
    			attr_dev(input11, "placeholder", "Ingresar Código del cupón");
    			input11.required = true;
    			add_location(input11, file$f, 558, 51, 29560);
    			attr_dev(div31, "class", "mb-3");
    			add_location(div31, file$f, 553, 48, 29203);
    			attr_dev(label12, "for", "desc-field");
    			attr_dev(label12, "class", "form-label");
    			add_location(label12, file$f, 568, 51, 30205);
    			attr_dev(input12, "type", "text");
    			attr_dev(input12, "id", "desc-field");
    			attr_dev(input12, "pattern", "[0-9]" + 2);
    			attr_dev(input12, "class", "form-control");
    			attr_dev(input12, "placeholder", "Ingresar Porcentaje de descuento");
    			input12.required = true;
    			add_location(input12, file$f, 572, 51, 30498);
    			attr_dev(div32, "class", "mb-3");
    			add_location(div32, file$f, 567, 48, 30134);
    			attr_dev(label13, "for", "monto-field");
    			attr_dev(label13, "class", "form-label");
    			add_location(label13, file$f, 582, 51, 31237);
    			attr_dev(input13, "type", "text");
    			attr_dev(input13, "id", "monto-field");
    			attr_dev(input13, "class", "form-control");
    			attr_dev(input13, "pattern", "[0-9]+");
    			attr_dev(input13, "placeholder", "Ingresar Monto mínimo solicitado");
    			input13.required = true;
    			add_location(input13, file$f, 586, 51, 31531);
    			attr_dev(div33, "class", "mb-3");
    			add_location(div33, file$f, 581, 48, 31166);
    			attr_dev(label14, "for", "montoP-field");
    			attr_dev(label14, "class", "form-label");
    			add_location(label14, file$f, 597, 51, 32271);
    			attr_dev(input14, "type", "text");
    			attr_dev(input14, "id", "montoP-field");
    			attr_dev(input14, "pattern", "[0-9]+");
    			attr_dev(input14, "class", "form-control");
    			attr_dev(input14, "placeholder", "Ingresar Monto mínimo de producto");
    			input14.required = true;
    			add_location(input14, file$f, 602, 51, 32633);
    			attr_dev(div34, "class", "mb-3");
    			add_location(div34, file$f, 596, 48, 32200);
    			attr_dev(label15, "for", "fecha-field");
    			attr_dev(label15, "class", "form-label");
    			add_location(label15, file$f, 612, 51, 33374);
    			attr_dev(input15, "type", "text");
    			attr_dev(input15, "pattern", "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d" + 2 + ")$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d" + 2 + ")$");
    			attr_dev(input15, "id", "fecha-field");
    			attr_dev(input15, "class", "form-control");
    			attr_dev(input15, "placeholder", "Ingresar Fecha inicio del cupón (DD/MM/YYYY)");
    			input15.required = true;
    			add_location(input15, file$f, 616, 51, 33670);
    			attr_dev(div35, "class", "mb-3");
    			add_location(div35, file$f, 611, 48, 33303);
    			attr_dev(label16, "for", "fechaC-field");
    			attr_dev(label16, "class", "form-label");
    			add_location(label16, file$f, 627, 51, 34730);
    			attr_dev(input16, "type", "text");
    			attr_dev(input16, "class", "form-control");
    			attr_dev(input16, "pattern", "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d" + 2 + ")$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d" + 2 + ")$");
    			attr_dev(input16, "placeholder", "DD/MM/YYYY");
    			attr_dev(input16, "data-provider", "flatpickr");
    			attr_dev(input16, "data-date-format", "d M, Y");
    			attr_dev(input16, "data-disable-date", "15 12,2021");
    			add_location(input16, file$f, 631, 51, 35027);
    			attr_dev(div36, "class", "mb-3");
    			add_location(div36, file$f, 626, 48, 34659);
    			attr_dev(label17, "for", "fecha-field");
    			attr_dev(label17, "class", "form-label");
    			add_location(label17, file$f, 642, 51, 36161);
    			attr_dev(input17, "type", "text");
    			attr_dev(input17, "id", "fecha-field");
    			attr_dev(input17, "class", "form-control");
    			attr_dev(input17, "pattern", "[0-9]+");
    			attr_dev(input17, "placeholder", "Ingresar Cantidad de usos");
    			input17.required = true;
    			add_location(input17, file$f, 646, 51, 36448);
    			attr_dev(div37, "class", "mb-3");
    			add_location(div37, file$f, 641, 48, 36090);
    			attr_dev(label18, "for", "fecha-field");
    			attr_dev(label18, "class", "form-label");
    			add_location(label18, file$f, 656, 51, 37170);
    			attr_dev(input18, "type", "text");
    			attr_dev(input18, "id", "fecha-field");
    			attr_dev(input18, "class", "form-control");
    			attr_dev(input18, "placeholder", "1 (si) , 2 (no) ");
    			input18.required = true;
    			add_location(input18, file$f, 661, 51, 37536);
    			attr_dev(div38, "class", "mb-3");
    			add_location(div38, file$f, 655, 48, 37099);
    			attr_dev(div39, "class", "modal-body");
    			add_location(div39, file$f, 539, 45, 28214);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "class", "btn btn-light");
    			attr_dev(button5, "data-bs-dismiss", "modal");
    			add_location(button5, file$f, 673, 51, 38398);
    			attr_dev(button6, "type", "button");
    			attr_dev(button6, "class", "btn btn-success");
    			attr_dev(button6, "id", "edit-btn");
    			add_location(button6, file$f, 678, 51, 38755);
    			attr_dev(div40, "class", "hstack gap-2 justify-content-end");
    			add_location(div40, file$f, 671, 48, 38247);
    			attr_dev(div41, "class", "modal-footer");
    			add_location(div41, file$f, 670, 45, 38171);
    			add_location(form1, file$f, 538, 42, 28161);
    			attr_dev(div42, "class", "modal-content");
    			add_location(div42, file$f, 523, 39, 27211);
    			attr_dev(div43, "class", "modal-dialog modal-dialog-centered");
    			add_location(div43, file$f, 521, 36, 27082);
    			attr_dev(div44, "class", "modal fade");
    			attr_dev(div44, "id", "showModalAñadir");
    			attr_dev(div44, "tabindex", "-1");
    			attr_dev(div44, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div44, "aria-hidden", "true");
    			add_location(div44, file$f, 515, 33, 26745);
    			attr_dev(button7, "type", "button");
    			attr_dev(button7, "class", "btn-close");
    			attr_dev(button7, "data-bs-dismiss", "modal");
    			attr_dev(button7, "aria-label", "Close");
    			attr_dev(button7, "id", "btn-close");
    			add_location(button7, file$f, 701, 45, 40068);
    			attr_dev(div45, "class", "modal-header");
    			add_location(div45, file$f, 700, 42, 39995);
    			if (!src_url_equal(lord_icon.src, lord_icon_src_value = "https://cdn.lordicon.com/gsqxdxog.json")) set_custom_element_data(lord_icon, "src", lord_icon_src_value);
    			set_custom_element_data(lord_icon, "trigger", "loop");
    			set_custom_element_data(lord_icon, "colors", "primary:#f7b84b,secondary:#f06548");
    			set_style(lord_icon, "width", "100px");
    			set_style(lord_icon, "height", "100px");
    			add_location(lord_icon, file$f, 710, 48, 40658);
    			add_location(h42, file$f, 717, 51, 41212);
    			attr_dev(p, "class", "text-muted mx-4 mb-0");
    			add_location(p, file$f, 718, 51, 41288);
    			attr_dev(div46, "class", "mt-4 pt-2 fs-15 mx-4 mx-sm-5");
    			add_location(div46, file$f, 715, 48, 41065);
    			attr_dev(div47, "class", "mt-2 text-center");
    			add_location(div47, file$f, 709, 45, 40578);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "class", "btn w-sm btn-light");
    			attr_dev(button8, "data-bs-dismiss", "modal");
    			add_location(button8, file$f, 727, 48, 41894);
    			attr_dev(button9, "type", "button");
    			attr_dev(button9, "class", "btn w-sm btn-danger ");
    			attr_dev(button9, "id", "delete-record");
    			add_location(button9, file$f, 732, 48, 42241);
    			attr_dev(div48, "class", "d-flex gap-2 justify-content-center mt-4 mb-2");
    			add_location(div48, file$f, 725, 45, 41736);
    			attr_dev(div49, "class", "modal-body");
    			add_location(div49, file$f, 708, 42, 40507);
    			attr_dev(div50, "class", "modal-content");
    			add_location(div50, file$f, 699, 39, 39924);
    			attr_dev(div51, "class", "modal-dialog modal-dialog-centered");
    			add_location(div51, file$f, 697, 36, 39795);
    			attr_dev(div52, "class", "modal fade zoomIn");
    			attr_dev(div52, "id", "deleteRecordModal");
    			attr_dev(div52, "tabindex", "-1");
    			attr_dev(div52, "aria-hidden", "true");
    			add_location(div52, file$f, 692, 33, 39522);
    			attr_dev(div53, "id", "customerList");
    			add_location(div53, file$f, 240, 30, 8217);
    			attr_dev(div54, "class", "card-body");
    			add_location(div54, file$f, 239, 27, 8162);
    			attr_dev(div55, "class", "card");
    			add_location(div55, file$f, 233, 24, 7893);
    			attr_dev(div56, "class", "col-lg-12");
    			add_location(div56, file$f, 232, 21, 7844);
    			attr_dev(div57, "class", "row");
    			add_location(div57, file$f, 231, 18, 7804);
    			attr_dev(div58, "class", "container-fluid");
    			add_location(div58, file$f, 210, 15, 6863);
    			attr_dev(div59, "class", "page-content");
    			add_location(div59, file$f, 209, 12, 6820);
    			attr_dev(div60, "class", "main-content");
    			add_location(div60, file$f, 208, 9, 6780);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$f, 766, 12, 43593);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$f, 768, 12, 43710);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$f, 770, 12, 43817);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$f, 772, 12, 43921);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$f, 774, 12, 44030);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$f, 776, 12, 44141);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/prismjs/prism.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$f, 778, 12, 44251);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/list.js/list.min.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$f, 779, 12, 44332);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/libs/list.pagination.js/list.pagination.min.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$f, 781, 12, 44432);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/listjs.init.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$f, 785, 12, 44590);
    			if (!src_url_equal(script10.src, script10_src_value = "http://localhost:8080/libs/sweetalert2/sweetalert2.min.js")) attr_dev(script10, "src", script10_src_value);
    			add_location(script10, file$f, 789, 12, 44729);
    			if (!src_url_equal(script11.src, script11_src_value = "http://localhost:8080/libs/%40simonwep/pickr/pickr.min.js")) attr_dev(script11, "src", script11_src_value);
    			add_location(script11, file$f, 793, 12, 44890);
    			if (!src_url_equal(script12.src, script12_src_value = "http://localhost:8080/js/pages/form-pickers.init.js")) attr_dev(script12, "src", script12_src_value);
    			add_location(script12, file$f, 797, 12, 45033);
    			if (!src_url_equal(script13.src, script13_src_value = "http://localhost:8080/js/app.js")) attr_dev(script13, "src", script13_src_value);
    			add_location(script13, file$f, 801, 12, 45169);
    			add_location(div61, file$f, 761, 9, 43373);
    			attr_dev(div62, "id", "layout-wrapper");
    			add_location(div62, file$f, 189, 6, 6101);
    			add_location(main, file$f, 187, 3, 6060);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div62);
    			append_dev(div62, header);
    			append_dev(header, div0);
    			mount_component(headerapp, div0, null);
    			append_dev(div62, t0);
    			append_dev(div62, div1);
    			mount_component(sidebar, div1, null);
    			append_dev(div62, t1);
    			append_dev(div62, div2);
    			append_dev(div62, t2);
    			append_dev(div62, div60);
    			append_dev(div60, div59);
    			append_dev(div59, div58);
    			append_dev(div58, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h40);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			append_dev(div3, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a);
    			append_dev(ol, t6);
    			append_dev(ol, li1);
    			append_dev(div58, t8);
    			append_dev(div58, div57);
    			append_dev(div57, div56);
    			append_dev(div56, div55);
    			append_dev(div55, div7);
    			append_dev(div7, h41);
    			append_dev(div55, t10);
    			append_dev(div55, div54);
    			append_dev(div54, div53);
    			append_dev(div53, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, button0);
    			append_dev(button0, i);
    			append_dev(button0, t11);
    			append_dev(div53, t12);
    			append_dev(div53, div11);
    			info.block.m(div11, info.anchor = null);
    			info.mount = () => div11;
    			info.anchor = null;
    			append_dev(div53, t13);
    			append_dev(div53, div28);
    			append_dev(div28, div27);
    			append_dev(div27, div26);
    			append_dev(div26, div12);
    			append_dev(div12, h50);
    			append_dev(div12, t15);
    			append_dev(div12, button1);
    			append_dev(div26, t16);
    			append_dev(div26, form0);
    			append_dev(form0, div23);
    			append_dev(div23, div13);
    			append_dev(div13, label0);
    			append_dev(div13, t18);
    			append_dev(div13, input0);
    			append_dev(div23, t19);
    			append_dev(div23, div14);
    			append_dev(div14, label1);
    			append_dev(div14, t21);
    			append_dev(div14, input1);
    			append_dev(div23, t22);
    			append_dev(div23, div15);
    			append_dev(div15, label2);
    			append_dev(div15, t24);
    			append_dev(div15, input2);
    			append_dev(div23, t25);
    			append_dev(div23, div16);
    			append_dev(div16, label3);
    			append_dev(div16, t27);
    			append_dev(div16, input3);
    			append_dev(div23, t28);
    			append_dev(div23, div17);
    			append_dev(div17, label4);
    			append_dev(div17, t30);
    			append_dev(div17, input4);
    			append_dev(div23, t31);
    			append_dev(div23, div18);
    			append_dev(div18, label5);
    			append_dev(div18, t33);
    			append_dev(div18, input5);
    			append_dev(div23, t34);
    			append_dev(div23, div19);
    			append_dev(div19, label6);
    			append_dev(div19, t36);
    			append_dev(div19, input6);
    			append_dev(div23, t37);
    			append_dev(div23, div20);
    			append_dev(div20, label7);
    			append_dev(div20, t39);
    			append_dev(div20, input7);
    			append_dev(div23, t40);
    			append_dev(div23, div21);
    			append_dev(div21, label8);
    			append_dev(div21, t42);
    			append_dev(div21, input8);
    			append_dev(div23, t43);
    			append_dev(div23, div22);
    			append_dev(div22, label9);
    			append_dev(div22, t45);
    			append_dev(div22, input9);
    			append_dev(form0, t46);
    			append_dev(form0, div25);
    			append_dev(div25, div24);
    			append_dev(div24, button2);
    			append_dev(div24, t48);
    			append_dev(div24, button3);
    			append_dev(div53, t50);
    			append_dev(div53, div44);
    			append_dev(div44, div43);
    			append_dev(div43, div42);
    			append_dev(div42, div29);
    			append_dev(div29, h51);
    			append_dev(div29, t52);
    			append_dev(div29, button4);
    			append_dev(div42, t53);
    			append_dev(div42, form1);
    			append_dev(form1, div39);
    			append_dev(div39, div30);
    			append_dev(div30, label10);
    			append_dev(div30, t55);
    			append_dev(div30, input10);
    			set_input_value(input10, /*datosCupon*/ ctx[0].name);
    			append_dev(div39, t56);
    			append_dev(div39, div31);
    			append_dev(div31, label11);
    			append_dev(div31, t58);
    			append_dev(div31, input11);
    			set_input_value(input11, /*datosCupon*/ ctx[0].code);
    			append_dev(div39, t59);
    			append_dev(div39, div32);
    			append_dev(div32, label12);
    			append_dev(div32, t61);
    			append_dev(div32, input12);
    			set_input_value(input12, /*datosCupon*/ ctx[0].percentage_discount);
    			append_dev(div39, t62);
    			append_dev(div39, div33);
    			append_dev(div33, label13);
    			append_dev(div33, t64);
    			append_dev(div33, input13);
    			set_input_value(input13, /*datosCupon*/ ctx[0].min_amount_required);
    			append_dev(div39, t65);
    			append_dev(div39, div34);
    			append_dev(div34, label14);
    			append_dev(div34, t67);
    			append_dev(div34, input14);
    			set_input_value(input14, /*datosCupon*/ ctx[0].min_product_required);
    			append_dev(div39, t68);
    			append_dev(div39, div35);
    			append_dev(div35, label15);
    			append_dev(div35, t70);
    			append_dev(div35, input15);
    			set_input_value(input15, /*datosCupon*/ ctx[0].start_date);
    			append_dev(div39, t71);
    			append_dev(div39, div36);
    			append_dev(div36, label16);
    			append_dev(div36, t73);
    			append_dev(div36, input16);
    			set_input_value(input16, /*datosCupon*/ ctx[0].end_date);
    			append_dev(div39, t74);
    			append_dev(div39, div37);
    			append_dev(div37, label17);
    			append_dev(div37, t76);
    			append_dev(div37, input17);
    			set_input_value(input17, /*datosCupon*/ ctx[0].count_uses);
    			append_dev(div39, t77);
    			append_dev(div39, div38);
    			append_dev(div38, label18);
    			append_dev(div38, t79);
    			append_dev(div38, input18);
    			set_input_value(input18, /*datosCupon*/ ctx[0].valid_only_first_purchase);
    			append_dev(form1, t80);
    			append_dev(form1, div41);
    			append_dev(div41, div40);
    			append_dev(div40, button5);
    			append_dev(div40, t82);
    			append_dev(div40, button6);
    			append_dev(div53, t84);
    			append_dev(div53, div52);
    			append_dev(div52, div51);
    			append_dev(div51, div50);
    			append_dev(div50, div45);
    			append_dev(div45, button7);
    			append_dev(div50, t85);
    			append_dev(div50, div49);
    			append_dev(div49, div47);
    			append_dev(div47, lord_icon);
    			append_dev(div47, t86);
    			append_dev(div47, div46);
    			append_dev(div46, h42);
    			append_dev(div46, t88);
    			append_dev(div46, p);
    			append_dev(div49, t90);
    			append_dev(div49, div48);
    			append_dev(div48, button8);
    			append_dev(div48, t92);
    			append_dev(div48, button9);
    			append_dev(div62, t94);
    			append_dev(div62, div61);
    			append_dev(div61, script0);
    			append_dev(div61, t95);
    			append_dev(div61, script1);
    			append_dev(div61, t96);
    			append_dev(div61, script2);
    			append_dev(div61, t97);
    			append_dev(div61, script3);
    			append_dev(div61, t98);
    			append_dev(div61, script4);
    			append_dev(div61, t99);
    			append_dev(div61, script5);
    			append_dev(div61, t100);
    			append_dev(div61, script6);
    			append_dev(div61, t101);
    			append_dev(div61, script7);
    			append_dev(div61, t102);
    			append_dev(div61, script8);
    			append_dev(div61, t103);
    			append_dev(div61, script9);
    			append_dev(div61, t104);
    			append_dev(div61, script10);
    			append_dev(div61, t105);
    			append_dev(div61, script11);
    			append_dev(div61, t106);
    			append_dev(div61, script12);
    			append_dev(div61, t107);
    			append_dev(div61, script13);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input10, "input", /*input10_input_handler*/ ctx[6]),
    					listen_dev(input11, "input", /*input11_input_handler*/ ctx[7]),
    					listen_dev(input12, "input", /*input12_input_handler*/ ctx[8]),
    					listen_dev(input13, "input", /*input13_input_handler*/ ctx[9]),
    					listen_dev(input14, "input", /*input14_input_handler*/ ctx[10]),
    					listen_dev(input15, "input", /*input15_input_handler*/ ctx[11]),
    					listen_dev(input16, "input", /*input16_input_handler*/ ctx[12]),
    					listen_dev(input17, "input", /*input17_input_handler*/ ctx[13]),
    					listen_dev(input18, "input", /*input18_input_handler*/ ctx[14]),
    					listen_dev(button6, "click", /*sendDataCreateCoupon*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);

    			if (dirty & /*datosCupon*/ 1 && input10.value !== /*datosCupon*/ ctx[0].name) {
    				set_input_value(input10, /*datosCupon*/ ctx[0].name);
    			}

    			if (dirty & /*datosCupon*/ 1 && input11.value !== /*datosCupon*/ ctx[0].code) {
    				set_input_value(input11, /*datosCupon*/ ctx[0].code);
    			}

    			if (dirty & /*datosCupon*/ 1 && input12.value !== /*datosCupon*/ ctx[0].percentage_discount) {
    				set_input_value(input12, /*datosCupon*/ ctx[0].percentage_discount);
    			}

    			if (dirty & /*datosCupon*/ 1 && input13.value !== /*datosCupon*/ ctx[0].min_amount_required) {
    				set_input_value(input13, /*datosCupon*/ ctx[0].min_amount_required);
    			}

    			if (dirty & /*datosCupon*/ 1 && input14.value !== /*datosCupon*/ ctx[0].min_product_required) {
    				set_input_value(input14, /*datosCupon*/ ctx[0].min_product_required);
    			}

    			if (dirty & /*datosCupon*/ 1 && input15.value !== /*datosCupon*/ ctx[0].start_date) {
    				set_input_value(input15, /*datosCupon*/ ctx[0].start_date);
    			}

    			if (dirty & /*datosCupon*/ 1 && input16.value !== /*datosCupon*/ ctx[0].end_date) {
    				set_input_value(input16, /*datosCupon*/ ctx[0].end_date);
    			}

    			if (dirty & /*datosCupon*/ 1 && input17.value !== /*datosCupon*/ ctx[0].count_uses) {
    				set_input_value(input17, /*datosCupon*/ ctx[0].count_uses);
    			}

    			if (dirty & /*datosCupon*/ 1 && input18.value !== /*datosCupon*/ ctx[0].valid_only_first_purchase) {
    				set_input_value(input18, /*datosCupon*/ ctx[0].valid_only_first_purchase);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$6.name,
    		type: "then",
    		source: "(187:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (334:36) {:catch error}
    function create_catch_block$6(ctx) {
    	let t_value = /*error*/ ctx[23] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$6.name,
    		type: "catch",
    		source: "(334:36) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (261:36) {:then data}
    function create_then_block_1$6(ctx) {
    	let each_1_anchor;
    	let each_value = /*data*/ ctx[19];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*deleteCupon, getAllCupons*/ 20) {
    				each_value = /*data*/ ctx[19];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$6.name,
    		type: "then",
    		source: "(261:36) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (262:39) {#each data as coupon}
    function create_each_block$7(ctx) {
    	let div11;
    	let div10;
    	let div9;
    	let div4;
    	let div1;
    	let div0;
    	let i0;
    	let t0;
    	let div2;
    	let h4;
    	let t1_value = /*coupon*/ ctx[20].name + "";
    	let t1;
    	let t2;
    	let p0;
    	let t3_value = /*coupon*/ ctx[20].code + "";
    	let t3;
    	let t4;
    	let p1;
    	let t5_value = /*coupon*/ ctx[20].start_date + "";
    	let t5;
    	let t6;
    	let p2;
    	let t7_value = /*coupon*/ ctx[20].end_date + "";
    	let t7;
    	let t8;
    	let div3;
    	let span1;
    	let i1;
    	let t9_value = (/*coupon*/ ctx[20].percentage_discount ?? "") + "";
    	let t9;
    	let t10;
    	let span0;
    	let t11;
    	let div8;
    	let div5;
    	let a;
    	let t12;
    	let t13;
    	let div6;
    	let button0;
    	let t15;
    	let div7;
    	let button1;
    	let t17;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[5](/*coupon*/ ctx[20]);
    	}

    	const block = {
    		c: function create() {
    			div11 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			div4 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			i0 = element("i");
    			t0 = space();
    			div2 = element("div");
    			h4 = element("h4");
    			t1 = text(t1_value);
    			t2 = space();
    			p0 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			p1 = element("p");
    			t5 = text(t5_value);
    			t6 = space();
    			p2 = element("p");
    			t7 = text(t7_value);
    			t8 = space();
    			div3 = element("div");
    			span1 = element("span");
    			i1 = element("i");
    			t9 = text(t9_value);
    			t10 = text("%");
    			span0 = element("span");
    			t11 = space();
    			div8 = element("div");
    			div5 = element("div");
    			a = element("a");
    			t12 = text("Ver Detalles");
    			t13 = space();
    			div6 = element("div");
    			button0 = element("button");
    			button0.textContent = "Editar";
    			t15 = space();
    			div7 = element("div");
    			button1 = element("button");
    			button1.textContent = "Borrar";
    			t17 = space();
    			attr_dev(i0, "class", "ri-gift-fill");
    			add_location(i0, file$f, 272, 60, 10278);
    			attr_dev(div0, "class", "avatar-title bg-soft-sucess text-success fs-17 rounded");
    			add_location(div0, file$f, 270, 57, 10087);
    			attr_dev(div1, "class", "avatar-sm flex-shrink-0");
    			add_location(div1, file$f, 268, 54, 9933);
    			attr_dev(h4, "class", "fs-4 mb-3 text-white");
    			add_location(h4, file$f, 278, 57, 10698);
    			attr_dev(p0, "class", "text-white-50 mb-0");
    			add_location(p0, file$f, 282, 57, 10990);
    			attr_dev(p1, "class", "text-white-50 mb-0");
    			add_location(p1, file$f, 286, 57, 11278);
    			attr_dev(p2, "class", "text-white-50 mb-0");
    			add_location(p2, file$f, 290, 57, 11572);
    			attr_dev(div2, "class", "flex-grow-1 ms-3");
    			add_location(div2, file$f, 276, 54, 10551);
    			attr_dev(i1, "class", "ri-arrow-down-s-line fs-20 align-middle me-1");
    			add_location(i1, file$f, 299, 61, 12253);
    			add_location(span0, file$f, 301, 67, 12474);
    			attr_dev(span1, "class", "badge badge-soft-primary fs-20");
    			add_location(span1, file$f, 297, 57, 12085);
    			attr_dev(div3, "class", "flex-shrink-0 align-self-center");
    			add_location(div3, file$f, 295, 54, 11923);
    			attr_dev(div4, "class", "d-flex align-items-center");
    			add_location(div4, file$f, 266, 51, 9783);
    			attr_dev(a, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(a, "href", "/cupones/" + /*coupon*/ ctx[20].id);
    			add_location(a, file$f, 307, 57, 12882);
    			attr_dev(div5, "class", "edit");
    			add_location(div5, file$f, 306, 54, 12805);
    			attr_dev(button0, "class", "btn btn-sm btn-warning edit-item-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "data-bs-target", "#showModalEditar");
    			add_location(button0, file$f, 313, 57, 13353);
    			attr_dev(div6, "class", "edit");
    			add_location(div6, file$f, 312, 54, 13276);
    			attr_dev(button1, "class", "btn btn-sm btn-danger remove-item-btn");
    			attr_dev(button1, "data-bs-toggle", "modal");
    			attr_dev(button1, "data-bs-target", "#deleteRecordModal");
    			add_location(button1, file$f, 320, 57, 13920);
    			attr_dev(div7, "class", "remove");
    			add_location(div7, file$f, 319, 54, 13841);
    			attr_dev(div8, "class", "d-flex gap-2 pt-3");
    			add_location(div8, file$f, 304, 51, 12663);
    			attr_dev(div9, "class", "card-body");
    			add_location(div9, file$f, 265, 48, 9707);
    			attr_dev(div10, "class", "card bg-info card-height-100");
    			add_location(div10, file$f, 263, 45, 9566);
    			attr_dev(div11, "class", "col-xxl-4 col-lg-6");
    			add_location(div11, file$f, 262, 42, 9487);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div11, anchor);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div4);
    			append_dev(div4, div1);
    			append_dev(div1, div0);
    			append_dev(div0, i0);
    			append_dev(div4, t0);
    			append_dev(div4, div2);
    			append_dev(div2, h4);
    			append_dev(h4, t1);
    			append_dev(div2, t2);
    			append_dev(div2, p0);
    			append_dev(p0, t3);
    			append_dev(div2, t4);
    			append_dev(div2, p1);
    			append_dev(p1, t5);
    			append_dev(div2, t6);
    			append_dev(div2, p2);
    			append_dev(p2, t7);
    			append_dev(div4, t8);
    			append_dev(div4, div3);
    			append_dev(div3, span1);
    			append_dev(span1, i1);
    			append_dev(span1, t9);
    			append_dev(span1, t10);
    			append_dev(span1, span0);
    			append_dev(div9, t11);
    			append_dev(div9, div8);
    			append_dev(div8, div5);
    			append_dev(div5, a);
    			append_dev(a, t12);
    			append_dev(div8, t13);
    			append_dev(div8, div6);
    			append_dev(div6, button0);
    			append_dev(div8, t15);
    			append_dev(div8, div7);
    			append_dev(div7, button1);
    			append_dev(div11, t17);

    			if (!mounted) {
    				dispose = listen_dev(button1, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div11);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(262:39) {#each data as coupon}",
    		ctx
    	});

    	return block;
    }

    // (259:59)                                          <!-- promise is pending -->                                      {:then data}
    function create_pending_block_1$6(ctx) {
    	const block = { c: noop$1, m: noop$1, p: noop$1, d: noop$1 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$6.name,
    		type: "pending",
    		source: "(259:59)                                          <!-- promise is pending -->                                      {:then data}",
    		ctx
    	});

    	return block;
    }

    // (185:28)      Loading...  {:then data}
    function create_pending_block$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$6.name,
    		type: "pending",
    		source: "(185:28)      Loading...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let t0;
    	let link0;
    	let link1;
    	let link2;
    	let link3;
    	let link4;
    	let script;
    	let script_src_value;
    	let link5;
    	let link6;
    	let link7;
    	let link8;
    	let t1;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$6,
    		then: create_then_block$6,
    		catch: create_catch_block_1$6,
    		value: 19,
    		error: 23,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			script = element("script");
    			link5 = element("link");
    			link6 = element("link");
    			link7 = element("link");
    			link8 = element("link");
    			t1 = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Cupones";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$f, 139, 3, 4611);
    			attr_dev(link1, "href", "http://localhost:8080/libs/sweetalert2/sweetalert2.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$f, 142, 3, 4722);
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "href", "http://localhost:8080/libs/%40simonwep/pickr/themes/classic.min.css");
    			add_location(link2, file$f, 147, 3, 4896);
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "href", "http://localhost:8080/libs/%40simonwep/pickr/themes/monolith.min.css");
    			add_location(link3, file$f, 151, 3, 5044);
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "href", "http://localhost:8080/libs/%40simonwep/pickr/themes/nano.min.css");
    			add_location(link4, file$f, 155, 3, 5194);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$f, 161, 3, 5368);
    			attr_dev(link5, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$f, 163, 3, 5458);
    			attr_dev(link6, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link6, "rel", "stylesheet");
    			attr_dev(link6, "type", "text/css");
    			add_location(link6, file$f, 168, 3, 5599);
    			attr_dev(link7, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link7, "rel", "stylesheet");
    			attr_dev(link7, "type", "text/css");
    			add_location(link7, file$f, 173, 3, 5733);
    			attr_dev(link8, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link8, "rel", "stylesheet");
    			attr_dev(link8, "type", "text/css");
    			add_location(link8, file$f, 178, 3, 5868);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, script);
    			append_dev(document.head, link5);
    			append_dev(document.head, link6);
    			append_dev(document.head, link7);
    			append_dev(document.head, link8);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(script);
    			detach_dev(link5);
    			detach_dev(link6);
    			detach_dev(link7);
    			detach_dev(link8);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(15, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Cupones', slots, []);
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = "/";
    	}

    	let myHeaders = new Headers();
    	myHeaders.append("Authorization", `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	let requestOptions = {
    		method: "GET",
    		headers: myHeaders,
    		redirect: "follow"
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	async function getAllCupons() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/coupons`, requestOptions);
    		const dataCoupons = await response.json();
    		return dataCoupons.data;
    	}

    	// Agregar cupon
    	const datosCupon = {
    		name: '',
    		code: '',
    		percentage_discount: '',
    		min_amount_required: '',
    		min_product_required: '',
    		start_date: '',
    		end_date: '',
    		max_uses: '',
    		count_uses: '',
    		valid_only_first_purchase: "1",
    		status: "1"
    	};

    	async function sendDataCreateCoupon() {
    		const bodyForm = new FormData();
    		bodyForm.append("action", "create");
    		bodyForm.append("name", datosCupon.name);
    		bodyForm.append("code", datosCupon.code);
    		bodyForm.append("percentage_discount", datosCupon.percentage_discount);
    		bodyForm.append("min_amount_required", datosCupon.min_amount_required);
    		bodyForm.append("min_product_required", datosCupon.min_amount_required);
    		bodyForm.append("start_date", datosCupon.start_date);
    		bodyForm.append("end_date", datosCupon.end_date);
    		bodyForm.append("max_uses", datosCupon.max_uses);
    		bodyForm.append("count_uses", datosCupon.count_uses);
    		bodyForm.append("valid_only_first_purchase", datosCupon.valid_only_first_purchase);
    		bodyForm.append("status", datosCupon.status);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/CouponsController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Se añadio correctamente",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "info",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						location.href = "/cupones";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	// Eliminar cupon
    	async function deleteCupon(id) {
    		const bodyForm = new FormData();
    		bodyForm.append("action", "delete");
    		bodyForm.append("id", id);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/CouponsController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Se elimino la categoria",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "error",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<Cupones> was created with unknown prop '${key}'`);
    	});

    	const click_handler = coupon => deleteCupon(coupon.id);

    	function input10_input_handler() {
    		datosCupon.name = this.value;
    		$$invalidate(0, datosCupon);
    	}

    	function input11_input_handler() {
    		datosCupon.code = this.value;
    		$$invalidate(0, datosCupon);
    	}

    	function input12_input_handler() {
    		datosCupon.percentage_discount = this.value;
    		$$invalidate(0, datosCupon);
    	}

    	function input13_input_handler() {
    		datosCupon.min_amount_required = this.value;
    		$$invalidate(0, datosCupon);
    	}

    	function input14_input_handler() {
    		datosCupon.min_product_required = this.value;
    		$$invalidate(0, datosCupon);
    	}

    	function input15_input_handler() {
    		datosCupon.start_date = this.value;
    		$$invalidate(0, datosCupon);
    	}

    	function input16_input_handler() {
    		datosCupon.end_date = this.value;
    		$$invalidate(0, datosCupon);
    	}

    	function input17_input_handler() {
    		datosCupon.count_uses = this.value;
    		$$invalidate(0, datosCupon);
    	}

    	function input18_input_handler() {
    		datosCupon.valid_only_first_purchase = this.value;
    		$$invalidate(0, datosCupon);
    	}

    	$$self.$capture_state = () => ({
    		HeaderApp,
    		Sidebar,
    		Swal: sweetalert2_all,
    		axios,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		getAllCupons,
    		datosCupon,
    		sendDataCreateCoupon,
    		deleteCupon,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		datosCupon,
    		getDataUserLoggin,
    		getAllCupons,
    		sendDataCreateCoupon,
    		deleteCupon,
    		click_handler,
    		input10_input_handler,
    		input11_input_handler,
    		input12_input_handler,
    		input13_input_handler,
    		input14_input_handler,
    		input15_input_handler,
    		input16_input_handler,
    		input17_input_handler,
    		input18_input_handler
    	];
    }

    class Cupones extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Cupones",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* src\views\Products.svelte generated by Svelte v3.52.0 */

    const file$e = "src\\views\\Products.svelte";

    function create_fragment$e(ctx) {
    	let t0;
    	let link0;
    	let link1;
    	let link2;
    	let link3;
    	let script0;
    	let script0_src_value;
    	let link4;
    	let link5;
    	let link6;
    	let link7;
    	let t1;
    	let main;
    	let div84;
    	let header;
    	let div9;
    	let div8;
    	let div1;
    	let div0;
    	let a0;
    	let span0;
    	let img0;
    	let img0_src_value;
    	let t2;
    	let span1;
    	let img1;
    	let img1_src_value;
    	let t3;
    	let a1;
    	let span2;
    	let img2;
    	let img2_src_value;
    	let t4;
    	let span3;
    	let img3;
    	let img3_src_value;
    	let t5;
    	let div7;
    	let div2;
    	let button0;
    	let i0;
    	let t6;
    	let div3;
    	let button1;
    	let i1;
    	let t7;
    	let div6;
    	let button2;
    	let span7;
    	let img4;
    	let img4_src_value;
    	let t8;
    	let span6;
    	let span4;
    	let t10;
    	let span5;
    	let t12;
    	let div5;
    	let h6;
    	let t14;
    	let a2;
    	let i2;
    	let t15;
    	let span8;
    	let t17;
    	let div4;
    	let t18;
    	let a3;
    	let i3;
    	let t19;
    	let span9;
    	let t21;
    	let div15;
    	let div10;
    	let a4;
    	let span10;
    	let img5;
    	let img5_src_value;
    	let t22;
    	let span11;
    	let img6;
    	let img6_src_value;
    	let t23;
    	let a5;
    	let span12;
    	let img7;
    	let img7_src_value;
    	let t24;
    	let span13;
    	let img8;
    	let img8_src_value;
    	let t25;
    	let button3;
    	let i4;
    	let t26;
    	let div13;
    	let div12;
    	let div11;
    	let t27;
    	let ul0;
    	let li0;
    	let span14;
    	let t29;
    	let li1;
    	let a6;
    	let i5;
    	let t30;
    	let span15;
    	let t32;
    	let li2;
    	let a7;
    	let i6;
    	let t33;
    	let span16;
    	let t35;
    	let li3;
    	let a8;
    	let i7;
    	let t36;
    	let span17;
    	let t38;
    	let li4;
    	let a9;
    	let i8;
    	let t39;
    	let span18;
    	let t41;
    	let li5;
    	let a10;
    	let i9;
    	let t42;
    	let span19;
    	let t44;
    	let li6;
    	let a11;
    	let i10;
    	let t45;
    	let span20;
    	let t47;
    	let div14;
    	let t48;
    	let div16;
    	let t49;
    	let div83;
    	let div82;
    	let div81;
    	let div20;
    	let div19;
    	let div18;
    	let h40;
    	let t51;
    	let div17;
    	let ol;
    	let li7;
    	let a12;
    	let t53;
    	let li8;
    	let t55;
    	let div80;
    	let div79;
    	let div77;
    	let div21;
    	let t56;
    	let div76;
    	let div75;
    	let div27;
    	let div23;
    	let div22;
    	let button4;
    	let i11;
    	let t57;
    	let t58;
    	let div26;
    	let div25;
    	let div24;
    	let input0;
    	let t59;
    	let i12;
    	let t60;
    	let div32;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t62;
    	let th1;
    	let t64;
    	let th2;
    	let t66;
    	let th3;
    	let t68;
    	let th4;
    	let t70;
    	let tbody;
    	let tr1;
    	let td0;
    	let img9;
    	let img9_src_value;
    	let t71;
    	let td1;
    	let t73;
    	let td2;
    	let t75;
    	let td3;
    	let t77;
    	let td4;
    	let div31;
    	let div28;
    	let button5;
    	let t79;
    	let div29;
    	let button6;
    	let t81;
    	let div30;
    	let button7;
    	let t83;
    	let div34;
    	let div33;
    	let lord_icon0;
    	let lord_icon0_src_value;
    	let t84;
    	let h50;
    	let t86;
    	let p0;
    	let t88;
    	let div36;
    	let div35;
    	let a13;
    	let t90;
    	let ul1;
    	let t91;
    	let a14;
    	let t93;
    	let div51;
    	let div50;
    	let div49;
    	let div37;
    	let h51;
    	let t95;
    	let button8;
    	let t96;
    	let form0;
    	let div46;
    	let div42;
    	let label0;
    	let t98;
    	let div41;
    	let div40;
    	let div39;
    	let img10;
    	let img10_src_value;
    	let t99;
    	let div38;
    	let input1;
    	let t100;
    	let label1;
    	let span21;
    	let i13;
    	let t101;
    	let div43;
    	let label2;
    	let t103;
    	let input2;
    	let t104;
    	let div44;
    	let label3;
    	let t106;
    	let input3;
    	let t107;
    	let div45;
    	let label4;
    	let t109;
    	let input4;
    	let t110;
    	let div48;
    	let div47;
    	let button9;
    	let t112;
    	let button10;
    	let t114;
    	let div66;
    	let div65;
    	let div64;
    	let div52;
    	let h52;
    	let t116;
    	let button11;
    	let t117;
    	let form1;
    	let div61;
    	let div57;
    	let label5;
    	let t119;
    	let div56;
    	let div55;
    	let div54;
    	let img11;
    	let img11_src_value;
    	let t120;
    	let div53;
    	let input5;
    	let t121;
    	let label6;
    	let span22;
    	let i14;
    	let t122;
    	let div58;
    	let label7;
    	let t124;
    	let input6;
    	let t125;
    	let div59;
    	let label8;
    	let t127;
    	let input7;
    	let t128;
    	let div60;
    	let label9;
    	let t130;
    	let input8;
    	let t131;
    	let div63;
    	let div62;
    	let button12;
    	let t133;
    	let button13;
    	let t135;
    	let div74;
    	let div73;
    	let div72;
    	let div67;
    	let button14;
    	let t136;
    	let div71;
    	let div69;
    	let lord_icon1;
    	let lord_icon1_src_value;
    	let t137;
    	let div68;
    	let h41;
    	let t139;
    	let p1;
    	let t141;
    	let div70;
    	let button15;
    	let t143;
    	let button16;
    	let t145;
    	let div78;
    	let script1;
    	let script1_src_value;
    	let t146;
    	let script2;
    	let script2_src_value;
    	let t147;
    	let script3;
    	let script3_src_value;
    	let t148;
    	let script4;
    	let script4_src_value;
    	let t149;
    	let script5;
    	let script5_src_value;
    	let t150;
    	let script6;
    	let script6_src_value;
    	let t151;
    	let script7;
    	let script7_src_value;
    	let t152;
    	let script8;
    	let script8_src_value;
    	let t153;
    	let script9;
    	let script9_src_value;
    	let t154;
    	let script10;
    	let script10_src_value;

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			link3 = element("link");
    			script0 = element("script");
    			link4 = element("link");
    			link5 = element("link");
    			link6 = element("link");
    			link7 = element("link");
    			t1 = space();
    			main = element("main");
    			div84 = element("div");
    			header = element("header");
    			div9 = element("div");
    			div8 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			span0 = element("span");
    			img0 = element("img");
    			t2 = space();
    			span1 = element("span");
    			img1 = element("img");
    			t3 = space();
    			a1 = element("a");
    			span2 = element("span");
    			img2 = element("img");
    			t4 = space();
    			span3 = element("span");
    			img3 = element("img");
    			t5 = space();
    			div7 = element("div");
    			div2 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t6 = space();
    			div3 = element("div");
    			button1 = element("button");
    			i1 = element("i");
    			t7 = space();
    			div6 = element("div");
    			button2 = element("button");
    			span7 = element("span");
    			img4 = element("img");
    			t8 = space();
    			span6 = element("span");
    			span4 = element("span");
    			span4.textContent = "Anna Adame";
    			t10 = space();
    			span5 = element("span");
    			span5.textContent = "Founder";
    			t12 = space();
    			div5 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Bienvenido Anna!";
    			t14 = space();
    			a2 = element("a");
    			i2 = element("i");
    			t15 = space();
    			span8 = element("span");
    			span8.textContent = "Pefil";
    			t17 = space();
    			div4 = element("div");
    			t18 = space();
    			a3 = element("a");
    			i3 = element("i");
    			t19 = space();
    			span9 = element("span");
    			span9.textContent = "Salir";
    			t21 = space();
    			div15 = element("div");
    			div10 = element("div");
    			a4 = element("a");
    			span10 = element("span");
    			img5 = element("img");
    			t22 = space();
    			span11 = element("span");
    			img6 = element("img");
    			t23 = space();
    			a5 = element("a");
    			span12 = element("span");
    			img7 = element("img");
    			t24 = space();
    			span13 = element("span");
    			img8 = element("img");
    			t25 = space();
    			button3 = element("button");
    			i4 = element("i");
    			t26 = space();
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			t27 = space();
    			ul0 = element("ul");
    			li0 = element("li");
    			span14 = element("span");
    			span14.textContent = "Menú";
    			t29 = space();
    			li1 = element("li");
    			a6 = element("a");
    			i5 = element("i");
    			t30 = space();
    			span15 = element("span");
    			span15.textContent = "Usuarios";
    			t32 = space();
    			li2 = element("li");
    			a7 = element("a");
    			i6 = element("i");
    			t33 = space();
    			span16 = element("span");
    			span16.textContent = "Clientes";
    			t35 = space();
    			li3 = element("li");
    			a8 = element("a");
    			i7 = element("i");
    			t36 = space();
    			span17 = element("span");
    			span17.textContent = "Productos";
    			t38 = space();
    			li4 = element("li");
    			a9 = element("a");
    			i8 = element("i");
    			t39 = space();
    			span18 = element("span");
    			span18.textContent = "Catálogos";
    			t41 = space();
    			li5 = element("li");
    			a10 = element("a");
    			i9 = element("i");
    			t42 = space();
    			span19 = element("span");
    			span19.textContent = "Cupones";
    			t44 = space();
    			li6 = element("li");
    			a11 = element("a");
    			i10 = element("i");
    			t45 = space();
    			span20 = element("span");
    			span20.textContent = "Ordenes";
    			t47 = space();
    			div14 = element("div");
    			t48 = space();
    			div16 = element("div");
    			t49 = space();
    			div83 = element("div");
    			div82 = element("div");
    			div81 = element("div");
    			div20 = element("div");
    			div19 = element("div");
    			div18 = element("div");
    			h40 = element("h4");
    			h40.textContent = "Productos";
    			t51 = space();
    			div17 = element("div");
    			ol = element("ol");
    			li7 = element("li");
    			a12 = element("a");
    			a12.textContent = "Home";
    			t53 = space();
    			li8 = element("li");
    			li8.textContent = "Productos";
    			t55 = space();
    			div80 = element("div");
    			div79 = element("div");
    			div77 = element("div");
    			div21 = element("div");
    			t56 = space();
    			div76 = element("div");
    			div75 = element("div");
    			div27 = element("div");
    			div23 = element("div");
    			div22 = element("div");
    			button4 = element("button");
    			i11 = element("i");
    			t57 = text(" Añadir Producto");
    			t58 = space();
    			div26 = element("div");
    			div25 = element("div");
    			div24 = element("div");
    			input0 = element("input");
    			t59 = space();
    			i12 = element("i");
    			t60 = space();
    			div32 = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Foto";
    			t62 = space();
    			th1 = element("th");
    			th1.textContent = "Nombre";
    			t64 = space();
    			th2 = element("th");
    			th2.textContent = "Slug";
    			t66 = space();
    			th3 = element("th");
    			th3.textContent = "Descripción";
    			t68 = space();
    			th4 = element("th");
    			th4.textContent = "Acción";
    			t70 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			img9 = element("img");
    			t71 = space();
    			td1 = element("td");
    			td1.textContent = "Escurridor";
    			t73 = space();
    			td2 = element("td");
    			td2.textContent = "Escurridor-de-acero...";
    			t75 = space();
    			td3 = element("td");
    			td3.textContent = "Pon a secar tus platos luego de lavarlos en este escurridor...";
    			t77 = space();
    			td4 = element("td");
    			div31 = element("div");
    			div28 = element("div");
    			button5 = element("button");
    			button5.textContent = "Ver Detalles";
    			t79 = space();
    			div29 = element("div");
    			button6 = element("button");
    			button6.textContent = "Editar";
    			t81 = space();
    			div30 = element("div");
    			button7 = element("button");
    			button7.textContent = "Borrar";
    			t83 = space();
    			div34 = element("div");
    			div33 = element("div");
    			lord_icon0 = element("lord-icon");
    			t84 = space();
    			h50 = element("h5");
    			h50.textContent = "Lo sentimos! No se encontraron resultados";
    			t86 = space();
    			p0 = element("p");
    			p0.textContent = "Hemos buscado en todos los Usuarios. No encontramos ningún\r\n                                                    usuario para su búsqueda.";
    			t88 = space();
    			div36 = element("div");
    			div35 = element("div");
    			a13 = element("a");
    			a13.textContent = "Anterior";
    			t90 = space();
    			ul1 = element("ul");
    			t91 = space();
    			a14 = element("a");
    			a14.textContent = "Siguiente";
    			t93 = space();
    			div51 = element("div");
    			div50 = element("div");
    			div49 = element("div");
    			div37 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Editar Producto";
    			t95 = space();
    			button8 = element("button");
    			t96 = space();
    			form0 = element("form");
    			div46 = element("div");
    			div42 = element("div");
    			label0 = element("label");
    			label0.textContent = "Foto";
    			t98 = space();
    			div41 = element("div");
    			div40 = element("div");
    			div39 = element("div");
    			img10 = element("img");
    			t99 = space();
    			div38 = element("div");
    			input1 = element("input");
    			t100 = space();
    			label1 = element("label");
    			span21 = element("span");
    			i13 = element("i");
    			t101 = space();
    			div43 = element("div");
    			label2 = element("label");
    			label2.textContent = "Nombre";
    			t103 = space();
    			input2 = element("input");
    			t104 = space();
    			div44 = element("div");
    			label3 = element("label");
    			label3.textContent = "Slug";
    			t106 = space();
    			input3 = element("input");
    			t107 = space();
    			div45 = element("div");
    			label4 = element("label");
    			label4.textContent = "Descripción";
    			t109 = space();
    			input4 = element("input");
    			t110 = space();
    			div48 = element("div");
    			div47 = element("div");
    			button9 = element("button");
    			button9.textContent = "Cerrar";
    			t112 = space();
    			button10 = element("button");
    			button10.textContent = "Guardar cambios";
    			t114 = space();
    			div66 = element("div");
    			div65 = element("div");
    			div64 = element("div");
    			div52 = element("div");
    			h52 = element("h5");
    			h52.textContent = "Añadir Nuevo Producto";
    			t116 = space();
    			button11 = element("button");
    			t117 = space();
    			form1 = element("form");
    			div61 = element("div");
    			div57 = element("div");
    			label5 = element("label");
    			label5.textContent = "Foto";
    			t119 = space();
    			div56 = element("div");
    			div55 = element("div");
    			div54 = element("div");
    			img11 = element("img");
    			t120 = space();
    			div53 = element("div");
    			input5 = element("input");
    			t121 = space();
    			label6 = element("label");
    			span22 = element("span");
    			i14 = element("i");
    			t122 = space();
    			div58 = element("div");
    			label7 = element("label");
    			label7.textContent = "Nombre";
    			t124 = space();
    			input6 = element("input");
    			t125 = space();
    			div59 = element("div");
    			label8 = element("label");
    			label8.textContent = "Slug";
    			t127 = space();
    			input7 = element("input");
    			t128 = space();
    			div60 = element("div");
    			label9 = element("label");
    			label9.textContent = "Descripción";
    			t130 = space();
    			input8 = element("input");
    			t131 = space();
    			div63 = element("div");
    			div62 = element("div");
    			button12 = element("button");
    			button12.textContent = "Cerrar";
    			t133 = space();
    			button13 = element("button");
    			button13.textContent = "Añadir";
    			t135 = space();
    			div74 = element("div");
    			div73 = element("div");
    			div72 = element("div");
    			div67 = element("div");
    			button14 = element("button");
    			t136 = space();
    			div71 = element("div");
    			div69 = element("div");
    			lord_icon1 = element("lord-icon");
    			t137 = space();
    			div68 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Estás seguro ?";
    			t139 = space();
    			p1 = element("p");
    			p1.textContent = "¿Estás seguro de eliminar el producto?";
    			t141 = space();
    			div70 = element("div");
    			button15 = element("button");
    			button15.textContent = "Cerrar";
    			t143 = space();
    			button16 = element("button");
    			button16.textContent = "Sí, borrar producto!";
    			t145 = space();
    			div78 = element("div");
    			script1 = element("script");
    			t146 = space();
    			script2 = element("script");
    			t147 = space();
    			script3 = element("script");
    			t148 = space();
    			script4 = element("script");
    			t149 = space();
    			script5 = element("script");
    			t150 = space();
    			script6 = element("script");
    			t151 = space();
    			script7 = element("script");
    			t152 = space();
    			script8 = element("script");
    			t153 = space();
    			script9 = element("script");
    			t154 = space();
    			script10 = element("script");
    			document.title = "DevEcommerce | Productos";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$e, 11, 4, 274);
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "href", "http://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css");
    			add_location(link1, file$e, 14, 4, 382);
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "href", "http://cdn.datatables.net/responsive/2.2.9/css/responsive.bootstrap.min.css");
    			add_location(link2, file$e, 16, 4, 524);
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "href", "http://cdn.datatables.net/buttons/2.2.2/css/buttons.dataTables.min.css");
    			add_location(link3, file$e, 18, 4, 640);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$e, 22, 4, 782);
    			attr_dev(link4, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$e, 24, 4, 874);
    			attr_dev(link5, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$e, 26, 4, 996);
    			attr_dev(link6, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link6, "rel", "stylesheet");
    			attr_dev(link6, "type", "text/css");
    			add_location(link6, file$e, 28, 4, 1111);
    			attr_dev(link7, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link7, "rel", "stylesheet");
    			attr_dev(link7, "type", "text/css");
    			add_location(link7, file$e, 30, 4, 1227);
    			if (!src_url_equal(img0.src, img0_src_value = "http://localhost:8080/public/images/logo-sm.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "");
    			attr_dev(img0, "height", "22");
    			add_location(img0, file$e, 46, 26, 1760);
    			attr_dev(span0, "class", "logo-sm");
    			add_location(span0, file$e, 45, 22, 1710);
    			if (!src_url_equal(img1.src, img1_src_value = "http://localhost:8080/public/images/logo-dark.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "");
    			attr_dev(img1, "height", "17");
    			add_location(img1, file$e, 49, 26, 1943);
    			attr_dev(span1, "class", "logo-lg");
    			add_location(span1, file$e, 48, 22, 1893);
    			attr_dev(a0, "href", "index.html");
    			attr_dev(a0, "class", "logo logo-dark");
    			add_location(a0, file$e, 44, 18, 1642);
    			if (!src_url_equal(img2.src, img2_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "");
    			attr_dev(img2, "height", "22");
    			add_location(img2, file$e, 55, 26, 2219);
    			attr_dev(span2, "class", "logo-sm");
    			add_location(span2, file$e, 54, 22, 2169);
    			if (!src_url_equal(img3.src, img3_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "");
    			attr_dev(img3, "height", "17");
    			add_location(img3, file$e, 58, 26, 2395);
    			attr_dev(span3, "class", "logo-lg");
    			add_location(span3, file$e, 57, 22, 2345);
    			attr_dev(a1, "href", "index.html");
    			attr_dev(a1, "class", "logo logo-light");
    			add_location(a1, file$e, 53, 18, 2100);
    			attr_dev(div0, "class", "navbar-brand-box horizontal-logo");
    			add_location(div0, file$e, 43, 14, 1576);
    			attr_dev(div1, "class", "d-flex");
    			add_location(div1, file$e, 41, 10, 1511);
    			attr_dev(i0, "class", "bx bx-fullscreen fs-22");
    			add_location(i0, file$e, 67, 20, 2844);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-icon btn-topbar btn-ghost-secondary rounded-circle shadow-none");
    			attr_dev(button0, "data-toggle", "fullscreen");
    			add_location(button0, file$e, 66, 16, 2696);
    			attr_dev(div2, "class", "ms-1 header-item d-none d-sm-flex");
    			add_location(div2, file$e, 65, 12, 2631);
    			attr_dev(i1, "class", "bx bx-moon fs-22");
    			add_location(i1, file$e, 73, 20, 3149);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-icon btn-topbar btn-ghost-secondary rounded-circle light-dark-mode shadow-none");
    			add_location(button1, file$e, 72, 16, 3010);
    			attr_dev(div3, "class", "ms-1 header-item d-none d-sm-flex");
    			add_location(div3, file$e, 71, 12, 2945);
    			attr_dev(img4, "class", "rounded-circle header-profile-user");
    			if (!src_url_equal(img4.src, img4_src_value = "http://localhost:8080/images/users/avatar-1.jpg")) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "Header Avatar");
    			add_location(img4, file$e, 80, 26, 3558);
    			attr_dev(span4, "class", "d-none d-xl-inline-block ms-1 fw-medium user-name-text");
    			add_location(span4, file$e, 82, 30, 3773);
    			attr_dev(span5, "class", "d-none d-xl-block ms-1 fs-12 text-muted user-name-sub-text");
    			add_location(span5, file$e, 83, 30, 3891);
    			attr_dev(span6, "class", "text-start ms-xl-2");
    			add_location(span6, file$e, 81, 26, 3708);
    			attr_dev(span7, "class", "d-flex align-items-center");
    			add_location(span7, file$e, 79, 22, 3490);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn shadow-none");
    			attr_dev(button2, "id", "page-header-user-dropdown");
    			attr_dev(button2, "data-bs-toggle", "dropdown");
    			attr_dev(button2, "aria-haspopup", "true");
    			attr_dev(button2, "aria-expanded", "false");
    			add_location(button2, file$e, 78, 18, 3320);
    			attr_dev(h6, "class", "dropdown-header");
    			add_location(h6, file$e, 89, 22, 4198);
    			attr_dev(i2, "class", "mdi mdi-account-circle text-muted fs-16 align-middle me-1");
    			add_location(i2, file$e, 90, 73, 4322);
    			attr_dev(span8, "class", "align-middle");
    			add_location(span8, file$e, 90, 147, 4396);
    			attr_dev(a2, "class", "dropdown-item");
    			attr_dev(a2, "href", "pages-profile.html");
    			add_location(a2, file$e, 90, 22, 4271);
    			attr_dev(div4, "class", "dropdown-divider");
    			add_location(div4, file$e, 92, 22, 4485);
    			attr_dev(i3, "class", "mdi mdi-logout text-muted fs-16 align-middle me-1");
    			add_location(i3, file$e, 94, 77, 4624);
    			attr_dev(span9, "class", "align-middle");
    			attr_dev(span9, "data-key", "t-logout");
    			add_location(span9, file$e, 94, 143, 4690);
    			attr_dev(a3, "class", "dropdown-item");
    			attr_dev(a3, "href", "auth-logout-basic.html");
    			add_location(a3, file$e, 94, 22, 4569);
    			attr_dev(div5, "class", "dropdown-menu dropdown-menu-end");
    			add_location(div5, file$e, 87, 18, 4093);
    			attr_dev(div6, "class", "dropdown ms-sm-3 header-item topbar-user");
    			add_location(div6, file$e, 77, 14, 3246);
    			attr_dev(div7, "class", "d-flex align-items-center");
    			add_location(div7, file$e, 64, 10, 2578);
    			attr_dev(div8, "class", "navbar-header");
    			add_location(div8, file$e, 40, 6, 1472);
    			attr_dev(div9, "class", "layout-width");
    			add_location(div9, file$e, 39, 2, 1438);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$e, 38, 6, 1409);
    			if (!src_url_equal(img5.src, img5_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img5, "src", img5_src_value);
    			attr_dev(img5, "alt", "");
    			attr_dev(img5, "height", "22");
    			add_location(img5, file$e, 109, 22, 5171);
    			attr_dev(span10, "class", "logo-sm");
    			add_location(span10, file$e, 108, 18, 5125);
    			if (!src_url_equal(img6.src, img6_src_value = "http://localhost:8080/images/logo-dark.png")) attr_dev(img6, "src", img6_src_value);
    			attr_dev(img6, "alt", "");
    			attr_dev(img6, "height", "17");
    			add_location(img6, file$e, 112, 22, 5335);
    			attr_dev(span11, "class", "logo-lg");
    			add_location(span11, file$e, 111, 18, 5289);
    			attr_dev(a4, "href", "index.html");
    			attr_dev(a4, "class", "logo logo-dark");
    			add_location(a4, file$e, 107, 14, 5061);
    			if (!src_url_equal(img7.src, img7_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img7, "src", img7_src_value);
    			attr_dev(img7, "alt", "");
    			attr_dev(img7, "height", "22");
    			add_location(img7, file$e, 118, 22, 5616);
    			attr_dev(span12, "class", "logo-sm");
    			add_location(span12, file$e, 117, 18, 5570);
    			if (!src_url_equal(img8.src, img8_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img8, "src", img8_src_value);
    			attr_dev(img8, "alt", "");
    			attr_dev(img8, "height", "17");
    			add_location(img8, file$e, 121, 22, 5780);
    			attr_dev(span13, "class", "logo-lg");
    			add_location(span13, file$e, 120, 18, 5734);
    			attr_dev(a5, "href", "index.html");
    			attr_dev(a5, "class", "logo logo-light");
    			add_location(a5, file$e, 116, 14, 5505);
    			attr_dev(i4, "class", "ri-record-circle-line");
    			add_location(i4, file$e, 125, 18, 6052);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "btn btn-sm p-0 fs-20 header-item float-end btn-vertical-sm-hover");
    			attr_dev(button3, "id", "vertical-hover");
    			add_location(button3, file$e, 124, 14, 5917);
    			attr_dev(div10, "class", "navbar-brand-box");
    			add_location(div10, file$e, 105, 10, 4982);
    			attr_dev(div11, "id", "two-column-menu");
    			add_location(div11, file$e, 132, 18, 6233);
    			attr_dev(span14, "data-key", "t-menu");
    			add_location(span14, file$e, 135, 45, 6391);
    			attr_dev(li0, "class", "menu-title");
    			add_location(li0, file$e, 135, 22, 6368);
    			attr_dev(i5, "class", "mdi mdi-speedometer");
    			add_location(i5, file$e, 138, 30, 6592);
    			attr_dev(span15, "data-key", "t-dashboards");
    			add_location(span15, file$e, 138, 66, 6628);
    			attr_dev(a6, "class", "nav-link menu-link");
    			attr_dev(a6, "href", "#sidebarDashboards");
    			add_location(a6, file$e, 137, 26, 6504);
    			attr_dev(li1, "class", "nav-item");
    			add_location(li1, file$e, 136, 22, 6455);
    			attr_dev(i6, "class", "mdi mdi-view-grid-plus-outline");
    			add_location(i6, file$e, 144, 30, 6946);
    			attr_dev(span16, "data-key", "t-apps");
    			add_location(span16, file$e, 144, 77, 6993);
    			attr_dev(a7, "class", "nav-link menu-link");
    			attr_dev(a7, "href", "#sidebarApps");
    			add_location(a7, file$e, 143, 26, 6863);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$e, 142, 22, 6814);
    			attr_dev(i7, "class", "mdi mdi-view-carousel-outline");
    			add_location(i7, file$e, 153, 30, 7365);
    			attr_dev(span17, "data-key", "t-layouts");
    			add_location(span17, file$e, 153, 76, 7411);
    			attr_dev(a8, "class", "nav-link menu-link");
    			attr_dev(a8, "href", "#sidebarLayouts");
    			add_location(a8, file$e, 152, 26, 7280);
    			attr_dev(li3, "class", "nav-item");
    			add_location(li3, file$e, 151, 22, 7231);
    			attr_dev(i8, "class", "mdi mdi-account-circle-outline");
    			add_location(i8, file$e, 162, 30, 7754);
    			attr_dev(span18, "data-key", "t-authentication");
    			add_location(span18, file$e, 162, 77, 7801);
    			attr_dev(a9, "class", "nav-link menu-link");
    			attr_dev(a9, "href", "#sidebarAuth");
    			add_location(a9, file$e, 161, 26, 7672);
    			attr_dev(li4, "class", "nav-item");
    			add_location(li4, file$e, 160, 22, 7623);
    			attr_dev(i9, "class", "mdi mdi-sticker-text-outline");
    			add_location(i9, file$e, 171, 30, 8102);
    			attr_dev(span19, "data-key", "t-pages");
    			add_location(span19, file$e, 171, 75, 8147);
    			attr_dev(a10, "class", "nav-link menu-link");
    			attr_dev(a10, "href", "#sidebarPages");
    			add_location(a10, file$e, 170, 26, 8019);
    			attr_dev(li5, "class", "nav-item");
    			add_location(li5, file$e, 169, 22, 7970);
    			attr_dev(i10, "class", "ri-rocket-line");
    			add_location(i10, file$e, 178, 30, 8435);
    			attr_dev(span20, "data-key", "t-landing");
    			add_location(span20, file$e, 178, 61, 8466);
    			attr_dev(a11, "class", "nav-link menu-link");
    			attr_dev(a11, "href", "#sidebarLanding");
    			add_location(a11, file$e, 177, 26, 8350);
    			attr_dev(li6, "class", "nav-item");
    			add_location(li6, file$e, 176, 22, 8301);
    			attr_dev(ul0, "class", "navbar-nav");
    			attr_dev(ul0, "id", "navbar-nav");
    			add_location(ul0, file$e, 134, 18, 6305);
    			attr_dev(div12, "class", "container-fluid");
    			add_location(div12, file$e, 130, 14, 6182);
    			attr_dev(div13, "id", "scrollbar");
    			add_location(div13, file$e, 129, 10, 6146);
    			attr_dev(div14, "class", "sidebar-background");
    			add_location(div14, file$e, 189, 10, 8711);
    			attr_dev(div15, "class", "app-menu navbar-menu");
    			add_location(div15, file$e, 103, 6, 4911);
    			attr_dev(div16, "class", "vertical-overlay");
    			add_location(div16, file$e, 193, 6, 8836);
    			attr_dev(h40, "class", "mb-sm-0");
    			add_location(h40, file$e, 207, 30, 9461);
    			attr_dev(a12, "href", "#!");
    			add_location(a12, file$e, 211, 66, 9690);
    			attr_dev(li7, "class", "breadcrumb-item");
    			add_location(li7, file$e, 211, 38, 9662);
    			attr_dev(li8, "class", "breadcrumb-item active");
    			add_location(li8, file$e, 212, 38, 9756);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$e, 210, 34, 9595);
    			attr_dev(div17, "class", "page-title-right");
    			add_location(div17, file$e, 209, 30, 9529);
    			attr_dev(div18, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div18, file$e, 206, 26, 9348);
    			attr_dev(div19, "class", "col-12");
    			add_location(div19, file$e, 205, 22, 9300);
    			attr_dev(div20, "class", "row");
    			add_location(div20, file$e, 204, 18, 9259);
    			attr_dev(div21, "class", "card-header");
    			add_location(div21, file$e, 223, 28, 10175);
    			attr_dev(i11, "class", "ri-add-line align-bottom me-1");
    			add_location(i11, file$e, 231, 175, 10731);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "btn btn-success add-btn");
    			attr_dev(button4, "data-bs-toggle", "modal");
    			attr_dev(button4, "id", "create-btn");
    			attr_dev(button4, "data-bs-target", "#showModalAñadir");
    			add_location(button4, file$e, 231, 48, 10604);
    			add_location(div22, file$e, 230, 44, 10549);
    			attr_dev(div23, "class", "col-sm-auto");
    			add_location(div23, file$e, 229, 40, 10478);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "class", "form-control search");
    			attr_dev(input0, "placeholder", "Buscar Productos...");
    			add_location(input0, file$e, 238, 52, 11234);
    			attr_dev(i12, "class", "ri-search-line search-icon");
    			add_location(i12, file$e, 239, 52, 11369);
    			attr_dev(div24, "class", "search-box ms-2");
    			add_location(div24, file$e, 237, 48, 11151);
    			attr_dev(div25, "class", "d-flex justify-content-sm-end");
    			add_location(div25, file$e, 236, 44, 11058);
    			attr_dev(div26, "class", "col-sm");
    			add_location(div26, file$e, 235, 40, 10992);
    			attr_dev(div27, "class", "row g-4 mb-3");
    			add_location(div27, file$e, 228, 36, 10410);
    			attr_dev(th0, "class", "sort");
    			attr_dev(th0, "data-sort", "photo");
    			add_location(th0, file$e, 250, 52, 12044);
    			attr_dev(th1, "class", "sort");
    			attr_dev(th1, "data-sort", "nameProduct");
    			add_location(th1, file$e, 251, 52, 12142);
    			attr_dev(th2, "class", "sort");
    			attr_dev(th2, "data-sort", "slug");
    			add_location(th2, file$e, 252, 52, 12248);
    			attr_dev(th3, "class", "sort");
    			attr_dev(th3, "data-sort", "description");
    			add_location(th3, file$e, 253, 52, 12345);
    			attr_dev(th4, "class", "sort");
    			attr_dev(th4, "data-sort", "action");
    			add_location(th4, file$e, 256, 52, 12561);
    			add_location(tr0, file$e, 248, 48, 11933);
    			attr_dev(thead, "class", "table-light");
    			add_location(thead, file$e, 247, 44, 11856);
    			attr_dev(img9, "class", "image avatar-xs rounded-circle shadow");
    			attr_dev(img9, "alt", "");
    			if (!src_url_equal(img9.src, img9_src_value = "http://localhost:8080/images/users/avatar-1.jpg")) attr_dev(img9, "src", img9_src_value);
    			add_location(img9, file$e, 263, 56, 13036);
    			attr_dev(td0, "class", "photo");
    			add_location(td0, file$e, 262, 53, 12960);
    			attr_dev(td1, "class", "nameProduct");
    			add_location(td1, file$e, 265, 52, 13261);
    			attr_dev(td2, "class", "slug");
    			add_location(td2, file$e, 266, 52, 13354);
    			attr_dev(td3, "class", "description");
    			add_location(td3, file$e, 267, 52, 13452);
    			attr_dev(button5, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(button5, "href", "");
    			add_location(button5, file$e, 273, 64, 13936);
    			attr_dev(div28, "class", "edit");
    			add_location(div28, file$e, 272, 60, 13852);
    			attr_dev(button6, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(button6, "data-bs-toggle", "modal");
    			attr_dev(button6, "data-bs-target", "#showModalEditar");
    			add_location(button6, file$e, 276, 64, 14232);
    			attr_dev(div29, "class", "edit");
    			add_location(div29, file$e, 275, 60, 14148);
    			attr_dev(button7, "class", "btn btn-sm btn-danger remove-item-btn");
    			attr_dev(button7, "data-bs-toggle", "modal");
    			attr_dev(button7, "data-bs-target", "#deleteRecordModal");
    			add_location(button7, file$e, 279, 64, 14594);
    			attr_dev(div30, "class", "remove");
    			attr_dev(div30, "id", "removeItemModal");
    			add_location(div30, file$e, 278, 60, 14487);
    			attr_dev(div31, "class", "d-flex gap-2");
    			add_location(div31, file$e, 271, 56, 13764);
    			add_location(td4, file$e, 270, 52, 13702);
    			add_location(tr1, file$e, 260, 48, 12848);
    			attr_dev(tbody, "class", "list form-check-all");
    			add_location(tbody, file$e, 259, 44, 12763);
    			attr_dev(table, "class", "table align-middle table-nowrap");
    			attr_dev(table, "id", "customerTable");
    			add_location(table, file$e, 246, 40, 11744);
    			attr_dev(div32, "class", "table-responsive table-card mt-3 mb-1");
    			add_location(div32, file$e, 245, 36, 11651);
    			if (!src_url_equal(lord_icon0.src, lord_icon0_src_value = "https://cdn.lordicon.com/msoeawqm.json")) set_custom_element_data(lord_icon0, "src", lord_icon0_src_value);
    			set_custom_element_data(lord_icon0, "trigger", "loop");
    			set_custom_element_data(lord_icon0, "colors", "primary:#121331,secondary:#08a88a");
    			set_style(lord_icon0, "width", "75px");
    			set_style(lord_icon0, "height", "75px");
    			add_location(lord_icon0, file$e, 289, 48, 15320);
    			attr_dev(h50, "class", "mt-2");
    			add_location(h50, file$e, 291, 48, 15577);
    			attr_dev(p0, "class", "text-muted mb-0");
    			add_location(p0, file$e, 292, 48, 15690);
    			attr_dev(div33, "class", "text-center");
    			add_location(div33, file$e, 288, 44, 15245);
    			attr_dev(div34, "class", "noresult");
    			set_style(div34, "display", "none");
    			add_location(div34, file$e, 287, 36, 15155);
    			attr_dev(a13, "class", "page-item pagination-prev disabled");
    			attr_dev(a13, "href", "#!");
    			add_location(a13, file$e, 300, 44, 16202);
    			attr_dev(ul1, "class", "pagination listjs-pagination mb-0");
    			add_location(ul1, file$e, 303, 44, 16412);
    			attr_dev(a14, "class", "page-item pagination-next");
    			attr_dev(a14, "href", "#!");
    			add_location(a14, file$e, 304, 44, 16509);
    			attr_dev(div35, "class", "pagination-wrap hstack gap-2");
    			add_location(div35, file$e, 299, 40, 16114);
    			attr_dev(div36, "class", "d-flex justify-content-end");
    			add_location(div36, file$e, 298, 36, 16032);
    			attr_dev(h51, "class", "modal-title");
    			attr_dev(h51, "id", "exampleModalLabel");
    			add_location(h51, file$e, 315, 36, 17175);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "class", "btn-close");
    			attr_dev(button8, "data-bs-dismiss", "modal");
    			attr_dev(button8, "aria-label", "Close");
    			attr_dev(button8, "id", "close-modal");
    			add_location(button8, file$e, 316, 36, 17280);
    			attr_dev(div37, "class", "modal-header bg-light p-3");
    			add_location(div37, file$e, 314, 32, 17098);
    			attr_dev(label0, "for", "foto-field");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$e, 321, 44, 17637);
    			if (!src_url_equal(img10.src, img10_src_value = "http://localhost:8080/images/users/avatar-1.jpg")) attr_dev(img10, "src", img10_src_value);
    			attr_dev(img10, "class", "rounded-circle avatar-xl img-thumbnail user-profile-image shadow");
    			attr_dev(img10, "alt", "user-profile-image");
    			add_location(img10, file$e, 327, 56, 18073);
    			attr_dev(input1, "id", "profile-img-file-input");
    			attr_dev(input1, "type", "file");
    			attr_dev(input1, "class", "profile-img-file-input");
    			add_location(input1, file$e, 329, 60, 18412);
    			attr_dev(i13, "class", "ri-camera-fill");
    			add_location(i13, file$e, 332, 68, 18829);
    			attr_dev(span21, "class", "avatar-title rounded-circle bg-light text-body shadow");
    			add_location(span21, file$e, 331, 64, 18691);
    			attr_dev(label1, "for", "profile-img-file-input");
    			attr_dev(label1, "class", "profile-photo-edit avatar-xs");
    			add_location(label1, file$e, 330, 60, 18552);
    			attr_dev(div38, "class", "avatar-xs p-0 rounded-circle profile-photo-edit");
    			add_location(div38, file$e, 328, 56, 18289);
    			attr_dev(div39, "class", "profile-user position-relative d-inline-block mx-auto mb-4");
    			add_location(div39, file$e, 326, 52, 17942);
    			attr_dev(div40, "class", "text-center");
    			add_location(div40, file$e, 325, 48, 17863);
    			attr_dev(div41, "class", "card-body p-4");
    			add_location(div41, file$e, 323, 44, 17784);
    			attr_dev(div42, "class", "mb-3");
    			add_location(div42, file$e, 320, 40, 17573);
    			attr_dev(label2, "for", "name-field");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$e, 343, 44, 19444);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "id", "name-field");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "placeholder", "Ingresar nombre");
    			input2.required = true;
    			add_location(input2, file$e, 344, 44, 19547);
    			attr_dev(div43, "class", "mb-3");
    			add_location(div43, file$e, 342, 40, 19380);
    			attr_dev(label3, "for", "slug-field");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$e, 347, 44, 19798);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "id", "lastname-field");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "placeholder", "Ingresar slug");
    			input3.required = true;
    			add_location(input3, file$e, 348, 44, 19899);
    			attr_dev(div44, "class", "mb-3");
    			add_location(div44, file$e, 346, 40, 19734);
    			attr_dev(label4, "for", "description-field");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$e, 352, 44, 20154);
    			attr_dev(input4, "type", "email");
    			attr_dev(input4, "id", "email-field");
    			attr_dev(input4, "class", "form-control");
    			attr_dev(input4, "placeholder", "Ingresar descripción");
    			input4.required = true;
    			add_location(input4, file$e, 353, 44, 20269);
    			attr_dev(div45, "class", "mb-3");
    			add_location(div45, file$e, 351, 40, 20090);
    			attr_dev(div46, "class", "modal-body");
    			add_location(div46, file$e, 319, 36, 17507);
    			attr_dev(button9, "type", "button");
    			attr_dev(button9, "class", "btn btn-light");
    			attr_dev(button9, "data-bs-dismiss", "modal");
    			add_location(button9, file$e, 359, 44, 20665);
    			attr_dev(button10, "type", "submit");
    			attr_dev(button10, "class", "btn btn-success");
    			attr_dev(button10, "id", "add-btn");
    			add_location(button10, file$e, 360, 44, 20794);
    			attr_dev(div47, "class", "hstack gap-2 justify-content-end");
    			add_location(div47, file$e, 358, 40, 20573);
    			attr_dev(div48, "class", "modal-footer");
    			add_location(div48, file$e, 357, 36, 20505);
    			add_location(form0, file$e, 318, 32, 17463);
    			attr_dev(div49, "class", "modal-content");
    			add_location(div49, file$e, 313, 28, 17037);
    			attr_dev(div50, "class", "modal-dialog modal-dialog-centered");
    			add_location(div50, file$e, 312, 24, 16959);
    			attr_dev(div51, "class", "modal fade");
    			attr_dev(div51, "id", "showModalEditar");
    			attr_dev(div51, "tabindex", "-1");
    			attr_dev(div51, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div51, "aria-hidden", "true");
    			add_location(div51, file$e, 311, 20, 16819);
    			attr_dev(h52, "class", "modal-title");
    			attr_dev(h52, "id", "exampleModalLabel");
    			add_location(h52, file$e, 373, 36, 21531);
    			attr_dev(button11, "type", "button");
    			attr_dev(button11, "class", "btn-close");
    			attr_dev(button11, "data-bs-dismiss", "modal");
    			attr_dev(button11, "aria-label", "Close");
    			attr_dev(button11, "id", "close-modal");
    			add_location(button11, file$e, 374, 36, 21642);
    			attr_dev(div52, "class", "modal-header bg-light p-3");
    			add_location(div52, file$e, 372, 32, 21454);
    			attr_dev(label5, "for", "foto-field");
    			attr_dev(label5, "class", "form-label");
    			add_location(label5, file$e, 379, 44, 21999);
    			if (!src_url_equal(img11.src, img11_src_value = "http://localhost:8080/images/users/avatar-1.jpg")) attr_dev(img11, "src", img11_src_value);
    			attr_dev(img11, "class", "rounded-circle avatar-xl img-thumbnail user-profile-image shadow");
    			attr_dev(img11, "alt", "user-profile-image");
    			add_location(img11, file$e, 385, 56, 22435);
    			attr_dev(input5, "id", "profile-img-file-input");
    			attr_dev(input5, "type", "file");
    			attr_dev(input5, "class", "profile-img-file-input");
    			add_location(input5, file$e, 387, 60, 22774);
    			attr_dev(i14, "class", "ri-camera-fill");
    			add_location(i14, file$e, 390, 68, 23191);
    			attr_dev(span22, "class", "avatar-title rounded-circle bg-light text-body shadow");
    			add_location(span22, file$e, 389, 64, 23053);
    			attr_dev(label6, "for", "profile-img-file-input");
    			attr_dev(label6, "class", "profile-photo-edit avatar-xs");
    			add_location(label6, file$e, 388, 60, 22914);
    			attr_dev(div53, "class", "avatar-xs p-0 rounded-circle profile-photo-edit");
    			add_location(div53, file$e, 386, 56, 22651);
    			attr_dev(div54, "class", "profile-user position-relative d-inline-block mx-auto mb-4");
    			add_location(div54, file$e, 384, 52, 22304);
    			attr_dev(div55, "class", "text-center");
    			add_location(div55, file$e, 383, 48, 22225);
    			attr_dev(div56, "class", "card-body p-4");
    			add_location(div56, file$e, 381, 44, 22146);
    			attr_dev(div57, "class", "mb-3");
    			add_location(div57, file$e, 378, 40, 21935);
    			attr_dev(label7, "for", "name-field");
    			attr_dev(label7, "class", "form-label");
    			add_location(label7, file$e, 401, 44, 23806);
    			attr_dev(input6, "type", "text");
    			attr_dev(input6, "id", "name-field");
    			attr_dev(input6, "class", "form-control");
    			attr_dev(input6, "placeholder", "Ingresar nombre");
    			input6.required = true;
    			add_location(input6, file$e, 402, 44, 23909);
    			attr_dev(div58, "class", "mb-3");
    			add_location(div58, file$e, 400, 40, 23742);
    			attr_dev(label8, "for", "slug-field");
    			attr_dev(label8, "class", "form-label");
    			add_location(label8, file$e, 405, 44, 24160);
    			attr_dev(input7, "type", "text");
    			attr_dev(input7, "id", "lastname-field");
    			attr_dev(input7, "class", "form-control");
    			attr_dev(input7, "placeholder", "Ingresar slug");
    			input7.required = true;
    			add_location(input7, file$e, 406, 44, 24261);
    			attr_dev(div59, "class", "mb-3");
    			add_location(div59, file$e, 404, 40, 24096);
    			attr_dev(label9, "for", "description-field");
    			attr_dev(label9, "class", "form-label");
    			add_location(label9, file$e, 410, 44, 24516);
    			attr_dev(input8, "type", "email");
    			attr_dev(input8, "id", "email-field");
    			attr_dev(input8, "class", "form-control");
    			attr_dev(input8, "placeholder", "Ingresar descripción");
    			input8.required = true;
    			add_location(input8, file$e, 411, 44, 24631);
    			attr_dev(div60, "class", "mb-3");
    			add_location(div60, file$e, 409, 40, 24452);
    			attr_dev(div61, "class", "modal-body");
    			add_location(div61, file$e, 377, 36, 21869);
    			attr_dev(button12, "type", "button");
    			attr_dev(button12, "class", "btn btn-light");
    			attr_dev(button12, "data-bs-dismiss", "modal");
    			add_location(button12, file$e, 417, 44, 25067);
    			attr_dev(button13, "type", "button");
    			attr_dev(button13, "class", "btn btn-success");
    			attr_dev(button13, "id", "edit-btn");
    			add_location(button13, file$e, 418, 44, 25196);
    			attr_dev(div62, "class", "hstack gap-2 justify-content-end");
    			add_location(div62, file$e, 416, 40, 24975);
    			attr_dev(div63, "class", "modal-footer");
    			add_location(div63, file$e, 415, 36, 24907);
    			add_location(form1, file$e, 376, 32, 21825);
    			attr_dev(div64, "class", "modal-content");
    			add_location(div64, file$e, 371, 28, 21393);
    			attr_dev(div65, "class", "modal-dialog modal-dialog-centered");
    			add_location(div65, file$e, 370, 24, 21315);
    			attr_dev(div66, "class", "modal fade");
    			attr_dev(div66, "id", "showModalAñadir");
    			attr_dev(div66, "tabindex", "-1");
    			attr_dev(div66, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div66, "aria-hidden", "true");
    			add_location(div66, file$e, 369, 20, 21175);
    			attr_dev(button14, "type", "button");
    			attr_dev(button14, "class", "btn-close");
    			attr_dev(button14, "data-bs-dismiss", "modal");
    			attr_dev(button14, "aria-label", "Close");
    			attr_dev(button14, "id", "btn-close");
    			add_location(button14, file$e, 431, 44, 25925);
    			attr_dev(div67, "class", "modal-header");
    			add_location(div67, file$e, 430, 40, 25853);
    			if (!src_url_equal(lord_icon1.src, lord_icon1_src_value = "https://cdn.lordicon.com/gsqxdxog.json")) set_custom_element_data(lord_icon1, "src", lord_icon1_src_value);
    			set_custom_element_data(lord_icon1, "trigger", "loop");
    			set_custom_element_data(lord_icon1, "colors", "primary:#f7b84b,secondary:#f06548");
    			set_style(lord_icon1, "width", "100px");
    			set_style(lord_icon1, "height", "100px");
    			add_location(lord_icon1, file$e, 435, 48, 26272);
    			add_location(h41, file$e, 437, 52, 26577);
    			attr_dev(p1, "class", "text-muted mx-4 mb-0");
    			add_location(p1, file$e, 438, 52, 26654);
    			attr_dev(div68, "class", "mt-4 pt-2 fs-15 mx-4 mx-sm-5");
    			add_location(div68, file$e, 436, 48, 26481);
    			attr_dev(div69, "class", "mt-2 text-center");
    			add_location(div69, file$e, 434, 44, 26192);
    			attr_dev(button15, "type", "button");
    			attr_dev(button15, "class", "btn w-sm btn-light");
    			attr_dev(button15, "data-bs-dismiss", "modal");
    			add_location(button15, file$e, 442, 48, 26991);
    			attr_dev(button16, "type", "button");
    			attr_dev(button16, "class", "btn w-sm btn-danger ");
    			attr_dev(button16, "id", "delete-record");
    			add_location(button16, file$e, 443, 48, 27129);
    			attr_dev(div70, "class", "d-flex gap-2 justify-content-center mt-4 mb-2");
    			add_location(div70, file$e, 441, 44, 26882);
    			attr_dev(div71, "class", "modal-body");
    			add_location(div71, file$e, 433, 40, 26122);
    			attr_dev(div72, "class", "modal-content");
    			add_location(div72, file$e, 429, 36, 25784);
    			attr_dev(div73, "class", "modal-dialog modal-dialog-centered");
    			add_location(div73, file$e, 428, 32, 25698);
    			attr_dev(div74, "class", "modal fade zoomIn");
    			attr_dev(div74, "id", "deleteRecordModal");
    			attr_dev(div74, "tabindex", "-1");
    			attr_dev(div74, "aria-hidden", "true");
    			add_location(div74, file$e, 427, 28, 25577);
    			attr_dev(div75, "id", "customerList");
    			add_location(div75, file$e, 227, 32, 10349);
    			attr_dev(div76, "class", "card-body");
    			add_location(div76, file$e, 226, 28, 10292);
    			attr_dev(div77, "class", "card");
    			add_location(div77, file$e, 222, 24, 10127);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$e, 475, 5, 27979);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$e, 476, 5, 28073);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$e, 477, 5, 28157);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$e, 478, 5, 28238);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$e, 479, 5, 28324);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$e, 480, 5, 28412);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/prismjs/prism.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$e, 483, 5, 28511);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/libs/gridjs/gridjs.umd.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$e, 486, 5, 28613);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/gridjs.init.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$e, 488, 5, 28718);
    			if (!src_url_equal(script10.src, script10_src_value = "http://localhost:8080/js/app.js")) attr_dev(script10, "src", script10_src_value);
    			add_location(script10, file$e, 491, 5, 28819);
    			add_location(div78, file$e, 470, 0, 27797);
    			attr_dev(div79, "class", "col-lg-12");
    			add_location(div79, file$e, 221, 20, 10078);
    			attr_dev(div80, "class", "row");
    			add_location(div80, file$e, 220, 18, 10039);
    			attr_dev(div81, "class", "container-fluid");
    			add_location(div81, file$e, 201, 14, 9163);
    			attr_dev(div82, "class", "page-content");
    			add_location(div82, file$e, 200, 10, 9121);
    			attr_dev(div83, "class", "main-content");
    			add_location(div83, file$e, 198, 6, 9081);
    			attr_dev(div84, "id", "layout-wrapper");
    			add_location(div84, file$e, 36, 2, 1374);
    			add_location(main, file$e, 34, 0, 1338);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, script0);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			append_dev(document.head, link6);
    			append_dev(document.head, link7);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div84);
    			append_dev(div84, header);
    			append_dev(header, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(a0, span0);
    			append_dev(span0, img0);
    			append_dev(a0, t2);
    			append_dev(a0, span1);
    			append_dev(span1, img1);
    			append_dev(div0, t3);
    			append_dev(div0, a1);
    			append_dev(a1, span2);
    			append_dev(span2, img2);
    			append_dev(a1, t4);
    			append_dev(a1, span3);
    			append_dev(span3, img3);
    			append_dev(div8, t5);
    			append_dev(div8, div7);
    			append_dev(div7, div2);
    			append_dev(div2, button0);
    			append_dev(button0, i0);
    			append_dev(div7, t6);
    			append_dev(div7, div3);
    			append_dev(div3, button1);
    			append_dev(button1, i1);
    			append_dev(div7, t7);
    			append_dev(div7, div6);
    			append_dev(div6, button2);
    			append_dev(button2, span7);
    			append_dev(span7, img4);
    			append_dev(span7, t8);
    			append_dev(span7, span6);
    			append_dev(span6, span4);
    			append_dev(span6, t10);
    			append_dev(span6, span5);
    			append_dev(div6, t12);
    			append_dev(div6, div5);
    			append_dev(div5, h6);
    			append_dev(div5, t14);
    			append_dev(div5, a2);
    			append_dev(a2, i2);
    			append_dev(a2, t15);
    			append_dev(a2, span8);
    			append_dev(div5, t17);
    			append_dev(div5, div4);
    			append_dev(div5, t18);
    			append_dev(div5, a3);
    			append_dev(a3, i3);
    			append_dev(a3, t19);
    			append_dev(a3, span9);
    			append_dev(div84, t21);
    			append_dev(div84, div15);
    			append_dev(div15, div10);
    			append_dev(div10, a4);
    			append_dev(a4, span10);
    			append_dev(span10, img5);
    			append_dev(a4, t22);
    			append_dev(a4, span11);
    			append_dev(span11, img6);
    			append_dev(div10, t23);
    			append_dev(div10, a5);
    			append_dev(a5, span12);
    			append_dev(span12, img7);
    			append_dev(a5, t24);
    			append_dev(a5, span13);
    			append_dev(span13, img8);
    			append_dev(div10, t25);
    			append_dev(div10, button3);
    			append_dev(button3, i4);
    			append_dev(div15, t26);
    			append_dev(div15, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div12, t27);
    			append_dev(div12, ul0);
    			append_dev(ul0, li0);
    			append_dev(li0, span14);
    			append_dev(ul0, t29);
    			append_dev(ul0, li1);
    			append_dev(li1, a6);
    			append_dev(a6, i5);
    			append_dev(a6, t30);
    			append_dev(a6, span15);
    			append_dev(ul0, t32);
    			append_dev(ul0, li2);
    			append_dev(li2, a7);
    			append_dev(a7, i6);
    			append_dev(a7, t33);
    			append_dev(a7, span16);
    			append_dev(ul0, t35);
    			append_dev(ul0, li3);
    			append_dev(li3, a8);
    			append_dev(a8, i7);
    			append_dev(a8, t36);
    			append_dev(a8, span17);
    			append_dev(ul0, t38);
    			append_dev(ul0, li4);
    			append_dev(li4, a9);
    			append_dev(a9, i8);
    			append_dev(a9, t39);
    			append_dev(a9, span18);
    			append_dev(ul0, t41);
    			append_dev(ul0, li5);
    			append_dev(li5, a10);
    			append_dev(a10, i9);
    			append_dev(a10, t42);
    			append_dev(a10, span19);
    			append_dev(ul0, t44);
    			append_dev(ul0, li6);
    			append_dev(li6, a11);
    			append_dev(a11, i10);
    			append_dev(a11, t45);
    			append_dev(a11, span20);
    			append_dev(div15, t47);
    			append_dev(div15, div14);
    			append_dev(div84, t48);
    			append_dev(div84, div16);
    			append_dev(div84, t49);
    			append_dev(div84, div83);
    			append_dev(div83, div82);
    			append_dev(div82, div81);
    			append_dev(div81, div20);
    			append_dev(div20, div19);
    			append_dev(div19, div18);
    			append_dev(div18, h40);
    			append_dev(div18, t51);
    			append_dev(div18, div17);
    			append_dev(div17, ol);
    			append_dev(ol, li7);
    			append_dev(li7, a12);
    			append_dev(ol, t53);
    			append_dev(ol, li8);
    			append_dev(div81, t55);
    			append_dev(div81, div80);
    			append_dev(div80, div79);
    			append_dev(div79, div77);
    			append_dev(div77, div21);
    			append_dev(div77, t56);
    			append_dev(div77, div76);
    			append_dev(div76, div75);
    			append_dev(div75, div27);
    			append_dev(div27, div23);
    			append_dev(div23, div22);
    			append_dev(div22, button4);
    			append_dev(button4, i11);
    			append_dev(button4, t57);
    			append_dev(div27, t58);
    			append_dev(div27, div26);
    			append_dev(div26, div25);
    			append_dev(div25, div24);
    			append_dev(div24, input0);
    			append_dev(div24, t59);
    			append_dev(div24, i12);
    			append_dev(div75, t60);
    			append_dev(div75, div32);
    			append_dev(div32, table);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t62);
    			append_dev(tr0, th1);
    			append_dev(tr0, t64);
    			append_dev(tr0, th2);
    			append_dev(tr0, t66);
    			append_dev(tr0, th3);
    			append_dev(tr0, t68);
    			append_dev(tr0, th4);
    			append_dev(table, t70);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(td0, img9);
    			append_dev(tr1, t71);
    			append_dev(tr1, td1);
    			append_dev(tr1, t73);
    			append_dev(tr1, td2);
    			append_dev(tr1, t75);
    			append_dev(tr1, td3);
    			append_dev(tr1, t77);
    			append_dev(tr1, td4);
    			append_dev(td4, div31);
    			append_dev(div31, div28);
    			append_dev(div28, button5);
    			append_dev(div31, t79);
    			append_dev(div31, div29);
    			append_dev(div29, button6);
    			append_dev(div31, t81);
    			append_dev(div31, div30);
    			append_dev(div30, button7);
    			append_dev(div75, t83);
    			append_dev(div75, div34);
    			append_dev(div34, div33);
    			append_dev(div33, lord_icon0);
    			append_dev(div33, t84);
    			append_dev(div33, h50);
    			append_dev(div33, t86);
    			append_dev(div33, p0);
    			append_dev(div75, t88);
    			append_dev(div75, div36);
    			append_dev(div36, div35);
    			append_dev(div35, a13);
    			append_dev(div35, t90);
    			append_dev(div35, ul1);
    			append_dev(div35, t91);
    			append_dev(div35, a14);
    			append_dev(div75, t93);
    			append_dev(div75, div51);
    			append_dev(div51, div50);
    			append_dev(div50, div49);
    			append_dev(div49, div37);
    			append_dev(div37, h51);
    			append_dev(div37, t95);
    			append_dev(div37, button8);
    			append_dev(div49, t96);
    			append_dev(div49, form0);
    			append_dev(form0, div46);
    			append_dev(div46, div42);
    			append_dev(div42, label0);
    			append_dev(div42, t98);
    			append_dev(div42, div41);
    			append_dev(div41, div40);
    			append_dev(div40, div39);
    			append_dev(div39, img10);
    			append_dev(div39, t99);
    			append_dev(div39, div38);
    			append_dev(div38, input1);
    			append_dev(div38, t100);
    			append_dev(div38, label1);
    			append_dev(label1, span21);
    			append_dev(span21, i13);
    			append_dev(div46, t101);
    			append_dev(div46, div43);
    			append_dev(div43, label2);
    			append_dev(div43, t103);
    			append_dev(div43, input2);
    			append_dev(div46, t104);
    			append_dev(div46, div44);
    			append_dev(div44, label3);
    			append_dev(div44, t106);
    			append_dev(div44, input3);
    			append_dev(div46, t107);
    			append_dev(div46, div45);
    			append_dev(div45, label4);
    			append_dev(div45, t109);
    			append_dev(div45, input4);
    			append_dev(form0, t110);
    			append_dev(form0, div48);
    			append_dev(div48, div47);
    			append_dev(div47, button9);
    			append_dev(div47, t112);
    			append_dev(div47, button10);
    			append_dev(div75, t114);
    			append_dev(div75, div66);
    			append_dev(div66, div65);
    			append_dev(div65, div64);
    			append_dev(div64, div52);
    			append_dev(div52, h52);
    			append_dev(div52, t116);
    			append_dev(div52, button11);
    			append_dev(div64, t117);
    			append_dev(div64, form1);
    			append_dev(form1, div61);
    			append_dev(div61, div57);
    			append_dev(div57, label5);
    			append_dev(div57, t119);
    			append_dev(div57, div56);
    			append_dev(div56, div55);
    			append_dev(div55, div54);
    			append_dev(div54, img11);
    			append_dev(div54, t120);
    			append_dev(div54, div53);
    			append_dev(div53, input5);
    			append_dev(div53, t121);
    			append_dev(div53, label6);
    			append_dev(label6, span22);
    			append_dev(span22, i14);
    			append_dev(div61, t122);
    			append_dev(div61, div58);
    			append_dev(div58, label7);
    			append_dev(div58, t124);
    			append_dev(div58, input6);
    			append_dev(div61, t125);
    			append_dev(div61, div59);
    			append_dev(div59, label8);
    			append_dev(div59, t127);
    			append_dev(div59, input7);
    			append_dev(div61, t128);
    			append_dev(div61, div60);
    			append_dev(div60, label9);
    			append_dev(div60, t130);
    			append_dev(div60, input8);
    			append_dev(form1, t131);
    			append_dev(form1, div63);
    			append_dev(div63, div62);
    			append_dev(div62, button12);
    			append_dev(div62, t133);
    			append_dev(div62, button13);
    			append_dev(div75, t135);
    			append_dev(div75, div74);
    			append_dev(div74, div73);
    			append_dev(div73, div72);
    			append_dev(div72, div67);
    			append_dev(div67, button14);
    			append_dev(div72, t136);
    			append_dev(div72, div71);
    			append_dev(div71, div69);
    			append_dev(div69, lord_icon1);
    			append_dev(div69, t137);
    			append_dev(div69, div68);
    			append_dev(div68, h41);
    			append_dev(div68, t139);
    			append_dev(div68, p1);
    			append_dev(div71, t141);
    			append_dev(div71, div70);
    			append_dev(div70, button15);
    			append_dev(div70, t143);
    			append_dev(div70, button16);
    			append_dev(div79, t145);
    			append_dev(div79, div78);
    			append_dev(div78, script1);
    			append_dev(div78, t146);
    			append_dev(div78, script2);
    			append_dev(div78, t147);
    			append_dev(div78, script3);
    			append_dev(div78, t148);
    			append_dev(div78, script4);
    			append_dev(div78, t149);
    			append_dev(div78, script5);
    			append_dev(div78, t150);
    			append_dev(div78, script6);
    			append_dev(div78, t151);
    			append_dev(div78, script7);
    			append_dev(div78, t152);
    			append_dev(div78, script8);
    			append_dev(div78, t153);
    			append_dev(div78, script9);
    			append_dev(div78, t154);
    			append_dev(div78, script10);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(script0);
    			detach_dev(link4);
    			detach_dev(link5);
    			detach_dev(link6);
    			detach_dev(link7);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(main);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Products', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Products> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Products extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Products",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    /* src\views\Ordenes.svelte generated by Svelte v3.52.0 */
    const file$d = "src\\views\\Ordenes.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	child_ctx[16] = i;
    	const constants_0 = /*client*/ child_ctx[11].find(c => c.id == /*order*/ child_ctx[13].id);
    	child_ctx[14] = constants_0;
    	return child_ctx;
    }

    // (692:0) {:catch error}
    function create_catch_block_2$2(ctx) {
    	let t_value = /*error*/ ctx[17] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_2$2.name,
    		type: "catch",
    		source: "(692:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (153:0) {:then data}
    function create_then_block$5(ctx) {
    	let main;
    	let div2;
    	let headerapp;
    	let t0;
    	let div0;
    	let sidebar;
    	let t1;
    	let div1;
    	let t2;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[10] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$5,
    		then: create_then_block_1$5,
    		catch: create_catch_block_1$5,
    		value: 11,
    		error: 17
    	};

    	handle_promise(/*getAllClients*/ ctx[2](), info);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div2 = element("div");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			info.block.c();
    			attr_dev(div0, "class", "app-menu navbar-menu");
    			add_location(div0, file$d, 158, 9, 4777);
    			attr_dev(div1, "class", "vertical-overlay");
    			add_location(div1, file$d, 164, 9, 4962);
    			attr_dev(div2, "id", "layout-wrapper");
    			add_location(div2, file$d, 155, 6, 4660);
    			add_location(main, file$d, 153, 3, 4619);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div2);
    			mount_component(headerapp, div2, null);
    			append_dev(div2, t0);
    			append_dev(div2, div0);
    			mount_component(sidebar, div0, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div2, t2);
    			info.block.m(div2, info.anchor = null);
    			info.mount = () => div2;
    			info.anchor = null;
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$5.name,
    		type: "then",
    		source: "(153:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (687:9) {:catch error}
    function create_catch_block_1$5(ctx) {
    	let t_value = /*error*/ ctx[17] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$5.name,
    		type: "catch",
    		source: "(687:9) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (172:9) {:then client}
    function create_then_block_1$5(ctx) {
    	let div13;
    	let div12;
    	let div11;
    	let div3;
    	let div2;
    	let div1;
    	let h4;
    	let t1;
    	let div0;
    	let ol;
    	let li0;
    	let a;
    	let t3;
    	let li1;
    	let t5;
    	let div10;
    	let div9;
    	let div7;
    	let div6;
    	let h5;
    	let t7;
    	let div5;
    	let div4;
    	let button;
    	let t9;
    	let t10;
    	let div8;
    	let script0;
    	let script0_src_value;
    	let t11;
    	let script1;
    	let script1_src_value;
    	let t12;
    	let script2;
    	let script2_src_value;
    	let t13;
    	let script3;
    	let script3_src_value;
    	let t14;
    	let script4;
    	let script4_src_value;
    	let t15;
    	let script5;
    	let script5_src_value;
    	let t16;
    	let script6;
    	let script6_src_value;
    	let t17;
    	let script7;
    	let script7_src_value;
    	let t18;
    	let script8;
    	let script8_src_value;
    	let t19;
    	let script9;
    	let script9_src_value;
    	let t20;
    	let script10;
    	let script10_src_value;
    	let t21;
    	let script11;
    	let script11_src_value;
    	let t22;
    	let script12;
    	let script12_src_value;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_2$2,
    		then: create_then_block_2$2,
    		catch: create_catch_block$5,
    		value: 12,
    		error: 17
    	};

    	handle_promise(/*getAllOrders*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Ordenes";
    			t1 = space();
    			div0 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a = element("a");
    			a.textContent = "Home";
    			t3 = space();
    			li1 = element("li");
    			li1.textContent = "Ordenes";
    			t5 = space();
    			div10 = element("div");
    			div9 = element("div");
    			div7 = element("div");
    			div6 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Lista de Ordenes";
    			t7 = space();
    			div5 = element("div");
    			div4 = element("div");
    			button = element("button");
    			button.textContent = "Crear una Orden";
    			t9 = space();
    			info.block.c();
    			t10 = space();
    			div8 = element("div");
    			script0 = element("script");
    			t11 = space();
    			script1 = element("script");
    			t12 = space();
    			script2 = element("script");
    			t13 = space();
    			script3 = element("script");
    			t14 = space();
    			script4 = element("script");
    			t15 = space();
    			script5 = element("script");
    			t16 = space();
    			script6 = element("script");
    			t17 = space();
    			script7 = element("script");
    			t18 = space();
    			script8 = element("script");
    			t19 = space();
    			script9 = element("script");
    			t20 = space();
    			script10 = element("script");
    			t21 = space();
    			script11 = element("script");
    			t22 = space();
    			script12 = element("script");
    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$d, 180, 30, 5727);
    			attr_dev(a, "href", "/home");
    			add_location(a, file$d, 185, 39, 5992);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$d, 184, 36, 5923);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$d, 187, 36, 6097);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$d, 183, 33, 5858);
    			attr_dev(div0, "class", "page-title-right");
    			add_location(div0, file$d, 182, 30, 5793);
    			attr_dev(div1, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div1, file$d, 178, 27, 5583);
    			attr_dev(div2, "class", "col-12");
    			add_location(div2, file$d, 177, 24, 5534);
    			attr_dev(div3, "class", "row");
    			add_location(div3, file$d, 176, 21, 5491);
    			attr_dev(h5, "class", "card-title mb-0 flex-grow-1");
    			add_location(h5, file$d, 202, 33, 6759);
    			attr_dev(button, "class", "btn btn-primary");
    			attr_dev(button, "data-bs-toggle", "modal");
    			attr_dev(button, "data-bs-target", "#showModalAñadirO");
    			add_location(button, file$d, 207, 39, 7074);
    			attr_dev(div4, "class", "flax-shrink-0 hstack gap-2");
    			add_location(div4, file$d, 206, 36, 6993);
    			attr_dev(div5, "class", "flex-shrink-0");
    			add_location(div5, file$d, 205, 33, 6928);
    			attr_dev(div6, "class", "card-header d-flex align-items-center border-0");
    			add_location(div6, file$d, 200, 30, 6630);
    			attr_dev(div7, "class", "card");
    			add_location(div7, file$d, 199, 27, 6580);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$d, 645, 30, 37445);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$d, 647, 30, 37598);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$d, 649, 30, 37741);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$d, 651, 30, 37881);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$d, 653, 30, 38026);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$d, 655, 30, 38173);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/prismjs/prism.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$d, 658, 30, 38353);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/list.js/list.min.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$d, 660, 30, 38486);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/libs/list.pagination.js/list.pagination.min.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$d, 662, 30, 38622);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/listjs.init.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$d, 666, 30, 38834);
    			if (!src_url_equal(script10.src, script10_src_value = "http://localhost:8080/libs/sweetalert2/sweetalert2.min.js")) attr_dev(script10, "src", script10_src_value);
    			add_location(script10, file$d, 670, 30, 39027);
    			if (!src_url_equal(script11.src, script11_src_value = "http://localhost:8080/js/pages/crypto-orders.init.js")) attr_dev(script11, "src", script11_src_value);
    			add_location(script11, file$d, 674, 30, 39233);
    			if (!src_url_equal(script12.src, script12_src_value = "http://localhost:8080/js/app.js")) attr_dev(script12, "src", script12_src_value);
    			add_location(script12, file$d, 678, 30, 39424);
    			add_location(div8, file$d, 640, 27, 37135);
    			attr_dev(div9, "class", "col-lg-12");
    			add_location(div9, file$d, 198, 24, 6528);
    			attr_dev(div10, "class", "row");
    			attr_dev(div10, "id", "contactList");
    			add_location(div10, file$d, 197, 21, 6468);
    			attr_dev(div11, "class", "container-fluid");
    			add_location(div11, file$d, 174, 18, 5391);
    			attr_dev(div12, "class", "page-content");
    			add_location(div12, file$d, 173, 15, 5345);
    			attr_dev(div13, "class", "main-content");
    			add_location(div13, file$d, 172, 12, 5302);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div13, anchor);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h4);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a);
    			append_dev(ol, t3);
    			append_dev(ol, li1);
    			append_dev(div11, t5);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div7);
    			append_dev(div7, div6);
    			append_dev(div6, h5);
    			append_dev(div6, t7);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, button);
    			append_dev(div7, t9);
    			info.block.m(div7, info.anchor = null);
    			info.mount = () => div7;
    			info.anchor = null;
    			append_dev(div9, t10);
    			append_dev(div9, div8);
    			append_dev(div8, script0);
    			append_dev(div8, t11);
    			append_dev(div8, script1);
    			append_dev(div8, t12);
    			append_dev(div8, script2);
    			append_dev(div8, t13);
    			append_dev(div8, script3);
    			append_dev(div8, t14);
    			append_dev(div8, script4);
    			append_dev(div8, t15);
    			append_dev(div8, script5);
    			append_dev(div8, t16);
    			append_dev(div8, script6);
    			append_dev(div8, t17);
    			append_dev(div8, script7);
    			append_dev(div8, t18);
    			append_dev(div8, script8);
    			append_dev(div8, t19);
    			append_dev(div8, script9);
    			append_dev(div8, t20);
    			append_dev(div8, script10);
    			append_dev(div8, t21);
    			append_dev(div8, script11);
    			append_dev(div8, t22);
    			append_dev(div8, script12);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div13);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$5.name,
    		type: "then",
    		source: "(172:9) {:then client}",
    		ctx
    	});

    	return block;
    }

    // (631:30) {:catch error}
    function create_catch_block$5(ctx) {
    	let t_value = /*error*/ ctx[17] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$5.name,
    		type: "catch",
    		source: "(631:30) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (219:30) {:then dataOrders}
    function create_then_block_2$2(ctx) {
    	let div36;
    	let div35;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;
    	let t7;
    	let th4;
    	let t9;
    	let th5;
    	let t11;
    	let tbody;
    	let t12;
    	let div1;
    	let div0;
    	let lord_icon0;
    	let lord_icon0_src_value;
    	let t13;
    	let h50;
    	let t15;
    	let p0;
    	let t17;
    	let div9;
    	let div8;
    	let div7;
    	let div2;
    	let h51;
    	let t19;
    	let button0;
    	let t20;
    	let form0;
    	let div4;
    	let div3;
    	let label0;
    	let t22;
    	let input0;
    	let t23;
    	let div6;
    	let div5;
    	let button1;
    	let t25;
    	let button2;
    	let t27;
    	let div26;
    	let div25;
    	let div24;
    	let div10;
    	let h52;
    	let t29;
    	let button3;
    	let t30;
    	let form1;
    	let div21;
    	let div11;
    	let label1;
    	let t32;
    	let input1;
    	let t33;
    	let div12;
    	let label2;
    	let t35;
    	let select0;
    	let option0;
    	let option1;
    	let t38;
    	let div13;
    	let label3;
    	let t40;
    	let select1;
    	let option2;
    	let option3;
    	let t43;
    	let div14;
    	let label4;
    	let t45;
    	let input2;
    	let t46;
    	let div15;
    	let label5;
    	let t48;
    	let select2;
    	let option4;
    	let option5;
    	let t51;
    	let div16;
    	let label6;
    	let t53;
    	let input3;
    	let t54;
    	let div17;
    	let label7;
    	let t56;
    	let select3;
    	let option6;
    	let option7;
    	let t59;
    	let div18;
    	let label8;
    	let t61;
    	let select4;
    	let option8;
    	let option9;
    	let t64;
    	let div19;
    	let label9;
    	let t66;
    	let select5;
    	let option10;
    	let option11;
    	let t69;
    	let div20;
    	let label10;
    	let t71;
    	let input4;
    	let t72;
    	let div23;
    	let div22;
    	let button4;
    	let t74;
    	let button5;
    	let t76;
    	let div34;
    	let div33;
    	let div32;
    	let div27;
    	let button6;
    	let t77;
    	let div31;
    	let div29;
    	let lord_icon1;
    	let lord_icon1_src_value;
    	let t78;
    	let div28;
    	let h4;
    	let t80;
    	let p1;
    	let t82;
    	let div30;
    	let button7;
    	let t84;
    	let button8;
    	let each_value = /*dataOrders*/ ctx[12];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div36 = element("div");
    			div35 = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Número de Folio";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "Cliente";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Tipo de pago";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "Monto";
    			t7 = space();
    			th4 = element("th");
    			th4.textContent = "Estado de la Orden";
    			t9 = space();
    			th5 = element("th");
    			th5.textContent = "Acción";
    			t11 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t12 = space();
    			div1 = element("div");
    			div0 = element("div");
    			lord_icon0 = element("lord-icon");
    			t13 = space();
    			h50 = element("h5");
    			h50.textContent = "Lo sentimos! No se encontraron\r\n                                                resultados";
    			t15 = space();
    			p0 = element("p");
    			p0.textContent = "Hemos buscado en todas las\r\n                                                etiquetas. No encontramos\r\n                                                ningúna etiqueta para su\r\n                                                búsqueda.";
    			t17 = space();
    			div9 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			div2 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Editar Orden";
    			t19 = space();
    			button0 = element("button");
    			t20 = space();
    			form0 = element("form");
    			div4 = element("div");
    			div3 = element("div");
    			label0 = element("label");
    			label0.textContent = "Estado de la Orden";
    			t22 = space();
    			input0 = element("input");
    			t23 = space();
    			div6 = element("div");
    			div5 = element("div");
    			button1 = element("button");
    			button1.textContent = "Cerrar";
    			t25 = space();
    			button2 = element("button");
    			button2.textContent = "Guardar cambios";
    			t27 = space();
    			div26 = element("div");
    			div25 = element("div");
    			div24 = element("div");
    			div10 = element("div");
    			h52 = element("h5");
    			h52.textContent = "Crear Orden";
    			t29 = space();
    			button3 = element("button");
    			t30 = space();
    			form1 = element("form");
    			div21 = element("div");
    			div11 = element("div");
    			label1 = element("label");
    			label1.textContent = "Folio";
    			t32 = space();
    			input1 = element("input");
    			t33 = space();
    			div12 = element("div");
    			label2 = element("label");
    			label2.textContent = "Cliente";
    			t35 = space();
    			select0 = element("select");
    			option0 = element("option");
    			option0.textContent = "Mary Cousar";
    			option1 = element("option");
    			option1.textContent = "...";
    			t38 = space();
    			div13 = element("div");
    			label3 = element("label");
    			label3.textContent = "Producto";
    			t40 = space();
    			select1 = element("select");
    			option2 = element("option");
    			option2.textContent = "Escurridor";
    			option3 = element("option");
    			option3.textContent = "...";
    			t43 = space();
    			div14 = element("div");
    			label4 = element("label");
    			label4.textContent = "Cantidad";
    			t45 = space();
    			input2 = element("input");
    			t46 = space();
    			div15 = element("div");
    			label5 = element("label");
    			label5.textContent = "Tipo de Pago";
    			t48 = space();
    			select2 = element("select");
    			option4 = element("option");
    			option4.textContent = "Efectivo";
    			option5 = element("option");
    			option5.textContent = "...";
    			t51 = space();
    			div16 = element("div");
    			label6 = element("label");
    			label6.textContent = "Estado de la Orden";
    			t53 = space();
    			input3 = element("input");
    			t54 = space();
    			div17 = element("div");
    			label7 = element("label");
    			label7.textContent = "Dirección";
    			t56 = space();
    			select3 = element("select");
    			option6 = element("option");
    			option6.textContent = "Street 4";
    			option7 = element("option");
    			option7.textContent = "...";
    			t59 = space();
    			div18 = element("div");
    			label8 = element("label");
    			label8.textContent = "Cupón";
    			t61 = space();
    			select4 = element("select");
    			option8 = element("option");
    			option8.textContent = "Descuento 50%";
    			option9 = element("option");
    			option9.textContent = "...";
    			t64 = space();
    			div19 = element("div");
    			label9 = element("label");
    			label9.textContent = "Pago de la Orden";
    			t66 = space();
    			select5 = element("select");
    			option10 = element("option");
    			option10.textContent = "Sí/No";
    			option11 = element("option");
    			option11.textContent = "...";
    			t69 = space();
    			div20 = element("div");
    			label10 = element("label");
    			label10.textContent = "Total";
    			t71 = space();
    			input4 = element("input");
    			t72 = space();
    			div23 = element("div");
    			div22 = element("div");
    			button4 = element("button");
    			button4.textContent = "Cerrar";
    			t74 = space();
    			button5 = element("button");
    			button5.textContent = "Añadir Orden";
    			t76 = space();
    			div34 = element("div");
    			div33 = element("div");
    			div32 = element("div");
    			div27 = element("div");
    			button6 = element("button");
    			t77 = space();
    			div31 = element("div");
    			div29 = element("div");
    			lord_icon1 = element("lord-icon");
    			t78 = space();
    			div28 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Estás seguro ?";
    			t80 = space();
    			p1 = element("p");
    			p1.textContent = "¿Estás seguro de\r\n                                                            eliminar esta orden?";
    			t82 = space();
    			div30 = element("div");
    			button7 = element("button");
    			button7.textContent = "Cerrar";
    			t84 = space();
    			button8 = element("button");
    			button8.textContent = "Sí, borrar orden!";
    			attr_dev(th0, "scope", "col");
    			add_location(th0, file$d, 226, 48, 8149);
    			attr_dev(th1, "scope", "col");
    			add_location(th1, file$d, 228, 48, 8288);
    			attr_dev(th2, "scope", "col");
    			add_location(th2, file$d, 229, 48, 8366);
    			attr_dev(th3, "scope", "col");
    			add_location(th3, file$d, 232, 48, 8504);
    			attr_dev(th4, "scope", "col");
    			add_location(th4, file$d, 233, 48, 8580);
    			attr_dev(th5, "scope", "col");
    			add_location(th5, file$d, 235, 48, 8722);
    			add_location(tr, file$d, 225, 45, 8095);
    			attr_dev(thead, "class", "table-light text-muted");
    			add_location(thead, file$d, 224, 42, 8010);
    			attr_dev(tbody, "class", "list form-check-all");
    			add_location(tbody, file$d, 239, 42, 8957);
    			attr_dev(table, "class", "table align-middle table-nowrap");
    			attr_dev(table, "id", "customerTable");
    			add_location(table, file$d, 221, 39, 7814);
    			if (!src_url_equal(lord_icon0.src, lord_icon0_src_value = "https://cdn.lordicon.com/msoeawqm.json")) set_custom_element_data(lord_icon0, "src", lord_icon0_src_value);
    			set_custom_element_data(lord_icon0, "trigger", "loop");
    			set_custom_element_data(lord_icon0, "colors", "primary:#121331,secondary:#08a88a");
    			set_style(lord_icon0, "width", "75px");
    			set_style(lord_icon0, "height", "75px");
    			add_location(lord_icon0, file$d, 313, 45, 14148);
    			attr_dev(h50, "class", "mt-2");
    			add_location(h50, file$d, 318, 45, 14538);
    			attr_dev(p0, "class", "text-muted mb-0");
    			add_location(p0, file$d, 322, 45, 14794);
    			attr_dev(div0, "class", "text-center");
    			add_location(div0, file$d, 312, 42, 14076);
    			attr_dev(div1, "class", "noresult");
    			set_style(div1, "display", "none");
    			add_location(div1, file$d, 309, 39, 13902);
    			attr_dev(h51, "class", "modal-title");
    			attr_dev(h51, "id", "exampleModalLabel");
    			add_location(h51, file$d, 342, 51, 16032);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn-close");
    			attr_dev(button0, "data-bs-dismiss", "modal");
    			attr_dev(button0, "aria-label", "Close");
    			attr_dev(button0, "id", "close-modal");
    			add_location(button0, file$d, 347, 51, 16368);
    			attr_dev(div2, "class", "modal-header bg-light p-3");
    			add_location(div2, file$d, 340, 48, 15888);
    			attr_dev(label0, "for", "estatus-field");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$d, 357, 57, 17067);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "estatus-field");
    			attr_dev(input0, "class", "form-control");
    			attr_dev(input0, "placeholder", "Estado de la Orden");
    			input0.required = true;
    			add_location(input0, file$d, 361, 57, 17382);
    			attr_dev(div3, "class", "mb-3");
    			add_location(div3, file$d, 356, 54, 16990);
    			attr_dev(div4, "class", "modal-body");
    			add_location(div4, file$d, 355, 51, 16910);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-light");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			add_location(button1, file$d, 372, 57, 18209);
    			attr_dev(button2, "type", "submit");
    			attr_dev(button2, "class", "btn btn-success");
    			attr_dev(button2, "id", "add-btn");
    			add_location(button2, file$d, 377, 57, 18596);
    			attr_dev(div5, "class", "hstack gap-2 justify-content-end");
    			add_location(div5, file$d, 370, 54, 18046);
    			attr_dev(div6, "class", "modal-footer");
    			add_location(div6, file$d, 369, 51, 17964);
    			add_location(form0, file$d, 354, 48, 16851);
    			attr_dev(div7, "class", "modal-content");
    			add_location(div7, file$d, 339, 45, 15811);
    			attr_dev(div8, "class", "modal-dialog modal-dialog-centered");
    			add_location(div8, file$d, 337, 42, 15670);
    			attr_dev(div9, "class", "modal fade");
    			attr_dev(div9, "id", "showModalEditarO");
    			attr_dev(div9, "tabindex", "-1");
    			attr_dev(div9, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div9, "aria-hidden", "true");
    			add_location(div9, file$d, 331, 39, 15296);
    			attr_dev(h52, "class", "modal-title");
    			attr_dev(h52, "id", "exampleModalLabel");
    			add_location(h52, file$d, 400, 51, 20031);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "btn-close");
    			attr_dev(button3, "data-bs-dismiss", "modal");
    			attr_dev(button3, "aria-label", "Close");
    			attr_dev(button3, "id", "close-modal");
    			add_location(button3, file$d, 405, 51, 20366);
    			attr_dev(div10, "class", "modal-header bg-light p-3");
    			add_location(div10, file$d, 398, 48, 19887);
    			attr_dev(label1, "for", "folio-field");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$d, 415, 57, 21065);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "id", "folio-field");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "placeholder", "Ingresar Folio");
    			input1.required = true;
    			add_location(input1, file$d, 419, 57, 21365);
    			attr_dev(div11, "class", "mb-3");
    			add_location(div11, file$d, 414, 54, 20988);
    			attr_dev(label2, "for", "ForminputState1");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$d, 427, 57, 21962);
    			option0.selected = true;
    			option0.__value = "Mary Cousar";
    			option0.value = option0.__value;
    			add_location(option0, file$d, 436, 60, 22664);
    			option1.__value = "...";
    			option1.value = option1.__value;
    			add_location(option1, file$d, 438, 60, 22828);
    			attr_dev(select0, "id", "ForminputState1");
    			attr_dev(select0, "class", "form-select");
    			attr_dev(select0, "data-choices", "");
    			attr_dev(select0, "data-choices-sorting", "true");
    			add_location(select0, file$d, 431, 57, 22268);
    			attr_dev(div12, "class", "mb-3");
    			add_location(div12, file$d, 426, 54, 21885);
    			attr_dev(label3, "for", "ForminputState2");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$d, 442, 57, 23111);
    			option2.selected = true;
    			option2.__value = "Escurridor";
    			option2.value = option2.__value;
    			add_location(option2, file$d, 451, 60, 23814);
    			option3.__value = "...";
    			option3.value = option3.__value;
    			add_location(option3, file$d, 453, 60, 23977);
    			attr_dev(select1, "id", "ForminputState2");
    			attr_dev(select1, "class", "form-select");
    			attr_dev(select1, "data-choices", "");
    			attr_dev(select1, "data-choices-sorting", "true");
    			add_location(select1, file$d, 446, 57, 23418);
    			attr_dev(div13, "class", "mb-3");
    			add_location(div13, file$d, 441, 54, 23034);
    			attr_dev(label4, "for", "monto-field");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$d, 457, 57, 24260);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "id", "monto-field");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "placeholder", "Ingresar Cantidad");
    			input2.required = true;
    			add_location(input2, file$d, 461, 57, 24563);
    			attr_dev(div14, "class", "mb-3");
    			add_location(div14, file$d, 456, 54, 24183);
    			attr_dev(label5, "for", "ForminputState3");
    			attr_dev(label5, "class", "form-label");
    			add_location(label5, file$d, 469, 57, 25163);
    			option4.selected = true;
    			option4.__value = "Efectivo";
    			option4.value = option4.__value;
    			add_location(option4, file$d, 478, 60, 25870);
    			option5.__value = "...";
    			option5.value = option5.__value;
    			add_location(option5, file$d, 480, 60, 26031);
    			attr_dev(select2, "id", "ForminputState3");
    			attr_dev(select2, "class", "form-select");
    			attr_dev(select2, "data-choices", "");
    			attr_dev(select2, "data-choices-sorting", "true");
    			add_location(select2, file$d, 473, 57, 25474);
    			attr_dev(div15, "class", "mb-3");
    			add_location(div15, file$d, 468, 54, 25086);
    			attr_dev(label6, "for", "status-field");
    			attr_dev(label6, "class", "form-label");
    			add_location(label6, file$d, 484, 57, 26314);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "id", "status-field");
    			attr_dev(input3, "class", "form-control ");
    			attr_dev(input3, "placeholder", "Ingresar Pendiente/Pagada/Enviada/Cancelada");
    			input3.required = true;
    			add_location(input3, file$d, 488, 57, 26628);
    			attr_dev(div16, "class", "mb-3");
    			add_location(div16, file$d, 483, 54, 26237);
    			attr_dev(label7, "for", "ForminputState4");
    			attr_dev(label7, "class", "form-label");
    			add_location(label7, file$d, 496, 57, 27256);
    			option6.selected = true;
    			option6.__value = "Street 4";
    			option6.value = option6.__value;
    			add_location(option6, file$d, 505, 60, 27960);
    			option7.__value = "...";
    			option7.value = option7.__value;
    			add_location(option7, file$d, 507, 60, 28121);
    			attr_dev(select3, "id", "ForminputState4");
    			attr_dev(select3, "class", "form-select");
    			attr_dev(select3, "data-choices", "");
    			attr_dev(select3, "data-choices-sorting", "true");
    			add_location(select3, file$d, 500, 57, 27564);
    			attr_dev(div17, "class", "mb-3");
    			add_location(div17, file$d, 495, 54, 27179);
    			attr_dev(label8, "for", "ForminputState5");
    			attr_dev(label8, "class", "form-label");
    			add_location(label8, file$d, 511, 57, 28404);
    			option8.selected = true;
    			option8.__value = "Descuento 50%";
    			option8.value = option8.__value;
    			add_location(option8, file$d, 520, 60, 29104);
    			option9.__value = "...";
    			option9.value = option9.__value;
    			add_location(option9, file$d, 522, 60, 29270);
    			attr_dev(select4, "id", "ForminputState5");
    			attr_dev(select4, "class", "form-select");
    			attr_dev(select4, "data-choices", "");
    			attr_dev(select4, "data-choices-sorting", "true");
    			add_location(select4, file$d, 515, 57, 28708);
    			attr_dev(div18, "class", "mb-3");
    			add_location(div18, file$d, 510, 54, 28327);
    			attr_dev(label9, "for", "ForminputState6");
    			attr_dev(label9, "class", "form-label");
    			add_location(label9, file$d, 526, 57, 29553);
    			option10.selected = true;
    			option10.__value = "Sí/No";
    			option10.value = option10.__value;
    			add_location(option10, file$d, 535, 60, 30264);
    			option11.__value = "...";
    			option11.value = option11.__value;
    			add_location(option11, file$d, 537, 60, 30422);
    			attr_dev(select5, "id", "ForminputState6");
    			attr_dev(select5, "class", "form-select");
    			attr_dev(select5, "data-choices", "");
    			attr_dev(select5, "data-choices-sorting", "true");
    			add_location(select5, file$d, 530, 57, 29868);
    			attr_dev(div19, "class", "mb-3");
    			add_location(div19, file$d, 525, 54, 29476);
    			attr_dev(label10, "for", "total-field");
    			attr_dev(label10, "class", "form-label");
    			add_location(label10, file$d, 542, 57, 30707);
    			attr_dev(input4, "type", "text");
    			attr_dev(input4, "id", "total-field");
    			attr_dev(input4, "class", "form-control ");
    			attr_dev(input4, "placeholder", "Ingresar Total");
    			input4.required = true;
    			add_location(input4, file$d, 546, 57, 31007);
    			attr_dev(div20, "class", "mb-3");
    			add_location(div20, file$d, 541, 54, 30630);
    			attr_dev(div21, "class", "modal-body");
    			add_location(div21, file$d, 413, 51, 20908);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "btn btn-light");
    			attr_dev(button4, "data-bs-dismiss", "modal");
    			add_location(button4, file$d, 557, 57, 31829);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "class", "btn btn-success");
    			attr_dev(button5, "id", "edit-btn");
    			add_location(button5, file$d, 562, 57, 32216);
    			attr_dev(div22, "class", "hstack gap-2 justify-content-end");
    			add_location(div22, file$d, 555, 54, 31666);
    			attr_dev(div23, "class", "modal-footer");
    			add_location(div23, file$d, 554, 51, 31584);
    			add_location(form1, file$d, 412, 48, 20849);
    			attr_dev(div24, "class", "modal-content");
    			add_location(div24, file$d, 397, 45, 19810);
    			attr_dev(div25, "class", "modal-dialog modal-dialog-centered");
    			add_location(div25, file$d, 395, 42, 19669);
    			attr_dev(div26, "class", "modal fade");
    			attr_dev(div26, "id", "showModalAñadirO");
    			attr_dev(div26, "tabindex", "-1");
    			attr_dev(div26, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div26, "aria-hidden", "true");
    			add_location(div26, file$d, 389, 39, 19295);
    			attr_dev(button6, "type", "button");
    			attr_dev(button6, "class", "btn-close");
    			attr_dev(button6, "data-bs-dismiss", "modal");
    			attr_dev(button6, "aria-label", "Close");
    			attr_dev(button6, "id", "btn-close");
    			add_location(button6, file$d, 584, 51, 33569);
    			attr_dev(div27, "class", "modal-header");
    			add_location(div27, file$d, 583, 48, 33490);
    			if (!src_url_equal(lord_icon1.src, lord_icon1_src_value = "https://cdn.lordicon.com/gsqxdxog.json")) set_custom_element_data(lord_icon1, "src", lord_icon1_src_value);
    			set_custom_element_data(lord_icon1, "trigger", "loop");
    			set_custom_element_data(lord_icon1, "colors", "primary:#f7b84b,secondary:#f06548");
    			set_style(lord_icon1, "width", "100px");
    			set_style(lord_icon1, "height", "100px");
    			add_location(lord_icon1, file$d, 594, 54, 34268);
    			add_location(h4, file$d, 601, 57, 34864);
    			attr_dev(p1, "class", "text-muted mx-4 mb-0");
    			add_location(p1, file$d, 602, 57, 34946);
    			attr_dev(div28, "class", "mt-4 pt-2 fs-15 mx-4 mx-sm-5");
    			add_location(div28, file$d, 599, 54, 34705);
    			attr_dev(div29, "class", "mt-2 text-center");
    			add_location(div29, file$d, 592, 51, 34127);
    			attr_dev(button7, "type", "button");
    			attr_dev(button7, "class", "btn w-sm btn-light");
    			attr_dev(button7, "data-bs-dismiss", "modal");
    			add_location(button7, file$d, 611, 54, 35606);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "class", "btn w-sm btn-danger ");
    			attr_dev(button8, "id", "delete-record");
    			add_location(button8, file$d, 616, 54, 35983);
    			attr_dev(div30, "class", "d-flex gap-2 justify-content-center mt-4 mb-2");
    			add_location(div30, file$d, 609, 51, 35436);
    			attr_dev(div31, "class", "modal-body");
    			add_location(div31, file$d, 591, 48, 34050);
    			attr_dev(div32, "class", "modal-content");
    			add_location(div32, file$d, 582, 45, 33413);
    			attr_dev(div33, "class", "modal-dialog modal-dialog-centered");
    			add_location(div33, file$d, 580, 42, 33272);
    			attr_dev(div34, "class", "modal fade zoomIn");
    			attr_dev(div34, "id", "deleteRecordModalO");
    			attr_dev(div34, "tabindex", "-1");
    			attr_dev(div34, "aria-hidden", "true");
    			add_location(div34, file$d, 575, 39, 32968);
    			attr_dev(div35, "class", "table-responsive table-card");
    			add_location(div35, file$d, 220, 36, 7732);
    			attr_dev(div36, "class", "card-body");
    			add_location(div36, file$d, 219, 33, 7671);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div36, anchor);
    			append_dev(div36, div35);
    			append_dev(div35, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    			append_dev(tr, t7);
    			append_dev(tr, th4);
    			append_dev(tr, t9);
    			append_dev(tr, th5);
    			append_dev(table, t11);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody, null);
    			}

    			append_dev(div35, t12);
    			append_dev(div35, div1);
    			append_dev(div1, div0);
    			append_dev(div0, lord_icon0);
    			append_dev(div0, t13);
    			append_dev(div0, h50);
    			append_dev(div0, t15);
    			append_dev(div0, p0);
    			append_dev(div35, t17);
    			append_dev(div35, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div2);
    			append_dev(div2, h51);
    			append_dev(div2, t19);
    			append_dev(div2, button0);
    			append_dev(div7, t20);
    			append_dev(div7, form0);
    			append_dev(form0, div4);
    			append_dev(div4, div3);
    			append_dev(div3, label0);
    			append_dev(div3, t22);
    			append_dev(div3, input0);
    			append_dev(form0, t23);
    			append_dev(form0, div6);
    			append_dev(div6, div5);
    			append_dev(div5, button1);
    			append_dev(div5, t25);
    			append_dev(div5, button2);
    			append_dev(div35, t27);
    			append_dev(div35, div26);
    			append_dev(div26, div25);
    			append_dev(div25, div24);
    			append_dev(div24, div10);
    			append_dev(div10, h52);
    			append_dev(div10, t29);
    			append_dev(div10, button3);
    			append_dev(div24, t30);
    			append_dev(div24, form1);
    			append_dev(form1, div21);
    			append_dev(div21, div11);
    			append_dev(div11, label1);
    			append_dev(div11, t32);
    			append_dev(div11, input1);
    			append_dev(div21, t33);
    			append_dev(div21, div12);
    			append_dev(div12, label2);
    			append_dev(div12, t35);
    			append_dev(div12, select0);
    			append_dev(select0, option0);
    			append_dev(select0, option1);
    			append_dev(div21, t38);
    			append_dev(div21, div13);
    			append_dev(div13, label3);
    			append_dev(div13, t40);
    			append_dev(div13, select1);
    			append_dev(select1, option2);
    			append_dev(select1, option3);
    			append_dev(div21, t43);
    			append_dev(div21, div14);
    			append_dev(div14, label4);
    			append_dev(div14, t45);
    			append_dev(div14, input2);
    			append_dev(div21, t46);
    			append_dev(div21, div15);
    			append_dev(div15, label5);
    			append_dev(div15, t48);
    			append_dev(div15, select2);
    			append_dev(select2, option4);
    			append_dev(select2, option5);
    			append_dev(div21, t51);
    			append_dev(div21, div16);
    			append_dev(div16, label6);
    			append_dev(div16, t53);
    			append_dev(div16, input3);
    			append_dev(div21, t54);
    			append_dev(div21, div17);
    			append_dev(div17, label7);
    			append_dev(div17, t56);
    			append_dev(div17, select3);
    			append_dev(select3, option6);
    			append_dev(select3, option7);
    			append_dev(div21, t59);
    			append_dev(div21, div18);
    			append_dev(div18, label8);
    			append_dev(div18, t61);
    			append_dev(div18, select4);
    			append_dev(select4, option8);
    			append_dev(select4, option9);
    			append_dev(div21, t64);
    			append_dev(div21, div19);
    			append_dev(div19, label9);
    			append_dev(div19, t66);
    			append_dev(div19, select5);
    			append_dev(select5, option10);
    			append_dev(select5, option11);
    			append_dev(div21, t69);
    			append_dev(div21, div20);
    			append_dev(div20, label10);
    			append_dev(div20, t71);
    			append_dev(div20, input4);
    			append_dev(form1, t72);
    			append_dev(form1, div23);
    			append_dev(div23, div22);
    			append_dev(div22, button4);
    			append_dev(div22, t74);
    			append_dev(div22, button5);
    			append_dev(div35, t76);
    			append_dev(div35, div34);
    			append_dev(div34, div33);
    			append_dev(div33, div32);
    			append_dev(div32, div27);
    			append_dev(div27, button6);
    			append_dev(div32, t77);
    			append_dev(div32, div31);
    			append_dev(div31, div29);
    			append_dev(div29, lord_icon1);
    			append_dev(div29, t78);
    			append_dev(div29, div28);
    			append_dev(div28, h4);
    			append_dev(div28, t80);
    			append_dev(div28, p1);
    			append_dev(div31, t82);
    			append_dev(div31, div30);
    			append_dev(div30, button7);
    			append_dev(div30, t84);
    			append_dev(div30, button8);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*deleteOrder, getAllOrders, getAllClients*/ 14) {
    				each_value = /*dataOrders*/ ctx[12];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div36);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_2$2.name,
    		type: "then",
    		source: "(219:30) {:then dataOrders}",
    		ctx
    	});

    	return block;
    }

    // (264:51) {:else}
    function create_else_block(ctx) {
    	let td;

    	const block = {
    		c: function create() {
    			td = element("td");
    			td.textContent = "Sin metodo de pago";
    			attr_dev(td, "class", "typeBuy text-success");
    			add_location(td, file$d, 264, 54, 10718);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(264:51) {:else}",
    		ctx
    	});

    	return block;
    }

    // (260:88) 
    function create_if_block_2$1(ctx) {
    	let td;

    	const block = {
    		c: function create() {
    			td = element("td");
    			td.textContent = "Transferencia";
    			attr_dev(td, "class", "typeBuy text-success");
    			add_location(td, file$d, 260, 54, 10434);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(260:88) ",
    		ctx
    	});

    	return block;
    }

    // (256:88) 
    function create_if_block_1$1(ctx) {
    	let td;

    	const block = {
    		c: function create() {
    			td = element("td");
    			td.textContent = "Tarjeta";
    			attr_dev(td, "class", "typeBuy text-success");
    			add_location(td, file$d, 256, 54, 10126);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(256:88) ",
    		ctx
    	});

    	return block;
    }

    // (252:51) {#if order.payment_type_id == 1}
    function create_if_block$1(ctx) {
    	let td;

    	const block = {
    		c: function create() {
    			td = element("td");
    			td.textContent = "Efectivo";
    			attr_dev(td, "class", "typeBuy text-success");
    			add_location(td, file$d, 252, 54, 9817);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(252:51) {#if order.payment_type_id == 1}",
    		ctx
    	});

    	return block;
    }

    // (241:45) {#each dataOrders as order, i}
    function create_each_block$6(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*order*/ ctx[13].folio + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = (/*arr*/ ctx[14]?.name ?? "No client") + "";
    	let t2;
    	let t3;
    	let t4;
    	let td2;
    	let t5;
    	let t6_value = /*order*/ ctx[13].total + "";
    	let t6;
    	let t7;
    	let td3;
    	let span;
    	let t9;
    	let td4;
    	let div3;
    	let div0;
    	let a0;
    	let t10;
    	let t11;
    	let div1;
    	let a1;
    	let t13;
    	let div2;
    	let button;
    	let t15;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*order*/ ctx[13].payment_type_id == 1) return create_if_block$1;
    		if (/*order*/ ctx[13].payment_type_id == 2) return create_if_block_1$1;
    		if (/*order*/ ctx[13].payment_type_id == 3) return create_if_block_2$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*order*/ ctx[13]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			if_block.c();
    			t4 = space();
    			td2 = element("td");
    			t5 = text("$");
    			t6 = text(t6_value);
    			t7 = space();
    			td3 = element("td");
    			span = element("span");
    			span.textContent = "Efectuado\r\n                                                         Correctamente";
    			t9 = space();
    			td4 = element("td");
    			div3 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			t10 = text("Ver Detalles");
    			t11 = space();
    			div1 = element("div");
    			a1 = element("a");
    			a1.textContent = "Editar";
    			t13 = space();
    			div2 = element("div");
    			button = element("button");
    			button.textContent = "Borrar";
    			t15 = space();
    			attr_dev(td0, "class", "folio_date");
    			add_location(td0, file$d, 245, 51, 9380);
    			add_location(td1, file$d, 247, 51, 9530);
    			attr_dev(td2, "class", "monto");
    			add_location(td2, file$d, 269, 51, 11004);
    			attr_dev(span, "class", "badge badge-soft-success text-uppercase");
    			add_location(span, file$d, 272, 55, 11225);
    			attr_dev(td3, "class", "status");
    			add_location(td3, file$d, 271, 51, 11150);
    			attr_dev(a0, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(a0, "href", "/viewOrder/" + /*order*/ ctx[13].id);
    			add_location(a0, file$d, 280, 60, 11838);
    			attr_dev(div0, "class", "edit");
    			add_location(div0, file$d, 279, 57, 11758);
    			attr_dev(a1, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(a1, "data-bs-toggle", "modal");
    			attr_dev(a1, "data-bs-target", "#showModalEditarO");
    			add_location(a1, file$d, 286, 60, 12328);
    			attr_dev(div1, "class", "edit");
    			add_location(div1, file$d, 285, 57, 12248);
    			attr_dev(button, "class", "btn btn-sm btn-danger remove-item-btn");
    			add_location(button, file$d, 295, 60, 13050);
    			attr_dev(div2, "class", "remove");
    			attr_dev(div2, "id", "removeItemModal");
    			add_location(div2, file$d, 292, 57, 12825);
    			attr_dev(div3, "class", "d-flex gap-2");
    			add_location(div3, file$d, 278, 54, 11673);
    			attr_dev(td4, "class", "action");
    			add_location(td4, file$d, 277, 51, 11598);
    			add_location(tr, file$d, 244, 48, 9323);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			if_block.m(tr, null);
    			append_dev(tr, t4);
    			append_dev(tr, td2);
    			append_dev(td2, t5);
    			append_dev(td2, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td3);
    			append_dev(td3, span);
    			append_dev(tr, t9);
    			append_dev(tr, td4);
    			append_dev(td4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, a0);
    			append_dev(a0, t10);
    			append_dev(div3, t11);
    			append_dev(div3, div1);
    			append_dev(div1, a1);
    			append_dev(div3, t13);
    			append_dev(div3, div2);
    			append_dev(div2, button);
    			append_dev(tr, t15);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(241:45) {#each dataOrders as order, i}",
    		ctx
    	});

    	return block;
    }

    // (217:53)                                    Loading...                                {:then dataOrders}
    function create_pending_block_2$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_2$2.name,
    		type: "pending",
    		source: "(217:53)                                    Loading...                                {:then dataOrders}",
    		ctx
    	});

    	return block;
    }

    // (170:33)               Loading...           {:then client}
    function create_pending_block_1$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$5.name,
    		type: "pending",
    		source: "(170:33)               Loading...           {:then client}",
    		ctx
    	});

    	return block;
    }

    // (151:28)      Loading...  {:then data}
    function create_pending_block$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$5.name,
    		type: "pending",
    		source: "(151:28)      Loading...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let link0;
    	let link1;
    	let script;
    	let script_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$5,
    		then: create_then_block$5,
    		catch: create_catch_block_2$2,
    		value: 10,
    		error: 17,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[0](), info);

    	const block = {
    		c: function create() {
    			link0 = element("link");
    			link1 = element("link");
    			script = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Ordenes";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$d, 118, 3, 3651);
    			attr_dev(link1, "href", "http://localhost:8080/libs/sweetalert2/sweetalert2.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$d, 121, 3, 3762);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$d, 127, 3, 3927);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$d, 129, 3, 4017);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$d, 134, 3, 4158);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$d, 139, 3, 4292);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$d, 144, 3, 4427);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(5, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Ordenes', slots, []);
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = "/";
    	}

    	let myHeaders = new Headers();
    	myHeaders.append("Authorization", `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	let requestOptions = {
    		method: "GET",
    		headers: myHeaders,
    		redirect: "follow"
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	async function getAllOrders() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/orders`, requestOptions);
    		const dataOrders = await response.json();
    		return dataOrders.data;
    	}

    	let dataClientsArray = [];

    	async function getAllClients() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/clients`, requestOptions);
    		const dataClients = await response.json();
    		return dataClients.data;
    	}

    	async function deleteOrder(idOrder) {
    		const swalWithBootstrapButtons = sweetalert2_all.mixin({
    			customClass: {
    				confirmButton: "btn btn-success",
    				cancelButton: "btn btn-danger"
    			},
    			buttonsStyling: false
    		});

    		let requestOptionsDelete = {
    			method: "DELETE",
    			headers: myHeaders,
    			redirect: "follow"
    		};

    		swalWithBootstrapButtons.fire({
    			title: "Seguro que quieres eliminar el usuario?",
    			text: "No podras revertir los cambios",
    			icon: "warning",
    			showCancelButton: true,
    			confirmButtonText: "Si, eliminalo!",
    			cancelButtonText: "No, cancelar!",
    			reverseButtons: true
    		}).then(async result => {
    			if (result.isConfirmed) {
    				const res = await fetch(`https://crud.jonathansoto.mx/api/orders/${idOrder}`, requestOptionsDelete);
    				const data = await res.json();

    				if (data.code > 0) {
    					location.reload();
    					swalWithBootstrapButtons.fire("Eliminado!", "El usuario ha sido eliminado.", "success");
    				}
    			} else if (result.dismiss === sweetalert2_all.DismissReason.cancel) {
    				swalWithBootstrapButtons.fire("Cancelado", "Tu usuario esta a salvo :)", "error");
    			}
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Ordenes> was created with unknown prop '${key}'`);
    	});

    	const click_handler = order => deleteOrder(order.id);

    	$$self.$capture_state = () => ({
    		HeaderApp,
    		Sidebar,
    		Swal: sweetalert2_all,
    		fly,
    		fade,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		getAllOrders,
    		dataClientsArray,
    		getAllClients,
    		deleteOrder,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    		if ('dataClientsArray' in $$props) dataClientsArray = $$props.dataClientsArray;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getDataUserLoggin, getAllOrders, getAllClients, deleteOrder, click_handler];
    }

    class Ordenes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Ordenes",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    /* src\views\ViewCliente.svelte generated by Svelte v3.52.0 */

    const { console: console_1$2 } = globals;
    const file$c = "src\\views\\ViewCliente.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (1050:0) {:catch error}
    function create_catch_block_1$4(ctx) {
    	let t_value = /*error*/ ctx[14] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$4.name,
    		type: "catch",
    		source: "(1050:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (112:0) {:then data}
    function create_then_block$4(ctx) {
    	let main;
    	let div2;
    	let header;
    	let headerapp;
    	let t0;
    	let div0;
    	let sidebar;
    	let t1;
    	let div1;
    	let t2;
    	let t3;
    	let div3;
    	let script0;
    	let script0_src_value;
    	let t4;
    	let script1;
    	let script1_src_value;
    	let t5;
    	let script2;
    	let script2_src_value;
    	let t6;
    	let script3;
    	let script3_src_value;
    	let t7;
    	let script4;
    	let script4_src_value;
    	let t8;
    	let script5;
    	let script5_src_value;
    	let t9;
    	let script6;
    	let script6_src_value;
    	let t10;
    	let script7;
    	let script7_src_value;
    	let t11;
    	let script8;
    	let script8_src_value;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[7] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$4,
    		then: create_then_block_1$4,
    		catch: create_catch_block$4,
    		value: 7,
    		error: 14
    	};

    	handle_promise(/*getDataSingleClient*/ ctx[0](), info);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div2 = element("div");
    			header = element("header");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			info.block.c();
    			t3 = space();
    			div3 = element("div");
    			script0 = element("script");
    			t4 = space();
    			script1 = element("script");
    			t5 = space();
    			script2 = element("script");
    			t6 = space();
    			script3 = element("script");
    			t7 = space();
    			script4 = element("script");
    			t8 = space();
    			script5 = element("script");
    			t9 = space();
    			script6 = element("script");
    			t10 = space();
    			script7 = element("script");
    			t11 = space();
    			script8 = element("script");
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$c, 115, 12, 3408);
    			attr_dev(div0, "class", "app-menu navbar-menu");
    			add_location(div0, file$c, 120, 12, 3563);
    			attr_dev(div1, "class", "vertical-overlay");
    			add_location(div1, file$c, 127, 12, 3812);
    			attr_dev(div2, "id", "layout-wrapper");
    			add_location(div2, file$c, 114, 8, 3369);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$c, 1018, 12, 76546);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$c, 1021, 12, 76678);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$c, 1024, 12, 76800);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$c, 1027, 12, 76919);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$c, 1030, 12, 77043);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$c, 1033, 12, 77169);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/swiper/swiper-bundle.min.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$c, 1036, 12, 77276);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/js/pages/profile.init.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$c, 1041, 12, 77439);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$c, 1046, 12, 77585);
    			add_location(div3, file$c, 1013, 8, 76326);
    			add_location(main, file$c, 112, 4, 3324);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div2);
    			append_dev(div2, header);
    			mount_component(headerapp, header, null);
    			append_dev(div2, t0);
    			append_dev(div2, div0);
    			mount_component(sidebar, div0, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div2, t2);
    			info.block.m(div2, info.anchor = null);
    			info.mount = () => div2;
    			info.anchor = null;
    			append_dev(main, t3);
    			append_dev(main, div3);
    			append_dev(div3, script0);
    			append_dev(div3, t4);
    			append_dev(div3, script1);
    			append_dev(div3, t5);
    			append_dev(div3, script2);
    			append_dev(div3, t6);
    			append_dev(div3, script3);
    			append_dev(div3, t7);
    			append_dev(div3, script4);
    			append_dev(div3, t8);
    			append_dev(div3, script5);
    			append_dev(div3, t9);
    			append_dev(div3, script6);
    			append_dev(div3, t10);
    			append_dev(div3, script7);
    			append_dev(div3, t11);
    			append_dev(div3, script8);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$4.name,
    		type: "then",
    		source: "(112:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (1006:12) {:catch error}
    function create_catch_block$4(ctx) {
    	const block = { c: noop$1, m: noop$1, p: noop$1, d: noop$1 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$4.name,
    		type: "catch",
    		source: "(1006:12) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (135:12) {:then data}
    function create_then_block_1$4(ctx) {
    	let div63;
    	let div62;
    	let div61;
    	let div3;
    	let div2;
    	let div1;
    	let h40;
    	let t1;
    	let div0;
    	let ol;
    	let li0;
    	let a0;
    	let t3;
    	let li1;
    	let t5;
    	let div60;
    	let div5;
    	let div4;
    	let img;
    	let img_src_value;
    	let t6;
    	let div10;
    	let div9;
    	let div8;
    	let div7;
    	let h3;
    	let t7_value = /*data*/ ctx[7].name + "";
    	let t7;
    	let t8;
    	let p0;
    	let t9;
    	let t10_value = /*data*/ ctx[7].level_id + "";
    	let t10;
    	let t11;
    	let t12_value = /*data*/ ctx[7].level.name + "";
    	let t12;
    	let t13;
    	let t14;
    	let div6;
    	let t15;
    	let div11;
    	let ul;
    	let li2;
    	let a1;
    	let i0;
    	let t16;
    	let span;
    	let t18;
    	let div59;
    	let div58;
    	let div57;
    	let div56;
    	let div19;
    	let div18;
    	let h50;
    	let t20;
    	let div17;
    	let table2;
    	let tbody2;
    	let tr0;
    	let th0;
    	let t22;
    	let td0;
    	let t23_value = /*data*/ ctx[7].name + "";
    	let t23;
    	let t24;
    	let tr1;
    	let th1;
    	let t26;
    	let td1;
    	let t27_value = /*data*/ ctx[7].email + "";
    	let t27;
    	let t28;
    	let tr2;
    	let th2;
    	let t30;
    	let td2;
    	let t31_value = /*data*/ ctx[7].phone_number + "";
    	let t31;
    	let t32;
    	let tr4;
    	let th3;
    	let t34;
    	let div12;
    	let t35;
    	let div13;
    	let table0;
    	let thead0;
    	let tr3;
    	let th4;
    	let t37;
    	let th5;
    	let t39;
    	let th6;
    	let t41;
    	let th7;
    	let t43;
    	let tbody0;
    	let t44;
    	let tr6;
    	let th8;
    	let t46;
    	let div15;
    	let div14;
    	let button0;
    	let i1;
    	let t47;
    	let t48;
    	let div16;
    	let table1;
    	let thead1;
    	let tr5;
    	let th9;
    	let t50;
    	let th10;
    	let t52;
    	let th11;
    	let t54;
    	let th12;
    	let t56;
    	let th13;
    	let t58;
    	let tbody1;
    	let t59;
    	let div33;
    	let div32;
    	let div31;
    	let div20;
    	let h51;
    	let t61;
    	let button1;
    	let t62;
    	let form0;
    	let div28;
    	let div21;
    	let label0;
    	let t64;
    	let input0;
    	let t65;
    	let div22;
    	let label1;
    	let t67;
    	let input1;
    	let t68;
    	let div23;
    	let label2;
    	let t70;
    	let input2;
    	let t71;
    	let div24;
    	let label3;
    	let t73;
    	let input3;
    	let t74;
    	let div25;
    	let label4;
    	let t76;
    	let input4;
    	let t77;
    	let div26;
    	let label5;
    	let t79;
    	let input5;
    	let t80;
    	let div27;
    	let label6;
    	let t82;
    	let input6;
    	let t83;
    	let div30;
    	let div29;
    	let button2;
    	let t85;
    	let button3;
    	let t87;
    	let input7;
    	let t88;
    	let input8;
    	let t89;
    	let div47;
    	let div46;
    	let div45;
    	let div34;
    	let h52;
    	let t91;
    	let button4;
    	let t92;
    	let form1;
    	let div42;
    	let div35;
    	let label7;
    	let t94;
    	let input9;
    	let t95;
    	let div36;
    	let label8;
    	let t97;
    	let input10;
    	let t98;
    	let div37;
    	let label9;
    	let t100;
    	let input11;
    	let t101;
    	let div38;
    	let label10;
    	let t103;
    	let input12;
    	let t104;
    	let div39;
    	let label11;
    	let t106;
    	let input13;
    	let t107;
    	let div40;
    	let label12;
    	let t109;
    	let input14;
    	let t110;
    	let div41;
    	let label13;
    	let t112;
    	let input15;
    	let t113;
    	let div44;
    	let div43;
    	let button5;
    	let t115;
    	let button6;
    	let t117;
    	let input16;
    	let t118;
    	let input17;
    	let t119;
    	let div55;
    	let div54;
    	let div53;
    	let div48;
    	let button7;
    	let t120;
    	let div52;
    	let div50;
    	let lord_icon;
    	let lord_icon_src_value;
    	let t121;
    	let div49;
    	let h41;
    	let t123;
    	let p1;
    	let t125;
    	let div51;
    	let button8;
    	let t127;
    	let button9;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*data*/ ctx[7].orders;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	let each_value = /*data*/ ctx[7].addresses;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div63 = element("div");
    			div62 = element("div");
    			div61 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			h40 = element("h4");
    			h40.textContent = "Vista de Detalle Cliente";
    			t1 = space();
    			div0 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "Cliente";
    			t3 = space();
    			li1 = element("li");
    			li1.textContent = "Vista de Detalle Cliente";
    			t5 = space();
    			div60 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			img = element("img");
    			t6 = space();
    			div10 = element("div");
    			div9 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			h3 = element("h3");
    			t7 = text(t7_value);
    			t8 = space();
    			p0 = element("p");
    			t9 = text("Cliente Nivel: ");
    			t10 = text(t10_value);
    			t11 = text("\r\n                                                    (");
    			t12 = text(t12_value);
    			t13 = text(")");
    			t14 = space();
    			div6 = element("div");
    			t15 = space();
    			div11 = element("div");
    			ul = element("ul");
    			li2 = element("li");
    			a1 = element("a");
    			i0 = element("i");
    			t16 = space();
    			span = element("span");
    			span.textContent = "Vista de Detalle";
    			t18 = space();
    			div59 = element("div");
    			div58 = element("div");
    			div57 = element("div");
    			div56 = element("div");
    			div19 = element("div");
    			div18 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Info";
    			t20 = space();
    			div17 = element("div");
    			table2 = element("table");
    			tbody2 = element("tbody");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Nombre\r\n                                                                            :";
    			t22 = space();
    			td0 = element("td");
    			t23 = text(t23_value);
    			t24 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Correo:";
    			t26 = space();
    			td1 = element("td");
    			t27 = text(t27_value);
    			t28 = space();
    			tr2 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Teléfono\r\n                                                                            :";
    			t30 = space();
    			td2 = element("td");
    			t31 = text(t31_value);
    			t32 = space();
    			tr4 = element("tr");
    			th3 = element("th");
    			th3.textContent = "Ordenes:";
    			t34 = space();
    			div12 = element("div");
    			t35 = space();
    			div13 = element("div");
    			table0 = element("table");
    			thead0 = element("thead");
    			tr3 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Folio";
    			t37 = space();
    			th5 = element("th");
    			th5.textContent = "Total";
    			t39 = space();
    			th6 = element("th");
    			th6.textContent = "Estado\r\n                                                                                            de\r\n                                                                                            Pago";
    			t41 = space();
    			th7 = element("th");
    			th7.textContent = "Acción";
    			t43 = space();
    			tbody0 = element("tbody");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t44 = space();
    			tr6 = element("tr");
    			th8 = element("th");
    			th8.textContent = "Direcciones:";
    			t46 = space();
    			div15 = element("div");
    			div14 = element("div");
    			button0 = element("button");
    			i1 = element("i");
    			t47 = text("\r\n                                                                                    Añadir\r\n                                                                                    Dirección");
    			t48 = space();
    			div16 = element("div");
    			table1 = element("table");
    			thead1 = element("thead");
    			tr5 = element("tr");
    			th9 = element("th");
    			th9.textContent = "Calle\r\n                                                                                            y\r\n                                                                                            número";
    			t50 = space();
    			th10 = element("th");
    			th10.textContent = "Código\r\n                                                                                            postal";
    			t52 = space();
    			th11 = element("th");
    			th11.textContent = "Ciudad";
    			t54 = space();
    			th12 = element("th");
    			th12.textContent = "Providencia";
    			t56 = space();
    			th13 = element("th");
    			th13.textContent = "Acción";
    			t58 = space();
    			tbody1 = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t59 = space();
    			div33 = element("div");
    			div32 = element("div");
    			div31 = element("div");
    			div20 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Editar\r\n                                                                    Dirección";
    			t61 = space();
    			button1 = element("button");
    			t62 = space();
    			form0 = element("form");
    			div28 = element("div");
    			div21 = element("div");
    			label0 = element("label");
    			label0.textContent = "Nombre";
    			t64 = space();
    			input0 = element("input");
    			t65 = space();
    			div22 = element("div");
    			label1 = element("label");
    			label1.textContent = "Apellido";
    			t67 = space();
    			input1 = element("input");
    			t68 = space();
    			div23 = element("div");
    			label2 = element("label");
    			label2.textContent = "Telefono";
    			t70 = space();
    			input2 = element("input");
    			t71 = space();
    			div24 = element("div");
    			label3 = element("label");
    			label3.textContent = "Calle\r\n                                                                            y\r\n                                                                            número";
    			t73 = space();
    			input3 = element("input");
    			t74 = space();
    			div25 = element("div");
    			label4 = element("label");
    			label4.textContent = "Código\r\n                                                                            postal";
    			t76 = space();
    			input4 = element("input");
    			t77 = space();
    			div26 = element("div");
    			label5 = element("label");
    			label5.textContent = "Ciudad";
    			t79 = space();
    			input5 = element("input");
    			t80 = space();
    			div27 = element("div");
    			label6 = element("label");
    			label6.textContent = "Providencia";
    			t82 = space();
    			input6 = element("input");
    			t83 = space();
    			div30 = element("div");
    			div29 = element("div");
    			button2 = element("button");
    			button2.textContent = "Cerrar";
    			t85 = space();
    			button3 = element("button");
    			button3.textContent = "Guardar\r\n                                                                            cambios";
    			t87 = space();
    			input7 = element("input");
    			t88 = space();
    			input8 = element("input");
    			t89 = space();
    			div47 = element("div");
    			div46 = element("div");
    			div45 = element("div");
    			div34 = element("div");
    			h52 = element("h5");
    			h52.textContent = "Añadir\r\n                                                                    Dirección";
    			t91 = space();
    			button4 = element("button");
    			t92 = space();
    			form1 = element("form");
    			div42 = element("div");
    			div35 = element("div");
    			label7 = element("label");
    			label7.textContent = "Nombre";
    			t94 = space();
    			input9 = element("input");
    			t95 = space();
    			div36 = element("div");
    			label8 = element("label");
    			label8.textContent = "Apellido";
    			t97 = space();
    			input10 = element("input");
    			t98 = space();
    			div37 = element("div");
    			label9 = element("label");
    			label9.textContent = "Telefono";
    			t100 = space();
    			input11 = element("input");
    			t101 = space();
    			div38 = element("div");
    			label10 = element("label");
    			label10.textContent = "Calle\r\n                                                                            y\r\n                                                                            número";
    			t103 = space();
    			input12 = element("input");
    			t104 = space();
    			div39 = element("div");
    			label11 = element("label");
    			label11.textContent = "Código\r\n                                                                            postal";
    			t106 = space();
    			input13 = element("input");
    			t107 = space();
    			div40 = element("div");
    			label12 = element("label");
    			label12.textContent = "Ciudad";
    			t109 = space();
    			input14 = element("input");
    			t110 = space();
    			div41 = element("div");
    			label13 = element("label");
    			label13.textContent = "Providencia";
    			t112 = space();
    			input15 = element("input");
    			t113 = space();
    			div44 = element("div");
    			div43 = element("div");
    			button5 = element("button");
    			button5.textContent = "Cerrar";
    			t115 = space();
    			button6 = element("button");
    			button6.textContent = "Guardar\r\n                                                                            cambios";
    			t117 = space();
    			input16 = element("input");
    			t118 = space();
    			input17 = element("input");
    			t119 = space();
    			div55 = element("div");
    			div54 = element("div");
    			div53 = element("div");
    			div48 = element("div");
    			button7 = element("button");
    			t120 = space();
    			div52 = element("div");
    			div50 = element("div");
    			lord_icon = element("lord-icon");
    			t121 = space();
    			div49 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Estás\r\n                                                                            seguro\r\n                                                                            ?";
    			t123 = space();
    			p1 = element("p");
    			p1.textContent = "Estás\r\n                                                                            seguro\r\n                                                                            de\r\n                                                                            eliminar\r\n                                                                            la\r\n                                                                            Dirección?";
    			t125 = space();
    			div51 = element("div");
    			button8 = element("button");
    			button8.textContent = "Cerrar";
    			t127 = space();
    			button9 = element("button");
    			button9.textContent = "Sí,\r\n                                                                        borrar\r\n                                                                        Dirección!";
    			attr_dev(h40, "class", "mb-sm-0");
    			add_location(h40, file$c, 144, 40, 4721);
    			attr_dev(a0, "href", "#!");
    			add_location(a0, file$c, 151, 52, 5137);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$c, 150, 48, 5055);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$c, 153, 48, 5266);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$c, 149, 44, 4978);
    			attr_dev(div0, "class", "page-title-right");
    			add_location(div0, file$c, 148, 40, 4902);
    			attr_dev(div1, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div1, file$c, 141, 36, 4519);
    			attr_dev(div2, "class", "col-12");
    			add_location(div2, file$c, 140, 32, 4461);
    			attr_dev(div3, "class", "row");
    			add_location(div3, file$c, 139, 28, 4410);
    			if (!src_url_equal(img.src, img_src_value = "http://localhost:8080/images/profile-bg.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "profile-wid-img");
    			add_location(img, file$c, 170, 40, 6145);
    			attr_dev(div4, "class", "profile-wid-bg");
    			add_location(div4, file$c, 169, 36, 6075);
    			attr_dev(div5, "class", "profile-foreground position-relative mx-n4 mt-n4");
    			add_location(div5, file$c, 166, 32, 5904);
    			attr_dev(h3, "class", "text-white mb-1");
    			add_location(h3, file$c, 182, 48, 6853);
    			attr_dev(p0, "class", "text-white-75");
    			add_location(p0, file$c, 185, 48, 7051);
    			attr_dev(div6, "class", "hstack text-white-50 gap-1");
    			add_location(div6, file$c, 189, 48, 7337);
    			attr_dev(div7, "class", "p-2");
    			add_location(div7, file$c, 181, 44, 6786);
    			attr_dev(div8, "class", "col");
    			add_location(div8, file$c, 180, 40, 6723);
    			attr_dev(div9, "class", "row g-4");
    			add_location(div9, file$c, 178, 36, 6604);
    			attr_dev(div10, "class", "pt-4 mb-4 mb-lg-3 pb-lg-4");
    			add_location(div10, file$c, 177, 32, 6527);
    			attr_dev(i0, "class", "ri-airplay-fill d-inline-block d-md-none");
    			add_location(i0, file$c, 214, 48, 8681);
    			attr_dev(span, "class", "d-none d-md-inline-block");
    			add_location(span, file$c, 217, 48, 8887);
    			attr_dev(a1, "class", "nav-link fs-14 active");
    			attr_dev(a1, "data-bs-toggle", "tab");
    			attr_dev(a1, "href", "#overview-tab");
    			attr_dev(a1, "role", "tab");
    			add_location(a1, file$c, 208, 44, 8303);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$c, 207, 40, 8236);
    			attr_dev(ul, "class", "nav nav-pills animation-nav profile-nav gap-2 gap-lg-3 flex-grow-1");
    			attr_dev(ul, "role", "tablist");
    			add_location(ul, file$c, 203, 36, 7980);
    			attr_dev(div11, "class", "d-flex");
    			add_location(div11, file$c, 201, 32, 7867);
    			attr_dev(h50, "class", "card-title mb-3");
    			add_location(h50, file$c, 236, 56, 10007);
    			attr_dev(th0, "class", "ps-0");
    			attr_dev(th0, "scope", "row");
    			add_location(th0, file$c, 249, 72, 10943);
    			attr_dev(td0, "class", "text-muted");
    			add_location(td0, file$c, 255, 72, 11442);
    			add_location(tr0, file$c, 248, 68, 10865);
    			attr_dev(th1, "class", "ps-0");
    			attr_dev(th1, "scope", "row");
    			add_location(th1, file$c, 262, 72, 11935);
    			attr_dev(td1, "class", "text-muted");
    			add_location(td1, file$c, 267, 72, 12356);
    			add_location(tr1, file$c, 261, 68, 11857);
    			attr_dev(th2, "class", "ps-0");
    			attr_dev(th2, "scope", "row");
    			add_location(th2, file$c, 273, 72, 12848);
    			attr_dev(td2, "class", "text-muted");
    			add_location(td2, file$c, 279, 72, 13349);
    			add_location(tr2, file$c, 272, 68, 12770);
    			attr_dev(th3, "class", "ps-0");
    			attr_dev(th3, "scope", "row");
    			add_location(th3, file$c, 285, 72, 13848);
    			attr_dev(div12, "class", "col-sm-auto");
    			add_location(div12, file$c, 290, 72, 14270);
    			attr_dev(th4, "data-sort", "folio");
    			add_location(th4, file$c, 306, 88, 15651);
    			attr_dev(th5, "data-sort", "total");
    			add_location(th5, file$c, 310, 88, 16050);
    			attr_dev(th6, "data-sort", "estado de pago");
    			add_location(th6, file$c, 314, 88, 16449);
    			attr_dev(th7, "data-sort", "action");
    			add_location(th7, file$c, 321, 88, 17054);
    			add_location(tr3, file$c, 304, 84, 15471);
    			attr_dev(thead0, "class", "table-light");
    			add_location(thead0, file$c, 301, 80, 15191);
    			attr_dev(tbody0, "class", "list form-check-all");
    			add_location(tbody0, file$c, 327, 80, 17628);
    			attr_dev(table0, "class", "table align-middle table-nowrap");
    			attr_dev(table0, "id", "customerTable");
    			add_location(table0, file$c, 297, 76, 14803);
    			attr_dev(div13, "class", "table-responsive table-card mt-3 mb-1");
    			add_location(div13, file$c, 294, 72, 14523);
    			add_location(tr4, file$c, 284, 68, 13770);
    			attr_dev(th8, "class", "ps-0");
    			attr_dev(th8, "scope", "row");
    			add_location(th8, file$c, 373, 72, 22392);
    			attr_dev(i1, "class", "ri-add-line align-bottom me-1");
    			add_location(i1, file$c, 389, 85, 23882);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-success add-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "id", "create-btn");
    			attr_dev(button0, "data-bs-target", "#showModalAñadirCliente");
    			add_location(button0, file$c, 383, 80, 23237);
    			add_location(div14, file$c, 381, 76, 23072);
    			attr_dev(div15, "class", "col-sm-auto");
    			add_location(div15, file$c, 378, 72, 22818);
    			attr_dev(th9, "data-sort", "street");
    			add_location(th9, file$c, 410, 88, 25745);
    			attr_dev(th10, "data-sort", "code");
    			add_location(th10, file$c, 416, 88, 26340);
    			attr_dev(th11, "data-sort", "city");
    			add_location(th11, file$c, 421, 88, 26839);
    			attr_dev(th12, "data-sort", "province");
    			add_location(th12, file$c, 425, 88, 27238);
    			attr_dev(th13, "data-sort", "action");
    			add_location(th13, file$c, 430, 88, 27648);
    			add_location(tr5, file$c, 408, 84, 25565);
    			attr_dev(thead1, "class", "table-light");
    			add_location(thead1, file$c, 405, 80, 25285);
    			attr_dev(tbody1, "class", "list form-check-all");
    			add_location(tbody1, file$c, 436, 80, 28222);
    			attr_dev(table1, "class", "table align-middle table-nowrap");
    			attr_dev(table1, "id", "customerTable");
    			add_location(table1, file$c, 401, 76, 24897);
    			attr_dev(div16, "class", "table-responsive table-card mt-3 mb-1");
    			add_location(div16, file$c, 398, 72, 24617);
    			add_location(tr6, file$c, 372, 68, 22314);
    			add_location(tbody2, file$c, 247, 64, 10788);
    			attr_dev(table2, "class", "table table-borderless mb-0");
    			add_location(table2, file$c, 244, 60, 10552);
    			attr_dev(div17, "class", "table-responsive");
    			add_location(div17, file$c, 241, 56, 10341);
    			attr_dev(div18, "class", "card-body");
    			add_location(div18, file$c, 235, 52, 9926);
    			attr_dev(div19, "class", "card");
    			add_location(div19, file$c, 234, 48, 9854);
    			attr_dev(h51, "class", "modal-title");
    			attr_dev(h51, "id", "exampleModalLabel");
    			add_location(h51, file$c, 532, 64, 37398);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn-close");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			attr_dev(button1, "aria-label", "Close");
    			attr_dev(button1, "id", "close-modal");
    			add_location(button1, file$c, 539, 64, 37941);
    			attr_dev(div20, "class", "modal-header bg-light p-3");
    			add_location(div20, file$c, 529, 60, 37166);
    			attr_dev(label0, "for", "name-field");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$c, 557, 72, 39401);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "name-field");
    			attr_dev(input0, "name", "first_name");
    			attr_dev(input0, "class", "form-control");
    			attr_dev(input0, "placeholder", "Ingresar Nombre");
    			input0.required = true;
    			add_location(input0, file$c, 562, 72, 39838);
    			attr_dev(div21, "class", "mb-3");
    			add_location(div21, file$c, 554, 68, 39166);
    			attr_dev(label1, "for", "lastname-field");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$c, 574, 72, 40869);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "name", "last_name");
    			attr_dev(input1, "id", "lastname-field");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "placeholder", "Ingresar Apellido");
    			input1.required = true;
    			add_location(input1, file$c, 579, 72, 41312);
    			attr_dev(div22, "class", "mb-3");
    			add_location(div22, file$c, 571, 68, 40634);
    			attr_dev(label2, "for", "province-field");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$c, 591, 72, 42348);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "id", "province-field");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "name", "phone_number");
    			attr_dev(input2, "placeholder", "Ingresar tu numero celular");
    			input2.required = true;
    			add_location(input2, file$c, 596, 72, 42791);
    			attr_dev(div23, "class", "mb-3");
    			add_location(div23, file$c, 588, 68, 42113);
    			attr_dev(label3, "for", "street-field");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$c, 608, 72, 43839);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "id", "street-field");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "name", "street_and_use_number");
    			attr_dev(input3, "placeholder", "Ingresar Calle y número");
    			input3.required = true;
    			add_location(input3, file$c, 615, 72, 44440);
    			attr_dev(div24, "class", "mb-3");
    			add_location(div24, file$c, 605, 68, 43604);
    			attr_dev(label4, "for", "code-field");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$c, 627, 72, 45492);
    			attr_dev(input4, "type", "text");
    			attr_dev(input4, "id", "code-field");
    			attr_dev(input4, "name", "postal_code");
    			attr_dev(input4, "class", "form-control");
    			attr_dev(input4, "placeholder", "Ingresar Código Postal");
    			input4.required = true;
    			add_location(input4, file$c, 633, 72, 46013);
    			attr_dev(div25, "class", "mb-3");
    			add_location(div25, file$c, 624, 68, 45257);
    			attr_dev(label5, "for", "city-field");
    			attr_dev(label5, "class", "form-label");
    			add_location(label5, file$c, 645, 72, 47052);
    			attr_dev(input5, "type", "text");
    			attr_dev(input5, "id", "city-field");
    			attr_dev(input5, "class", "form-control");
    			attr_dev(input5, "name", "city");
    			attr_dev(input5, "placeholder", "Ingresar Ciudad");
    			input5.required = true;
    			add_location(input5, file$c, 650, 72, 47489);
    			attr_dev(div26, "class", "mb-3");
    			add_location(div26, file$c, 642, 68, 46817);
    			attr_dev(label6, "for", "province-field");
    			attr_dev(label6, "class", "form-label");
    			add_location(label6, file$c, 662, 72, 48514);
    			attr_dev(input6, "type", "text");
    			attr_dev(input6, "id", "province-field");
    			attr_dev(input6, "class", "form-control");
    			attr_dev(input6, "name", "province");
    			attr_dev(input6, "placeholder", "Ingresar Providencia");
    			input6.required = true;
    			add_location(input6, file$c, 667, 72, 48960);
    			attr_dev(div27, "class", "mb-3");
    			add_location(div27, file$c, 659, 68, 48279);
    			attr_dev(div28, "class", "modal-body");
    			add_location(div28, file$c, 551, 64, 38937);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn btn-light");
    			attr_dev(button2, "data-bs-dismiss", "modal");
    			add_location(button2, file$c, 683, 72, 50325);
    			attr_dev(button3, "type", "submit");
    			attr_dev(button3, "class", "btn btn-success");
    			attr_dev(button3, "id", "add-btn");
    			add_location(button3, file$c, 689, 72, 50865);
    			attr_dev(div29, "class", "hstack gap-2 justify-content-end");
    			add_location(div29, file$c, 680, 68, 50062);
    			attr_dev(div30, "class", "modal-footer");
    			add_location(div30, file$c, 677, 64, 49831);
    			attr_dev(input7, "type", "text");
    			attr_dev(input7, "name", "action");
    			input7.value = "create";
    			input7.hidden = true;
    			add_location(input7, file$c, 699, 64, 51726);
    			attr_dev(input8, "type", "text");
    			attr_dev(input8, "name", "id");
    			input8.value = /*data*/ ctx[7].id;
    			input8.hidden = true;
    			add_location(input8, file$c, 705, 64, 52190);
    			attr_dev(form0, "method", "POST");
    			attr_dev(form0, "action", "https://newphpecommercejona.herokuapp.com/app/AdressController.php");
    			add_location(form0, file$c, 547, 60, 38583);
    			attr_dev(div31, "class", "modal-content");
    			add_location(div31, file$c, 526, 56, 36958);
    			attr_dev(div32, "class", "modal-dialog modal-dialog-centered");
    			add_location(div32, file$c, 523, 52, 36741);
    			attr_dev(div33, "class", "modal fade");
    			attr_dev(div33, "id", "showModalEditar");
    			attr_dev(div33, "tabindex", "-1");
    			attr_dev(div33, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div33, "aria-hidden", "true");
    			add_location(div33, file$c, 516, 48, 36258);
    			attr_dev(h52, "class", "modal-title");
    			attr_dev(h52, "id", "exampleModalLabel");
    			add_location(h52, file$c, 732, 64, 54033);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "btn-close");
    			attr_dev(button4, "data-bs-dismiss", "modal");
    			attr_dev(button4, "aria-label", "Close");
    			attr_dev(button4, "id", "close-modal");
    			add_location(button4, file$c, 739, 64, 54576);
    			attr_dev(div34, "class", "modal-header bg-light p-3");
    			add_location(div34, file$c, 729, 60, 53801);
    			attr_dev(label7, "for", "name-field");
    			attr_dev(label7, "class", "form-label");
    			add_location(label7, file$c, 757, 72, 56036);
    			attr_dev(input9, "type", "text");
    			attr_dev(input9, "id", "name-field");
    			attr_dev(input9, "name", "first_name");
    			attr_dev(input9, "class", "form-control");
    			attr_dev(input9, "placeholder", "Ingresar Nombre");
    			input9.required = true;
    			add_location(input9, file$c, 762, 72, 56473);
    			attr_dev(div35, "class", "mb-3");
    			add_location(div35, file$c, 754, 68, 55801);
    			attr_dev(label8, "for", "lastname-field");
    			attr_dev(label8, "class", "form-label");
    			add_location(label8, file$c, 774, 72, 57504);
    			attr_dev(input10, "type", "text");
    			attr_dev(input10, "name", "last_name");
    			attr_dev(input10, "id", "lastname-field");
    			attr_dev(input10, "class", "form-control");
    			attr_dev(input10, "placeholder", "Ingresar Apellido");
    			input10.required = true;
    			add_location(input10, file$c, 779, 72, 57947);
    			attr_dev(div36, "class", "mb-3");
    			add_location(div36, file$c, 771, 68, 57269);
    			attr_dev(label9, "for", "province-field");
    			attr_dev(label9, "class", "form-label");
    			add_location(label9, file$c, 791, 72, 58983);
    			attr_dev(input11, "type", "text");
    			attr_dev(input11, "id", "province-field");
    			attr_dev(input11, "class", "form-control");
    			attr_dev(input11, "name", "phone_number");
    			attr_dev(input11, "placeholder", "Ingresar tu numero celular");
    			input11.required = true;
    			add_location(input11, file$c, 796, 72, 59426);
    			attr_dev(div37, "class", "mb-3");
    			add_location(div37, file$c, 788, 68, 58748);
    			attr_dev(label10, "for", "street-field");
    			attr_dev(label10, "class", "form-label");
    			add_location(label10, file$c, 808, 72, 60474);
    			attr_dev(input12, "type", "text");
    			attr_dev(input12, "id", "street-field");
    			attr_dev(input12, "class", "form-control");
    			attr_dev(input12, "name", "street_and_use_number");
    			attr_dev(input12, "placeholder", "Ingresar Calle y número");
    			input12.required = true;
    			add_location(input12, file$c, 815, 72, 61075);
    			attr_dev(div38, "class", "mb-3");
    			add_location(div38, file$c, 805, 68, 60239);
    			attr_dev(label11, "for", "code-field");
    			attr_dev(label11, "class", "form-label");
    			add_location(label11, file$c, 827, 72, 62127);
    			attr_dev(input13, "type", "text");
    			attr_dev(input13, "id", "code-field");
    			attr_dev(input13, "name", "postal_code");
    			attr_dev(input13, "class", "form-control");
    			attr_dev(input13, "placeholder", "Ingresar Código Postal");
    			input13.required = true;
    			add_location(input13, file$c, 833, 72, 62648);
    			attr_dev(div39, "class", "mb-3");
    			add_location(div39, file$c, 824, 68, 61892);
    			attr_dev(label12, "for", "city-field");
    			attr_dev(label12, "class", "form-label");
    			add_location(label12, file$c, 845, 72, 63687);
    			attr_dev(input14, "type", "text");
    			attr_dev(input14, "id", "city-field");
    			attr_dev(input14, "class", "form-control");
    			attr_dev(input14, "name", "city");
    			attr_dev(input14, "placeholder", "Ingresar Ciudad");
    			input14.required = true;
    			add_location(input14, file$c, 850, 72, 64124);
    			attr_dev(div40, "class", "mb-3");
    			add_location(div40, file$c, 842, 68, 63452);
    			attr_dev(label13, "for", "province-field");
    			attr_dev(label13, "class", "form-label");
    			add_location(label13, file$c, 862, 72, 65149);
    			attr_dev(input15, "type", "text");
    			attr_dev(input15, "id", "province-field");
    			attr_dev(input15, "class", "form-control");
    			attr_dev(input15, "name", "province");
    			attr_dev(input15, "placeholder", "Ingresar Providencia");
    			input15.required = true;
    			add_location(input15, file$c, 867, 72, 65595);
    			attr_dev(div41, "class", "mb-3");
    			add_location(div41, file$c, 859, 68, 64914);
    			attr_dev(div42, "class", "modal-body");
    			add_location(div42, file$c, 751, 64, 55572);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "class", "btn btn-light");
    			attr_dev(button5, "data-bs-dismiss", "modal");
    			add_location(button5, file$c, 883, 72, 66960);
    			attr_dev(button6, "type", "submit");
    			attr_dev(button6, "class", "btn btn-success");
    			attr_dev(button6, "id", "add-btn");
    			add_location(button6, file$c, 889, 72, 67500);
    			attr_dev(div43, "class", "hstack gap-2 justify-content-end");
    			add_location(div43, file$c, 880, 68, 66697);
    			attr_dev(div44, "class", "modal-footer");
    			add_location(div44, file$c, 877, 64, 66466);
    			attr_dev(input16, "type", "text");
    			attr_dev(input16, "name", "action");
    			input16.value = "create";
    			input16.hidden = true;
    			add_location(input16, file$c, 899, 64, 68361);
    			attr_dev(input17, "type", "text");
    			attr_dev(input17, "name", "client_id");
    			input17.value = /*data*/ ctx[7].id;
    			input17.hidden = true;
    			add_location(input17, file$c, 905, 64, 68825);
    			attr_dev(form1, "method", "POST");
    			attr_dev(form1, "action", "https://newphpecommercejona.herokuapp.com/app/AdressController.php");
    			add_location(form1, file$c, 747, 60, 55218);
    			attr_dev(div45, "class", "modal-content");
    			add_location(div45, file$c, 726, 56, 53593);
    			attr_dev(div46, "class", "modal-dialog modal-dialog-centered");
    			add_location(div46, file$c, 723, 52, 53376);
    			attr_dev(div47, "class", "modal fade");
    			attr_dev(div47, "id", "showModalAñadirCliente");
    			attr_dev(div47, "tabindex", "-1");
    			attr_dev(div47, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div47, "aria-hidden", "true");
    			add_location(div47, file$c, 716, 48, 52886);
    			attr_dev(button7, "type", "button");
    			attr_dev(button7, "class", "btn-close");
    			attr_dev(button7, "data-bs-dismiss", "modal");
    			attr_dev(button7, "aria-label", "Close");
    			attr_dev(button7, "id", "btn-close");
    			add_location(button7, file$c, 932, 64, 70639);
    			attr_dev(div48, "class", "modal-header");
    			add_location(div48, file$c, 929, 60, 70420);
    			if (!src_url_equal(lord_icon.src, lord_icon_src_value = "https://cdn.lordicon.com/gsqxdxog.json")) set_custom_element_data(lord_icon, "src", lord_icon_src_value);
    			set_custom_element_data(lord_icon, "trigger", "loop");
    			set_custom_element_data(lord_icon, "colors", "primary:#f7b84b,secondary:#f06548");
    			set_style(lord_icon, "width", "100px");
    			set_style(lord_icon, "height", "100px");
    			add_location(lord_icon, file$c, 946, 68, 71731);
    			add_location(h41, file$c, 955, 72, 72570);
    			attr_dev(p1, "class", "text-muted mx-4 mb-0");
    			add_location(p1, file$c, 960, 72, 72973);
    			attr_dev(div49, "class", "mt-4 pt-2 fs-15 mx-4 mx-sm-5");
    			add_location(div49, file$c, 952, 68, 72311);
    			attr_dev(div50, "class", "mt-2 text-center");
    			add_location(div50, file$c, 943, 64, 71496);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "class", "btn w-sm btn-light");
    			attr_dev(button8, "data-bs-dismiss", "modal");
    			add_location(button8, file$c, 975, 68, 74213);
    			attr_dev(button9, "type", "button");
    			attr_dev(button9, "class", "btn w-sm btn-danger ");
    			attr_dev(button9, "id", "delete-record");
    			add_location(button9, file$c, 981, 68, 74734);
    			attr_dev(div51, "class", "d-flex gap-2 justify-content-center mt-4 mb-2");
    			add_location(div51, file$c, 972, 64, 73949);
    			attr_dev(div52, "class", "modal-body");
    			add_location(div52, file$c, 940, 60, 71279);
    			attr_dev(div53, "class", "modal-content");
    			add_location(div53, file$c, 926, 56, 70212);
    			attr_dev(div54, "class", "modal-dialog modal-dialog-centered");
    			add_location(div54, file$c, 923, 52, 69995);
    			attr_dev(div55, "class", "modal fade zoomIn");
    			attr_dev(div55, "id", "deleteRecordModal");
    			attr_dev(div55, "tabindex", "-1");
    			attr_dev(div55, "aria-hidden", "true");
    			add_location(div55, file$c, 917, 48, 69592);
    			attr_dev(div56, "class", "col-xxl-12");
    			add_location(div56, file$c, 233, 44, 9780);
    			attr_dev(div57, "class", "row");
    			add_location(div57, file$c, 232, 40, 9717);
    			attr_dev(div58, "class", "tab-pane active");
    			attr_dev(div58, "id", "overview-tab");
    			attr_dev(div58, "role", "tabpanel");
    			add_location(div58, file$c, 227, 36, 9451);
    			attr_dev(div59, "class", "tab-content pt-4 text-muted");
    			add_location(div59, file$c, 226, 32, 9372);
    			attr_dev(div60, "class", "container-fluid");
    			add_location(div60, file$c, 165, 28, 5841);
    			attr_dev(div61, "class", "container-fluid");
    			add_location(div61, file$c, 137, 24, 4296);
    			attr_dev(div62, "class", "page-content");
    			add_location(div62, file$c, 136, 20, 4244);
    			attr_dev(div63, "class", "main-content");
    			add_location(div63, file$c, 135, 16, 4196);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div63, anchor);
    			append_dev(div63, div62);
    			append_dev(div62, div61);
    			append_dev(div61, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h40);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a0);
    			append_dev(ol, t3);
    			append_dev(ol, li1);
    			append_dev(div61, t5);
    			append_dev(div61, div60);
    			append_dev(div60, div5);
    			append_dev(div5, div4);
    			append_dev(div4, img);
    			append_dev(div60, t6);
    			append_dev(div60, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, h3);
    			append_dev(h3, t7);
    			append_dev(div7, t8);
    			append_dev(div7, p0);
    			append_dev(p0, t9);
    			append_dev(p0, t10);
    			append_dev(p0, t11);
    			append_dev(p0, t12);
    			append_dev(p0, t13);
    			append_dev(div7, t14);
    			append_dev(div7, div6);
    			append_dev(div60, t15);
    			append_dev(div60, div11);
    			append_dev(div11, ul);
    			append_dev(ul, li2);
    			append_dev(li2, a1);
    			append_dev(a1, i0);
    			append_dev(a1, t16);
    			append_dev(a1, span);
    			append_dev(div60, t18);
    			append_dev(div60, div59);
    			append_dev(div59, div58);
    			append_dev(div58, div57);
    			append_dev(div57, div56);
    			append_dev(div56, div19);
    			append_dev(div19, div18);
    			append_dev(div18, h50);
    			append_dev(div18, t20);
    			append_dev(div18, div17);
    			append_dev(div17, table2);
    			append_dev(table2, tbody2);
    			append_dev(tbody2, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t22);
    			append_dev(tr0, td0);
    			append_dev(td0, t23);
    			append_dev(tbody2, t24);
    			append_dev(tbody2, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t26);
    			append_dev(tr1, td1);
    			append_dev(td1, t27);
    			append_dev(tbody2, t28);
    			append_dev(tbody2, tr2);
    			append_dev(tr2, th2);
    			append_dev(tr2, t30);
    			append_dev(tr2, td2);
    			append_dev(td2, t31);
    			append_dev(tbody2, t32);
    			append_dev(tbody2, tr4);
    			append_dev(tr4, th3);
    			append_dev(tr4, t34);
    			append_dev(tr4, div12);
    			append_dev(tr4, t35);
    			append_dev(tr4, div13);
    			append_dev(div13, table0);
    			append_dev(table0, thead0);
    			append_dev(thead0, tr3);
    			append_dev(tr3, th4);
    			append_dev(tr3, t37);
    			append_dev(tr3, th5);
    			append_dev(tr3, t39);
    			append_dev(tr3, th6);
    			append_dev(tr3, t41);
    			append_dev(tr3, th7);
    			append_dev(table0, t43);
    			append_dev(table0, tbody0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(tbody0, null);
    			}

    			append_dev(tbody2, t44);
    			append_dev(tbody2, tr6);
    			append_dev(tr6, th8);
    			append_dev(tr6, t46);
    			append_dev(tr6, div15);
    			append_dev(div15, div14);
    			append_dev(div14, button0);
    			append_dev(button0, i1);
    			append_dev(button0, t47);
    			append_dev(tr6, t48);
    			append_dev(tr6, div16);
    			append_dev(div16, table1);
    			append_dev(table1, thead1);
    			append_dev(thead1, tr5);
    			append_dev(tr5, th9);
    			append_dev(tr5, t50);
    			append_dev(tr5, th10);
    			append_dev(tr5, t52);
    			append_dev(tr5, th11);
    			append_dev(tr5, t54);
    			append_dev(tr5, th12);
    			append_dev(tr5, t56);
    			append_dev(tr5, th13);
    			append_dev(table1, t58);
    			append_dev(table1, tbody1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody1, null);
    			}

    			append_dev(div56, t59);
    			append_dev(div56, div33);
    			append_dev(div33, div32);
    			append_dev(div32, div31);
    			append_dev(div31, div20);
    			append_dev(div20, h51);
    			append_dev(div20, t61);
    			append_dev(div20, button1);
    			append_dev(div31, t62);
    			append_dev(div31, form0);
    			append_dev(form0, div28);
    			append_dev(div28, div21);
    			append_dev(div21, label0);
    			append_dev(div21, t64);
    			append_dev(div21, input0);
    			append_dev(div28, t65);
    			append_dev(div28, div22);
    			append_dev(div22, label1);
    			append_dev(div22, t67);
    			append_dev(div22, input1);
    			append_dev(div28, t68);
    			append_dev(div28, div23);
    			append_dev(div23, label2);
    			append_dev(div23, t70);
    			append_dev(div23, input2);
    			append_dev(div28, t71);
    			append_dev(div28, div24);
    			append_dev(div24, label3);
    			append_dev(div24, t73);
    			append_dev(div24, input3);
    			append_dev(div28, t74);
    			append_dev(div28, div25);
    			append_dev(div25, label4);
    			append_dev(div25, t76);
    			append_dev(div25, input4);
    			append_dev(div28, t77);
    			append_dev(div28, div26);
    			append_dev(div26, label5);
    			append_dev(div26, t79);
    			append_dev(div26, input5);
    			append_dev(div28, t80);
    			append_dev(div28, div27);
    			append_dev(div27, label6);
    			append_dev(div27, t82);
    			append_dev(div27, input6);
    			append_dev(form0, t83);
    			append_dev(form0, div30);
    			append_dev(div30, div29);
    			append_dev(div29, button2);
    			append_dev(div29, t85);
    			append_dev(div29, button3);
    			append_dev(form0, t87);
    			append_dev(form0, input7);
    			append_dev(form0, t88);
    			append_dev(form0, input8);
    			append_dev(div56, t89);
    			append_dev(div56, div47);
    			append_dev(div47, div46);
    			append_dev(div46, div45);
    			append_dev(div45, div34);
    			append_dev(div34, h52);
    			append_dev(div34, t91);
    			append_dev(div34, button4);
    			append_dev(div45, t92);
    			append_dev(div45, form1);
    			append_dev(form1, div42);
    			append_dev(div42, div35);
    			append_dev(div35, label7);
    			append_dev(div35, t94);
    			append_dev(div35, input9);
    			append_dev(div42, t95);
    			append_dev(div42, div36);
    			append_dev(div36, label8);
    			append_dev(div36, t97);
    			append_dev(div36, input10);
    			append_dev(div42, t98);
    			append_dev(div42, div37);
    			append_dev(div37, label9);
    			append_dev(div37, t100);
    			append_dev(div37, input11);
    			append_dev(div42, t101);
    			append_dev(div42, div38);
    			append_dev(div38, label10);
    			append_dev(div38, t103);
    			append_dev(div38, input12);
    			append_dev(div42, t104);
    			append_dev(div42, div39);
    			append_dev(div39, label11);
    			append_dev(div39, t106);
    			append_dev(div39, input13);
    			append_dev(div42, t107);
    			append_dev(div42, div40);
    			append_dev(div40, label12);
    			append_dev(div40, t109);
    			append_dev(div40, input14);
    			append_dev(div42, t110);
    			append_dev(div42, div41);
    			append_dev(div41, label13);
    			append_dev(div41, t112);
    			append_dev(div41, input15);
    			append_dev(form1, t113);
    			append_dev(form1, div44);
    			append_dev(div44, div43);
    			append_dev(div43, button5);
    			append_dev(div43, t115);
    			append_dev(div43, button6);
    			append_dev(form1, t117);
    			append_dev(form1, input16);
    			append_dev(form1, t118);
    			append_dev(form1, input17);
    			append_dev(div56, t119);
    			append_dev(div56, div55);
    			append_dev(div55, div54);
    			append_dev(div54, div53);
    			append_dev(div53, div48);
    			append_dev(div48, button7);
    			append_dev(div53, t120);
    			append_dev(div53, div52);
    			append_dev(div52, div50);
    			append_dev(div50, lord_icon);
    			append_dev(div50, t121);
    			append_dev(div50, div49);
    			append_dev(div49, h41);
    			append_dev(div49, t123);
    			append_dev(div49, p1);
    			append_dev(div52, t125);
    			append_dev(div52, div51);
    			append_dev(div51, button8);
    			append_dev(div51, t127);
    			append_dev(div51, button9);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button3, "click", reloadPage$1, { once: true }, false, false),
    					listen_dev(button6, "click", reloadPage$1, { once: true }, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*getDataSingleClient*/ 1) {
    				each_value_1 = /*data*/ ctx[7].orders;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(tbody0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*getDataSingleClient*/ 1) {
    				each_value = /*data*/ ctx[7].addresses;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div63);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$4.name,
    		type: "then",
    		source: "(135:12) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (331:84) {#each data.orders as dataOrders}
    function create_each_block_1$2(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*dataOrders*/ ctx[11].folio + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*dataOrders*/ ctx[11].total + "";
    	let t2;
    	let t3;
    	let td2;
    	let span;
    	let t4_value = /*dataOrders*/ ctx[11].order_status_id + "";
    	let t4;
    	let t5;
    	let td3;
    	let div1;
    	let div0;
    	let button;
    	let t7;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			span = element("span");
    			t4 = text(t4_value);
    			t5 = space();
    			td3 = element("td");
    			div1 = element("div");
    			div0 = element("div");
    			button = element("button");
    			button.textContent = "Ver\r\n                                                                                                            Detalles";
    			t7 = space();
    			attr_dev(td0, "class", "folio");
    			add_location(td0, file$c, 333, 92, 18227);
    			attr_dev(td1, "class", "total");
    			add_location(td1, file$c, 337, 92, 18651);
    			attr_dev(span, "class", "badge badge-soft-warning text-uppercase");
    			add_location(span, file$c, 343, 97, 19289);
    			attr_dev(td2, "class", "status");
    			add_location(td2, file$c, 341, 92, 19075);
    			attr_dev(button, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(button, "data-bs-toggle", "modal");
    			attr_dev(button, "data-bs-target", "#showModalVer");
    			add_location(button, file$c, 355, 104, 20632);
    			attr_dev(div0, "class", "edit");
    			add_location(div0, file$c, 352, 100, 20301);
    			attr_dev(div1, "class", "d-flex gap-2");
    			add_location(div1, file$c, 349, 96, 19974);
    			add_location(td3, file$c, 347, 97, 19778);
    			add_location(tr, file$c, 331, 88, 18039);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, span);
    			append_dev(span, t4);
    			append_dev(td2, t5);
    			append_dev(tr, td3);
    			append_dev(td3, div1);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(tr, t7);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(331:84) {#each data.orders as dataOrders}",
    		ctx
    	});

    	return block;
    }

    // (440:84) {#each data.addresses as dataAddress}
    function create_each_block$5(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*dataAddress*/ ctx[8].street_and_use_number + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*dataAddress*/ ctx[8].postal_code + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*dataAddress*/ ctx[8].city + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*dataAddress*/ ctx[8].province + "";
    	let t6;
    	let t7;
    	let td4;
    	let div3;
    	let div0;
    	let button0;
    	let t9;
    	let div1;
    	let button1;
    	let t11;
    	let div2;
    	let button2;
    	let t13;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text(t6_value);
    			t7 = space();
    			td4 = element("td");
    			div3 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			button0.textContent = "Ver\r\n                                                                                                            Detalles";
    			t9 = space();
    			div1 = element("div");
    			button1 = element("button");
    			button1.textContent = "Editar";
    			t11 = space();
    			div2 = element("div");
    			button2 = element("button");
    			button2.textContent = "Borrar";
    			t13 = space();
    			attr_dev(td0, "class", "street");
    			add_location(td0, file$c, 442, 92, 28825);
    			attr_dev(td1, "class", "code");
    			add_location(td1, file$c, 447, 92, 29361);
    			attr_dev(td2, "class", "city");
    			add_location(td2, file$c, 451, 92, 29791);
    			attr_dev(td3, "class", "province");
    			add_location(td3, file$c, 455, 92, 30214);
    			attr_dev(button0, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "data-bs-target", "#showModalVer");
    			add_location(button0, file$c, 468, 104, 31501);
    			attr_dev(div0, "class", "edit");
    			add_location(div0, file$c, 465, 100, 31170);
    			attr_dev(button1, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(button1, "data-bs-toggle", "modal");
    			attr_dev(button1, "data-bs-target", "#showModalEditar");
    			add_location(button1, file$c, 480, 104, 32824);
    			attr_dev(div1, "class", "edit");
    			add_location(div1, file$c, 477, 100, 32493);
    			attr_dev(button2, "class", "btn btn-sm btn-danger remove-item-btn");
    			attr_dev(button2, "data-bs-toggle", "modal");
    			attr_dev(button2, "data-bs-target", "#deleteRecordModal");
    			add_location(button2, file$c, 491, 104, 34161);
    			attr_dev(div2, "class", "remove");
    			attr_dev(div2, "id", "removeItemModal");
    			add_location(div2, file$c, 487, 100, 33702);
    			attr_dev(div3, "class", "d-flex gap-2");
    			add_location(div3, file$c, 462, 96, 30843);
    			add_location(td4, file$c, 460, 92, 30647);
    			add_location(tr, file$c, 440, 88, 28637);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, button0);
    			append_dev(div3, t9);
    			append_dev(div3, div1);
    			append_dev(div1, button1);
    			append_dev(div3, t11);
    			append_dev(div3, div2);
    			append_dev(div2, button2);
    			append_dev(tr, t13);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(440:84) {#each data.addresses as dataAddress}",
    		ctx
    	});

    	return block;
    }

    // (133:42)                   <!-- promise is pending -->              {:then data}
    function create_pending_block_1$4(ctx) {
    	const block = { c: noop$1, m: noop$1, p: noop$1, d: noop$1 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$4.name,
    		type: "pending",
    		source: "(133:42)                   <!-- promise is pending -->              {:then data}",
    		ctx
    	});

    	return block;
    }

    // (110:28)       Loading...  {:then data}
    function create_pending_block$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$4.name,
    		type: "pending",
    		source: "(110:28)       Loading...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let t0;
    	let link0;
    	let link1;
    	let script;
    	let script_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t1;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$4,
    		then: create_then_block$4,
    		catch: create_catch_block_1$4,
    		value: 7,
    		error: 14,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			link0 = element("link");
    			link1 = element("link");
    			script = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t1 = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Vista Detalle Usuarios";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$c, 72, 4, 2287);
    			attr_dev(link1, "href", "http://localhost:8080/libs/sweetalert2/sweetalert2.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$c, 75, 4, 2400);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$c, 82, 4, 2578);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$c, 84, 4, 2670);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$c, 90, 4, 2824);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$c, 96, 4, 2971);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$c, 102, 4, 3119);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function reloadPage$1() {
    	Swal.fire({
    		title: 'Recargara ventana',
    		text: 'Se recargara la pagina para ver los cambios realizados :)',
    		icon: 'info',
    		showCancelButton: false,
    		confirmButtonText: 'Aceptar'
    	}).then(result => {
    		if (result.value) {
    			location.reload();
    		}
    	});
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(3, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ViewCliente', slots, []);
    	let { id } = $$props;
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = '/';
    	}

    	var myHeaders = new Headers();
    	myHeaders.append('Authorization', `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	var requestOptions = {
    		method: 'GET',
    		headers: myHeaders,
    		redirect: 'follow'
    	};

    	async function getDataSingleClient() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/clients/${id}`, requestOptions);
    		const dataSingleClient = await response.json();
    		console.log(dataSingleClient.data);
    		return dataSingleClient.data;
    	}

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	$$self.$$.on_mount.push(function () {
    		if (id === undefined && !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])) {
    			console_1$2.warn("<ViewCliente> was created without expected prop 'id'");
    		}
    	});

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<ViewCliente> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		id,
    		Sidebar,
    		HeaderApp,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataSingleClient,
    		getDataUserLoggin,
    		reloadPage: reloadPage$1,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getDataSingleClient, getDataUserLoggin, id];
    }

    class ViewCliente extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { id: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ViewCliente",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get id() {
    		throw new Error("<ViewCliente>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ViewCliente>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\views\Catalogos.svelte generated by Svelte v3.52.0 */

    const { console: console_1$1 } = globals;
    const file$b = "src\\views\\Catalogos.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[47] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[51] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[54] = list[i];
    	return child_ctx;
    }

    // (1432:0) {:catch error}
    function create_catch_block_3(ctx) {
    	let t_value = /*error*/ ctx[50] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_3.name,
    		type: "catch",
    		source: "(1432:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (458:0) {:then data}
    function create_then_block$3(ctx) {
    	let main;
    	let div100;
    	let headerapp;
    	let t0;
    	let div0;
    	let sidebar;
    	let t1;
    	let div1;
    	let t2;
    	let div99;
    	let div97;
    	let div96;
    	let div5;
    	let div4;
    	let div3;
    	let h40;
    	let t4;
    	let div2;
    	let ol;
    	let li0;
    	let a;
    	let t6;
    	let li1;
    	let t8;
    	let div35;
    	let div34;
    	let div33;
    	let div6;
    	let h41;
    	let t10;
    	let div32;
    	let div31;
    	let div9;
    	let div8;
    	let div7;
    	let button0;
    	let i0;
    	let t11;
    	let t12;
    	let div30;
    	let table0;
    	let thead0;
    	let tr0;
    	let th0;
    	let t14;
    	let th1;
    	let t16;
    	let th2;
    	let t18;
    	let th3;
    	let t20;
    	let tbody0;
    	let t21;
    	let div19;
    	let div18;
    	let div17;
    	let div10;
    	let h50;
    	let t23;
    	let button1;
    	let t24;
    	let form0;
    	let div16;
    	let div11;
    	let label0;
    	let t26;
    	let input0;
    	let t27;
    	let div12;
    	let label1;
    	let t29;
    	let input1;
    	let t30;
    	let div13;
    	let label2;
    	let t32;
    	let input2;
    	let t33;
    	let div15;
    	let div14;
    	let button2;
    	let t35;
    	let button3;
    	let t37;
    	let input3;
    	let t38;
    	let input4;
    	let input4_value_value;
    	let t39;
    	let div29;
    	let div28;
    	let div27;
    	let div20;
    	let h51;
    	let t41;
    	let button4;
    	let t42;
    	let form1;
    	let div26;
    	let div21;
    	let label3;
    	let t44;
    	let input5;
    	let t45;
    	let div22;
    	let label4;
    	let t47;
    	let input6;
    	let t48;
    	let div23;
    	let label5;
    	let t50;
    	let input7;
    	let t51;
    	let div25;
    	let div24;
    	let button5;
    	let t53;
    	let button6;
    	let t55;
    	let div65;
    	let div64;
    	let div63;
    	let div36;
    	let h42;
    	let t57;
    	let div62;
    	let div61;
    	let div39;
    	let div38;
    	let div37;
    	let button7;
    	let i1;
    	let t58;
    	let t59;
    	let div60;
    	let table1;
    	let thead1;
    	let tr1;
    	let th4;
    	let t61;
    	let th5;
    	let t63;
    	let th6;
    	let t65;
    	let th7;
    	let t67;
    	let tbody1;
    	let t68;
    	let div49;
    	let div48;
    	let div47;
    	let div40;
    	let h52;
    	let t70;
    	let button8;
    	let t71;
    	let form2;
    	let div46;
    	let div41;
    	let label6;
    	let t73;
    	let input8;
    	let t74;
    	let div42;
    	let label7;
    	let t76;
    	let input9;
    	let t77;
    	let div43;
    	let label8;
    	let t79;
    	let input10;
    	let t80;
    	let div45;
    	let div44;
    	let button9;
    	let t82;
    	let button10;
    	let t84;
    	let div59;
    	let div58;
    	let div57;
    	let div50;
    	let h53;
    	let t86;
    	let button11;
    	let t87;
    	let form3;
    	let div56;
    	let div51;
    	let label9;
    	let t89;
    	let input11;
    	let t90;
    	let div52;
    	let label10;
    	let t92;
    	let input12;
    	let t93;
    	let div53;
    	let label11;
    	let t95;
    	let input13;
    	let t96;
    	let div55;
    	let div54;
    	let button12;
    	let t98;
    	let button13;
    	let t100;
    	let input14;
    	let t101;
    	let div95;
    	let div94;
    	let div93;
    	let div66;
    	let h43;
    	let t103;
    	let div92;
    	let div91;
    	let div69;
    	let div68;
    	let div67;
    	let button14;
    	let i2;
    	let t104;
    	let t105;
    	let div90;
    	let table2;
    	let thead2;
    	let tr2;
    	let th8;
    	let t107;
    	let th9;
    	let t109;
    	let th10;
    	let t111;
    	let th11;
    	let t113;
    	let tbody2;
    	let t114;
    	let div79;
    	let div78;
    	let div77;
    	let div70;
    	let h54;
    	let t116;
    	let button15;
    	let t117;
    	let form4;
    	let div76;
    	let div71;
    	let label12;
    	let t119;
    	let input15;
    	let t120;
    	let div72;
    	let label13;
    	let t122;
    	let input16;
    	let t123;
    	let div73;
    	let label14;
    	let t125;
    	let input17;
    	let t126;
    	let div75;
    	let div74;
    	let button16;
    	let t128;
    	let button17;
    	let t130;
    	let div89;
    	let div88;
    	let div87;
    	let div80;
    	let h55;
    	let t132;
    	let button18;
    	let t133;
    	let form5;
    	let div86;
    	let div81;
    	let label15;
    	let t135;
    	let input18;
    	let t136;
    	let div82;
    	let label16;
    	let t138;
    	let input19;
    	let t139;
    	let div83;
    	let label17;
    	let t141;
    	let input20;
    	let t142;
    	let div85;
    	let div84;
    	let button19;
    	let t144;
    	let button20;
    	let t146;
    	let input21;
    	let t147;
    	let div98;
    	let script0;
    	let script0_src_value;
    	let t148;
    	let script1;
    	let script1_src_value;
    	let t149;
    	let script2;
    	let script2_src_value;
    	let t150;
    	let script3;
    	let script3_src_value;
    	let t151;
    	let script4;
    	let script4_src_value;
    	let t152;
    	let script5;
    	let script5_src_value;
    	let t153;
    	let script6;
    	let script6_src_value;
    	let t154;
    	let script7;
    	let script7_src_value;
    	let t155;
    	let script8;
    	let script8_src_value;
    	let t156;
    	let script9;
    	let script9_src_value;
    	let t157;
    	let script10;
    	let script10_src_value;
    	let t158;
    	let script11;
    	let script11_src_value;
    	let t159;
    	let div101;
    	let script12;
    	let script12_src_value;
    	let t160;
    	let script13;
    	let script13_src_value;
    	let t161;
    	let script14;
    	let script14_src_value;
    	let t162;
    	let script15;
    	let script15_src_value;
    	let t163;
    	let script16;
    	let script16_src_value;
    	let t164;
    	let script17;
    	let script17_src_value;
    	let t165;
    	let script18;
    	let script18_src_value;
    	let t166;
    	let script19;
    	let script19_src_value;
    	let t167;
    	let script20;
    	let script20_src_value;
    	let t168;
    	let script21;
    	let script21_src_value;
    	let t169;
    	let script22;
    	let script22_src_value;
    	let t170;
    	let script23;
    	let script23_src_value;
    	let current;
    	let mounted;
    	let dispose;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[46] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_3,
    		then: create_then_block_3,
    		catch: create_catch_block_2$1,
    		value: 46,
    		error: 50
    	};

    	handle_promise(/*getCategories*/ ctx[3](), info);

    	let info_1 = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_2$1,
    		then: create_then_block_2$1,
    		catch: create_catch_block_1$3,
    		value: 46,
    		error: 50
    	};

    	handle_promise(/*getBrands*/ ctx[5](), info_1);

    	let info_2 = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$3,
    		then: create_then_block_1$3,
    		catch: create_catch_block$3,
    		value: 46,
    		error: 50
    	};

    	handle_promise(/*getTags*/ ctx[7](), info_2);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div100 = element("div");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div99 = element("div");
    			div97 = element("div");
    			div96 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			h40 = element("h4");
    			h40.textContent = "CATALOGOS";
    			t4 = space();
    			div2 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a = element("a");
    			a.textContent = "Home";
    			t6 = space();
    			li1 = element("li");
    			li1.textContent = "Catalogos";
    			t8 = space();
    			div35 = element("div");
    			div34 = element("div");
    			div33 = element("div");
    			div6 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Categorias";
    			t10 = space();
    			div32 = element("div");
    			div31 = element("div");
    			div9 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t11 = text("\r\n                                             Añadir Categoria");
    			t12 = space();
    			div30 = element("div");
    			table0 = element("table");
    			thead0 = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Nombre";
    			t14 = space();
    			th1 = element("th");
    			th1.textContent = "Descripción";
    			t16 = space();
    			th2 = element("th");
    			th2.textContent = "Slug";
    			t18 = space();
    			th3 = element("th");
    			th3.textContent = "Acciones";
    			t20 = space();
    			tbody0 = element("tbody");
    			info.block.c();
    			t21 = space();
    			div19 = element("div");
    			div18 = element("div");
    			div17 = element("div");
    			div10 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Editar Categoria";
    			t23 = space();
    			button1 = element("button");
    			t24 = space();
    			form0 = element("form");
    			div16 = element("div");
    			div11 = element("div");
    			label0 = element("label");
    			label0.textContent = "Nombre";
    			t26 = space();
    			input0 = element("input");
    			t27 = space();
    			div12 = element("div");
    			label1 = element("label");
    			label1.textContent = "Descripcion";
    			t29 = space();
    			input1 = element("input");
    			t30 = space();
    			div13 = element("div");
    			label2 = element("label");
    			label2.textContent = "Slug";
    			t32 = space();
    			input2 = element("input");
    			t33 = space();
    			div15 = element("div");
    			div14 = element("div");
    			button2 = element("button");
    			button2.textContent = "Cerrar";
    			t35 = space();
    			button3 = element("button");
    			button3.textContent = "Guardar cambios";
    			t37 = space();
    			input3 = element("input");
    			t38 = space();
    			input4 = element("input");
    			t39 = space();
    			div29 = element("div");
    			div28 = element("div");
    			div27 = element("div");
    			div20 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Agregar Categoria";
    			t41 = space();
    			button4 = element("button");
    			t42 = space();
    			form1 = element("form");
    			div26 = element("div");
    			div21 = element("div");
    			label3 = element("label");
    			label3.textContent = "Nombre";
    			t44 = space();
    			input5 = element("input");
    			t45 = space();
    			div22 = element("div");
    			label4 = element("label");
    			label4.textContent = "Descripcion";
    			t47 = space();
    			input6 = element("input");
    			t48 = space();
    			div23 = element("div");
    			label5 = element("label");
    			label5.textContent = "Slug";
    			t50 = space();
    			input7 = element("input");
    			t51 = space();
    			div25 = element("div");
    			div24 = element("div");
    			button5 = element("button");
    			button5.textContent = "Cerrar";
    			t53 = space();
    			button6 = element("button");
    			button6.textContent = "Guardar cambios";
    			t55 = space();
    			div65 = element("div");
    			div64 = element("div");
    			div63 = element("div");
    			div36 = element("div");
    			h42 = element("h4");
    			h42.textContent = "Marcas";
    			t57 = space();
    			div62 = element("div");
    			div61 = element("div");
    			div39 = element("div");
    			div38 = element("div");
    			div37 = element("div");
    			button7 = element("button");
    			i1 = element("i");
    			t58 = text("\r\n                                             Añadir Marca");
    			t59 = space();
    			div60 = element("div");
    			table1 = element("table");
    			thead1 = element("thead");
    			tr1 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Nombre";
    			t61 = space();
    			th5 = element("th");
    			th5.textContent = "Descripción";
    			t63 = space();
    			th6 = element("th");
    			th6.textContent = "Slug";
    			t65 = space();
    			th7 = element("th");
    			th7.textContent = "Acciones";
    			t67 = space();
    			tbody1 = element("tbody");
    			info_1.block.c();
    			t68 = space();
    			div49 = element("div");
    			div48 = element("div");
    			div47 = element("div");
    			div40 = element("div");
    			h52 = element("h5");
    			h52.textContent = "Editar Categoria";
    			t70 = space();
    			button8 = element("button");
    			t71 = space();
    			form2 = element("form");
    			div46 = element("div");
    			div41 = element("div");
    			label6 = element("label");
    			label6.textContent = "Nombre";
    			t73 = space();
    			input8 = element("input");
    			t74 = space();
    			div42 = element("div");
    			label7 = element("label");
    			label7.textContent = "Descripcion";
    			t76 = space();
    			input9 = element("input");
    			t77 = space();
    			div43 = element("div");
    			label8 = element("label");
    			label8.textContent = "Slug";
    			t79 = space();
    			input10 = element("input");
    			t80 = space();
    			div45 = element("div");
    			div44 = element("div");
    			button9 = element("button");
    			button9.textContent = "Cerrar";
    			t82 = space();
    			button10 = element("button");
    			button10.textContent = "Guardar cambios";
    			t84 = space();
    			div59 = element("div");
    			div58 = element("div");
    			div57 = element("div");
    			div50 = element("div");
    			h53 = element("h5");
    			h53.textContent = "Editar Marca";
    			t86 = space();
    			button11 = element("button");
    			t87 = space();
    			form3 = element("form");
    			div56 = element("div");
    			div51 = element("div");
    			label9 = element("label");
    			label9.textContent = "Nombre";
    			t89 = space();
    			input11 = element("input");
    			t90 = space();
    			div52 = element("div");
    			label10 = element("label");
    			label10.textContent = "Descripcion";
    			t92 = space();
    			input12 = element("input");
    			t93 = space();
    			div53 = element("div");
    			label11 = element("label");
    			label11.textContent = "Slug";
    			t95 = space();
    			input13 = element("input");
    			t96 = space();
    			div55 = element("div");
    			div54 = element("div");
    			button12 = element("button");
    			button12.textContent = "Cerrar";
    			t98 = space();
    			button13 = element("button");
    			button13.textContent = "Guardar cambios";
    			t100 = space();
    			input14 = element("input");
    			t101 = space();
    			div95 = element("div");
    			div94 = element("div");
    			div93 = element("div");
    			div66 = element("div");
    			h43 = element("h4");
    			h43.textContent = "Etiquetas";
    			t103 = space();
    			div92 = element("div");
    			div91 = element("div");
    			div69 = element("div");
    			div68 = element("div");
    			div67 = element("div");
    			button14 = element("button");
    			i2 = element("i");
    			t104 = text("\r\n                                             Añadir Etiqueta");
    			t105 = space();
    			div90 = element("div");
    			table2 = element("table");
    			thead2 = element("thead");
    			tr2 = element("tr");
    			th8 = element("th");
    			th8.textContent = "Nombre";
    			t107 = space();
    			th9 = element("th");
    			th9.textContent = "Descripción";
    			t109 = space();
    			th10 = element("th");
    			th10.textContent = "Slug";
    			t111 = space();
    			th11 = element("th");
    			th11.textContent = "Acciones";
    			t113 = space();
    			tbody2 = element("tbody");
    			info_2.block.c();
    			t114 = space();
    			div79 = element("div");
    			div78 = element("div");
    			div77 = element("div");
    			div70 = element("div");
    			h54 = element("h5");
    			h54.textContent = "Editar Etiqueta";
    			t116 = space();
    			button15 = element("button");
    			t117 = space();
    			form4 = element("form");
    			div76 = element("div");
    			div71 = element("div");
    			label12 = element("label");
    			label12.textContent = "Nombre";
    			t119 = space();
    			input15 = element("input");
    			t120 = space();
    			div72 = element("div");
    			label13 = element("label");
    			label13.textContent = "Descripcion";
    			t122 = space();
    			input16 = element("input");
    			t123 = space();
    			div73 = element("div");
    			label14 = element("label");
    			label14.textContent = "Slug";
    			t125 = space();
    			input17 = element("input");
    			t126 = space();
    			div75 = element("div");
    			div74 = element("div");
    			button16 = element("button");
    			button16.textContent = "Cerrar";
    			t128 = space();
    			button17 = element("button");
    			button17.textContent = "Guardar cambios";
    			t130 = space();
    			div89 = element("div");
    			div88 = element("div");
    			div87 = element("div");
    			div80 = element("div");
    			h55 = element("h5");
    			h55.textContent = "Editar Etiqueta";
    			t132 = space();
    			button18 = element("button");
    			t133 = space();
    			form5 = element("form");
    			div86 = element("div");
    			div81 = element("div");
    			label15 = element("label");
    			label15.textContent = "Nombre";
    			t135 = space();
    			input18 = element("input");
    			t136 = space();
    			div82 = element("div");
    			label16 = element("label");
    			label16.textContent = "Descripcion";
    			t138 = space();
    			input19 = element("input");
    			t139 = space();
    			div83 = element("div");
    			label17 = element("label");
    			label17.textContent = "Slug";
    			t141 = space();
    			input20 = element("input");
    			t142 = space();
    			div85 = element("div");
    			div84 = element("div");
    			button19 = element("button");
    			button19.textContent = "Cerrar";
    			t144 = space();
    			button20 = element("button");
    			button20.textContent = "Guardar cambios";
    			t146 = space();
    			input21 = element("input");
    			t147 = space();
    			div98 = element("div");
    			script0 = element("script");
    			t148 = space();
    			script1 = element("script");
    			t149 = space();
    			script2 = element("script");
    			t150 = space();
    			script3 = element("script");
    			t151 = space();
    			script4 = element("script");
    			t152 = space();
    			script5 = element("script");
    			t153 = space();
    			script6 = element("script");
    			t154 = space();
    			script7 = element("script");
    			t155 = space();
    			script8 = element("script");
    			t156 = space();
    			script9 = element("script");
    			t157 = space();
    			script10 = element("script");
    			t158 = space();
    			script11 = element("script");
    			t159 = space();
    			div101 = element("div");
    			script12 = element("script");
    			t160 = space();
    			script13 = element("script");
    			t161 = space();
    			script14 = element("script");
    			t162 = space();
    			script15 = element("script");
    			t163 = space();
    			script16 = element("script");
    			t164 = space();
    			script17 = element("script");
    			t165 = space();
    			script18 = element("script");
    			t166 = space();
    			script19 = element("script");
    			t167 = space();
    			script20 = element("script");
    			t168 = space();
    			script21 = element("script");
    			t169 = space();
    			script22 = element("script");
    			t170 = space();
    			script23 = element("script");
    			attr_dev(div0, "class", "app-menu navbar-menu");
    			add_location(div0, file$b, 463, 9, 15894);
    			attr_dev(div1, "class", "vertical-overlay");
    			add_location(div1, file$b, 469, 9, 16079);
    			attr_dev(h40, "class", "mb-sm-0");
    			add_location(h40, file$b, 482, 27, 16733);
    			attr_dev(a, "href", "/home");
    			add_location(a, file$b, 487, 36, 16988);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$b, 486, 33, 16922);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$b, 489, 33, 17087);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$b, 485, 30, 16860);
    			attr_dev(div2, "class", "page-title-right");
    			add_location(div2, file$b, 484, 27, 16798);
    			attr_dev(div3, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div3, file$b, 480, 24, 16595);
    			attr_dev(div4, "class", "col-12");
    			add_location(div4, file$b, 479, 21, 16549);
    			attr_dev(div5, "class", "row");
    			add_location(div5, file$b, 478, 18, 16509);
    			attr_dev(h41, "class", "card-title mb-0");
    			add_location(h41, file$b, 504, 30, 17670);
    			attr_dev(div6, "class", "card-header");
    			add_location(div6, file$b, 503, 27, 17613);
    			attr_dev(i0, "class", "ri-add-line align-bottom me-1");
    			add_location(i0, file$b, 519, 46, 18535);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-success add-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "id", "create-btn");
    			attr_dev(button0, "data-bs-target", "#showModalAñadirCliente");
    			add_location(button0, file$b, 513, 42, 18124);
    			add_location(div7, file$b, 512, 39, 18075);
    			attr_dev(div8, "class", "col-sm-auto");
    			add_location(div8, file$b, 511, 36, 18009);
    			attr_dev(div9, "class", "row g-4 mb-3");
    			add_location(div9, file$b, 510, 33, 17945);
    			add_location(th0, file$b, 535, 45, 19418);
    			add_location(th1, file$b, 536, 45, 19480);
    			add_location(th2, file$b, 537, 45, 19547);
    			add_location(th3, file$b, 538, 45, 19607);
    			add_location(tr0, file$b, 534, 42, 19367);
    			attr_dev(thead0, "class", "table-light");
    			add_location(thead0, file$b, 533, 39, 19296);
    			attr_dev(tbody0, "class", "list form-check-all");
    			add_location(tbody0, file$b, 541, 39, 19763);
    			attr_dev(table0, "class", "table align-middle table-nowrap");
    			attr_dev(table0, "id", "customerTable");
    			add_location(table0, file$b, 530, 36, 19109);
    			attr_dev(h50, "class", "modal-title");
    			attr_dev(h50, "id", "exampleModalLabel");
    			add_location(h50, file$b, 597, 48, 23642);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn-close");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			attr_dev(button1, "aria-label", "Close");
    			attr_dev(button1, "id", "close-modal");
    			add_location(button1, file$b, 602, 48, 23967);
    			attr_dev(div10, "class", "modal-header bg-light p-3");
    			add_location(div10, file$b, 595, 45, 23504);
    			attr_dev(label0, "for", "name-field");
    			attr_dev(label0, "class", "form-label");
    			add_location(label0, file$b, 612, 54, 24636);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "name-field");
    			attr_dev(input0, "class", "form-control");
    			attr_dev(input0, "placeholder", "Ingresar Nombre");
    			attr_dev(input0, "name", "name");
    			input0.required = true;
    			add_location(input0, file$b, 616, 54, 24924);
    			attr_dev(div11, "class", "mb-3");
    			add_location(div11, file$b, 611, 51, 24562);
    			attr_dev(label1, "for", "description-field");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$b, 627, 54, 25664);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "id", "description-field");
    			attr_dev(input1, "name", "description");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "placeholder", "Ingresar descripcion");
    			input1.required = true;
    			add_location(input1, file$b, 631, 54, 25964);
    			attr_dev(div12, "class", "mb-3");
    			add_location(div12, file$b, 626, 51, 25590);
    			attr_dev(label2, "for", "slug-field");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$b, 642, 54, 26730);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "id", "slug-field");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "name", "slug");
    			attr_dev(input2, "placeholder", "Ingresar Teléfono");
    			input2.required = true;
    			add_location(input2, file$b, 646, 54, 27016);
    			attr_dev(div13, "class", "mb-3");
    			add_location(div13, file$b, 641, 51, 26656);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn btn-danger");
    			attr_dev(button2, "data-bs-dismiss", "modal");
    			add_location(button2, file$b, 659, 57, 27929);
    			attr_dev(button3, "type", "submit");
    			attr_dev(button3, "class", "btn btn-success");
    			attr_dev(button3, "id", "add-btn");
    			add_location(button3, file$b, 664, 57, 28317);
    			attr_dev(div14, "class", "hstack gap-2 justify-content-end");
    			add_location(div14, file$b, 657, 54, 27766);
    			attr_dev(div15, "class", "modal-footer");
    			add_location(div15, file$b, 656, 51, 27684);
    			attr_dev(input3, "name", "action");
    			input3.value = "update";
    			input3.hidden = true;
    			add_location(input3, file$b, 672, 51, 28931);
    			attr_dev(input4, "name", "id");
    			input4.value = input4_value_value = /*dataSingleSelected*/ ctx[0].id;
    			input4.hidden = true;
    			add_location(input4, file$b, 676, 51, 29194);
    			attr_dev(div16, "class", "modal-body");
    			add_location(div16, file$b, 610, 48, 24485);
    			add_location(form0, file$b, 609, 45, 24429);
    			attr_dev(div17, "class", "modal-content");
    			add_location(div17, file$b, 594, 42, 23430);
    			attr_dev(div18, "class", "modal-dialog modal-dialog-centered");
    			add_location(div18, file$b, 592, 39, 23295);
    			attr_dev(div19, "class", "modal fade");
    			attr_dev(div19, "id", "showModalEditarCategoria");
    			attr_dev(div19, "tabindex", "-1");
    			attr_dev(div19, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div19, "aria-hidden", "true");
    			add_location(div19, file$b, 586, 36, 22931);
    			attr_dev(h51, "class", "modal-title");
    			attr_dev(h51, "id", "exampleModalLabel");
    			add_location(h51, file$b, 698, 48, 30485);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "btn-close");
    			attr_dev(button4, "data-bs-dismiss", "modal");
    			attr_dev(button4, "aria-label", "Close");
    			attr_dev(button4, "id", "close-modal");
    			add_location(button4, file$b, 703, 48, 30811);
    			attr_dev(div20, "class", "modal-header bg-light p-3");
    			add_location(div20, file$b, 696, 45, 30347);
    			attr_dev(label3, "for", "name-field");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$b, 713, 54, 31480);
    			attr_dev(input5, "type", "text");
    			attr_dev(input5, "id", "name-field");
    			attr_dev(input5, "class", "form-control");
    			attr_dev(input5, "placeholder", "Ingresar Nombre");
    			input5.required = true;
    			add_location(input5, file$b, 717, 54, 31768);
    			attr_dev(div21, "class", "mb-3");
    			add_location(div21, file$b, 712, 51, 31406);
    			attr_dev(label4, "for", "description-field");
    			attr_dev(label4, "class", "form-label");
    			add_location(label4, file$b, 727, 54, 32430);
    			attr_dev(input6, "type", "text");
    			attr_dev(input6, "id", "description-field");
    			attr_dev(input6, "class", "form-control");
    			attr_dev(input6, "placeholder", "Ingresar descripcion");
    			input6.required = true;
    			add_location(input6, file$b, 731, 54, 32730);
    			attr_dev(div22, "class", "mb-3");
    			add_location(div22, file$b, 726, 51, 32356);
    			attr_dev(label5, "for", "slug-field");
    			attr_dev(label5, "class", "form-label");
    			add_location(label5, file$b, 741, 54, 33411);
    			attr_dev(input7, "type", "text");
    			attr_dev(input7, "id", "slug-field");
    			attr_dev(input7, "class", "form-control");
    			attr_dev(input7, "placeholder", "Ingresar Teléfono");
    			input7.required = true;
    			add_location(input7, file$b, 745, 54, 33697);
    			attr_dev(div23, "class", "mb-3");
    			add_location(div23, file$b, 740, 51, 33337);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "class", "btn btn-danger");
    			attr_dev(button5, "data-bs-dismiss", "modal");
    			add_location(button5, file$b, 757, 57, 34532);
    			attr_dev(button6, "type", "submit");
    			attr_dev(button6, "class", "btn btn-success");
    			attr_dev(button6, "id", "add-btn");
    			add_location(button6, file$b, 762, 57, 34920);
    			attr_dev(div24, "class", "hstack gap-2 justify-content-end");
    			add_location(div24, file$b, 755, 54, 34369);
    			attr_dev(div25, "class", "modal-footer");
    			add_location(div25, file$b, 754, 51, 34287);
    			attr_dev(div26, "class", "modal-body");
    			add_location(div26, file$b, 711, 48, 31329);
    			add_location(form1, file$b, 710, 45, 31273);
    			attr_dev(div27, "class", "modal-content");
    			add_location(div27, file$b, 695, 42, 30273);
    			attr_dev(div28, "class", "modal-dialog modal-dialog-centered");
    			add_location(div28, file$b, 693, 39, 30138);
    			attr_dev(div29, "class", "modal fade");
    			attr_dev(div29, "id", "showModalAñadirCliente");
    			attr_dev(div29, "tabindex", "-1");
    			attr_dev(div29, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div29, "aria-hidden", "true");
    			add_location(div29, file$b, 687, 36, 29776);
    			attr_dev(div30, "class", "table-responsive table-card mt-3 mb-1");
    			set_style(div30, "height", "200px");
    			set_style(div30, "overflow", "scroll");
    			add_location(div30, file$b, 526, 33, 18868);
    			attr_dev(div31, "id", "customerList");
    			add_location(div31, file$b, 509, 30, 17887);
    			attr_dev(div32, "class", "card-body");
    			add_location(div32, file$b, 508, 27, 17832);
    			attr_dev(div33, "class", "card");
    			add_location(div33, file$b, 502, 24, 17566);
    			attr_dev(div34, "class", "col-lg-12");
    			add_location(div34, file$b, 501, 21, 17517);
    			attr_dev(div35, "class", "row");
    			add_location(div35, file$b, 500, 18, 17477);
    			attr_dev(h42, "class", "card-title mb-0");
    			add_location(h42, file$b, 791, 30, 36349);
    			attr_dev(div36, "class", "card-header");
    			add_location(div36, file$b, 790, 27, 36292);
    			attr_dev(i1, "class", "ri-add-line align-bottom me-1");
    			add_location(i1, file$b, 806, 46, 37208);
    			attr_dev(button7, "type", "button");
    			attr_dev(button7, "class", "btn btn-success add-btn");
    			attr_dev(button7, "data-bs-toggle", "modal");
    			attr_dev(button7, "id", "create-btn");
    			attr_dev(button7, "data-bs-target", "#showModalAñadirMarca");
    			add_location(button7, file$b, 800, 42, 36799);
    			add_location(div37, file$b, 799, 39, 36750);
    			attr_dev(div38, "class", "col-sm-auto");
    			add_location(div38, file$b, 798, 36, 36684);
    			attr_dev(div39, "class", "row g-4 mb-3");
    			add_location(div39, file$b, 797, 33, 36620);
    			add_location(th4, file$b, 822, 45, 38086);
    			add_location(th5, file$b, 823, 45, 38148);
    			add_location(th6, file$b, 824, 45, 38215);
    			add_location(th7, file$b, 825, 45, 38275);
    			add_location(tr1, file$b, 821, 42, 38035);
    			attr_dev(thead1, "class", "table-light");
    			add_location(thead1, file$b, 820, 39, 37964);
    			attr_dev(tbody1, "class", "list form-check-all");
    			add_location(tbody1, file$b, 828, 39, 38431);
    			attr_dev(table1, "class", "table align-middle table-nowrap");
    			attr_dev(table1, "id", "customerTable");
    			add_location(table1, file$b, 817, 36, 37777);
    			attr_dev(h52, "class", "modal-title");
    			attr_dev(h52, "id", "exampleModalLabel");
    			add_location(h52, file$b, 884, 48, 42262);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "class", "btn-close");
    			attr_dev(button8, "data-bs-dismiss", "modal");
    			attr_dev(button8, "aria-label", "Close");
    			attr_dev(button8, "id", "close-modal");
    			add_location(button8, file$b, 889, 48, 42587);
    			attr_dev(div40, "class", "modal-header bg-light p-3");
    			add_location(div40, file$b, 882, 45, 42124);
    			attr_dev(label6, "for", "name-field");
    			attr_dev(label6, "class", "form-label");
    			add_location(label6, file$b, 901, 54, 43445);
    			attr_dev(input8, "type", "text");
    			attr_dev(input8, "id", "name-field");
    			attr_dev(input8, "class", "form-control");
    			attr_dev(input8, "placeholder", "Ingresar Nombre");
    			attr_dev(input8, "name", "name");
    			input8.required = true;
    			add_location(input8, file$b, 905, 54, 43733);
    			attr_dev(div41, "class", "mb-3");
    			add_location(div41, file$b, 900, 51, 43371);
    			attr_dev(label7, "for", "description-field");
    			attr_dev(label7, "class", "form-label");
    			add_location(label7, file$b, 916, 54, 44473);
    			attr_dev(input9, "type", "text");
    			attr_dev(input9, "id", "description-field");
    			attr_dev(input9, "name", "description");
    			attr_dev(input9, "class", "form-control");
    			attr_dev(input9, "placeholder", "Ingresar descripcion");
    			input9.required = true;
    			add_location(input9, file$b, 920, 54, 44773);
    			attr_dev(div42, "class", "mb-3");
    			add_location(div42, file$b, 915, 51, 44399);
    			attr_dev(label8, "for", "slug-field");
    			attr_dev(label8, "class", "form-label");
    			add_location(label8, file$b, 931, 54, 45539);
    			attr_dev(input10, "type", "text");
    			attr_dev(input10, "id", "slug-field");
    			attr_dev(input10, "class", "form-control");
    			attr_dev(input10, "name", "slug");
    			attr_dev(input10, "placeholder", "Ingresar Teléfono");
    			input10.required = true;
    			add_location(input10, file$b, 935, 54, 45825);
    			attr_dev(div43, "class", "mb-3");
    			add_location(div43, file$b, 930, 51, 45465);
    			attr_dev(button9, "type", "button");
    			attr_dev(button9, "class", "btn btn-danger");
    			attr_dev(button9, "data-bs-dismiss", "modal");
    			add_location(button9, file$b, 948, 57, 46738);
    			attr_dev(button10, "type", "submit");
    			attr_dev(button10, "class", "btn btn-success");
    			attr_dev(button10, "id", "add-btn");
    			add_location(button10, file$b, 953, 57, 47126);
    			attr_dev(div44, "class", "hstack gap-2 justify-content-end");
    			add_location(div44, file$b, 946, 54, 46575);
    			attr_dev(div45, "class", "modal-footer");
    			add_location(div45, file$b, 945, 51, 46493);
    			attr_dev(div46, "class", "modal-body");
    			add_location(div46, file$b, 899, 48, 43294);
    			attr_dev(form2, "method", "post");
    			attr_dev(form2, "action", "https://newphpecommercejona.herokuapp.com/app/ClientsController.php");
    			add_location(form2, file$b, 896, 45, 43049);
    			attr_dev(div47, "class", "modal-content");
    			add_location(div47, file$b, 881, 42, 42050);
    			attr_dev(div48, "class", "modal-dialog modal-dialog-centered");
    			add_location(div48, file$b, 879, 39, 41915);
    			attr_dev(div49, "class", "modal fade");
    			attr_dev(div49, "id", "showModalEditarMarca");
    			attr_dev(div49, "tabindex", "-1");
    			attr_dev(div49, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div49, "aria-hidden", "true");
    			add_location(div49, file$b, 873, 36, 41555);
    			attr_dev(h53, "class", "modal-title");
    			attr_dev(h53, "id", "exampleModalLabel");
    			add_location(h53, file$b, 979, 48, 48747);
    			attr_dev(button11, "type", "button");
    			attr_dev(button11, "class", "btn-close");
    			attr_dev(button11, "data-bs-dismiss", "modal");
    			attr_dev(button11, "aria-label", "Close");
    			attr_dev(button11, "id", "close-modal");
    			add_location(button11, file$b, 984, 48, 49068);
    			attr_dev(div50, "class", "modal-header bg-light p-3");
    			add_location(div50, file$b, 977, 45, 48609);
    			attr_dev(label9, "for", "name-field");
    			attr_dev(label9, "class", "form-label");
    			add_location(label9, file$b, 994, 54, 49737);
    			attr_dev(input11, "type", "text");
    			attr_dev(input11, "id", "name-field");
    			attr_dev(input11, "class", "form-control");
    			attr_dev(input11, "placeholder", "Ingresar Nombre");
    			input11.required = true;
    			add_location(input11, file$b, 998, 54, 50025);
    			attr_dev(div51, "class", "mb-3");
    			add_location(div51, file$b, 993, 51, 49663);
    			attr_dev(label10, "for", "description-field");
    			attr_dev(label10, "class", "form-label");
    			add_location(label10, file$b, 1008, 54, 50687);
    			attr_dev(input12, "type", "text");
    			attr_dev(input12, "id", "description-field");
    			attr_dev(input12, "class", "form-control");
    			attr_dev(input12, "placeholder", "Ingresar descripcion");
    			input12.required = true;
    			add_location(input12, file$b, 1012, 54, 50987);
    			attr_dev(div52, "class", "mb-3");
    			add_location(div52, file$b, 1007, 51, 50613);
    			attr_dev(label11, "for", "slug-field");
    			attr_dev(label11, "class", "form-label");
    			add_location(label11, file$b, 1022, 54, 51668);
    			attr_dev(input13, "type", "text");
    			attr_dev(input13, "id", "slug-field");
    			attr_dev(input13, "class", "form-control");
    			attr_dev(input13, "placeholder", "Ingresar Teléfono");
    			input13.required = true;
    			add_location(input13, file$b, 1026, 54, 51954);
    			attr_dev(div53, "class", "mb-3");
    			add_location(div53, file$b, 1021, 51, 51594);
    			attr_dev(button12, "type", "button");
    			attr_dev(button12, "class", "btn btn-danger");
    			attr_dev(button12, "data-bs-dismiss", "modal");
    			add_location(button12, file$b, 1038, 57, 52789);
    			attr_dev(button13, "type", "submit");
    			attr_dev(button13, "class", "btn btn-success");
    			attr_dev(button13, "id", "add-btn");
    			add_location(button13, file$b, 1043, 57, 53177);
    			attr_dev(div54, "class", "hstack gap-2 justify-content-end");
    			add_location(div54, file$b, 1036, 54, 52626);
    			attr_dev(div55, "class", "modal-footer");
    			add_location(div55, file$b, 1035, 51, 52544);
    			attr_dev(input14, "type", "text");
    			input14.value = "create";
    			attr_dev(input14, "name", "action");
    			input14.hidden = true;
    			add_location(input14, file$b, 1051, 51, 53772);
    			attr_dev(div56, "class", "modal-body");
    			add_location(div56, file$b, 992, 48, 49586);
    			add_location(form3, file$b, 991, 45, 49530);
    			attr_dev(div57, "class", "modal-content");
    			add_location(div57, file$b, 976, 42, 48535);
    			attr_dev(div58, "class", "modal-dialog modal-dialog-centered");
    			add_location(div58, file$b, 974, 39, 48400);
    			attr_dev(div59, "class", "modal fade");
    			attr_dev(div59, "id", "showModalAñadirMarca");
    			attr_dev(div59, "tabindex", "-1");
    			attr_dev(div59, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div59, "aria-hidden", "true");
    			add_location(div59, file$b, 968, 36, 48040);
    			attr_dev(div60, "class", "table-responsive table-card mt-3 mb-1");
    			set_style(div60, "height", "200px");
    			set_style(div60, "overflow", "scroll");
    			add_location(div60, file$b, 813, 33, 37537);
    			attr_dev(div61, "id", "customerList");
    			add_location(div61, file$b, 796, 30, 36562);
    			attr_dev(div62, "class", "card-body");
    			add_location(div62, file$b, 795, 27, 36507);
    			attr_dev(div63, "class", "card");
    			add_location(div63, file$b, 789, 24, 36245);
    			attr_dev(div64, "class", "col-lg-12");
    			add_location(div64, file$b, 788, 21, 36196);
    			attr_dev(div65, "class", "row");
    			add_location(div65, file$b, 787, 18, 36156);
    			attr_dev(h43, "class", "card-title mb-0");
    			add_location(h43, file$b, 1077, 30, 54935);
    			attr_dev(div66, "class", "card-header");
    			add_location(div66, file$b, 1076, 27, 54878);
    			attr_dev(i2, "class", "ri-add-line align-bottom me-1");
    			add_location(i2, file$b, 1092, 46, 55800);
    			attr_dev(button14, "type", "button");
    			attr_dev(button14, "class", "btn btn-success add-btn");
    			attr_dev(button14, "data-bs-toggle", "modal");
    			attr_dev(button14, "id", "create-btn");
    			attr_dev(button14, "data-bs-target", "#showModalAñadirEtiqueta");
    			add_location(button14, file$b, 1086, 42, 55388);
    			add_location(div67, file$b, 1085, 39, 55339);
    			attr_dev(div68, "class", "col-sm-auto");
    			add_location(div68, file$b, 1084, 36, 55273);
    			attr_dev(div69, "class", "row g-4 mb-3");
    			add_location(div69, file$b, 1083, 33, 55209);
    			add_location(th8, file$b, 1108, 45, 56681);
    			add_location(th9, file$b, 1109, 45, 56743);
    			add_location(th10, file$b, 1110, 45, 56810);
    			add_location(th11, file$b, 1111, 45, 56870);
    			add_location(tr2, file$b, 1107, 42, 56630);
    			attr_dev(thead2, "class", "table-light");
    			add_location(thead2, file$b, 1106, 39, 56559);
    			attr_dev(tbody2, "class", "list form-check-all");
    			add_location(tbody2, file$b, 1114, 39, 57026);
    			attr_dev(table2, "class", "table align-middle table-nowrap");
    			attr_dev(table2, "id", "customerTable");
    			add_location(table2, file$b, 1103, 36, 56372);
    			attr_dev(h54, "class", "modal-title");
    			attr_dev(h54, "id", "exampleModalLabel");
    			add_location(h54, file$b, 1170, 48, 60853);
    			attr_dev(button15, "type", "button");
    			attr_dev(button15, "class", "btn-close");
    			attr_dev(button15, "data-bs-dismiss", "modal");
    			attr_dev(button15, "aria-label", "Close");
    			attr_dev(button15, "id", "close-modal");
    			add_location(button15, file$b, 1175, 48, 61177);
    			attr_dev(div70, "class", "modal-header bg-light p-3");
    			add_location(div70, file$b, 1168, 45, 60715);
    			attr_dev(label12, "for", "name-field");
    			attr_dev(label12, "class", "form-label");
    			add_location(label12, file$b, 1185, 54, 61846);
    			attr_dev(input15, "type", "text");
    			attr_dev(input15, "id", "name-field");
    			attr_dev(input15, "class", "form-control");
    			attr_dev(input15, "placeholder", "Ingresar Nombre");
    			attr_dev(input15, "name", "name");
    			input15.required = true;
    			add_location(input15, file$b, 1189, 54, 62134);
    			attr_dev(div71, "class", "mb-3");
    			add_location(div71, file$b, 1184, 51, 61772);
    			attr_dev(label13, "for", "description-field");
    			attr_dev(label13, "class", "form-label");
    			add_location(label13, file$b, 1200, 54, 62874);
    			attr_dev(input16, "type", "text");
    			attr_dev(input16, "id", "description-field");
    			attr_dev(input16, "name", "description");
    			attr_dev(input16, "class", "form-control");
    			attr_dev(input16, "placeholder", "Ingresar descripcion");
    			input16.required = true;
    			add_location(input16, file$b, 1204, 54, 63174);
    			attr_dev(div72, "class", "mb-3");
    			add_location(div72, file$b, 1199, 51, 62800);
    			attr_dev(label14, "for", "slug-field");
    			attr_dev(label14, "class", "form-label");
    			add_location(label14, file$b, 1215, 54, 63940);
    			attr_dev(input17, "type", "text");
    			attr_dev(input17, "id", "slug-field");
    			attr_dev(input17, "class", "form-control");
    			attr_dev(input17, "name", "slug");
    			attr_dev(input17, "placeholder", "Ingresar Teléfono");
    			input17.required = true;
    			add_location(input17, file$b, 1219, 54, 64226);
    			attr_dev(div73, "class", "mb-3");
    			add_location(div73, file$b, 1214, 51, 63866);
    			attr_dev(button16, "type", "button");
    			attr_dev(button16, "class", "btn btn-danger");
    			attr_dev(button16, "data-bs-dismiss", "modal");
    			add_location(button16, file$b, 1232, 57, 65139);
    			attr_dev(button17, "type", "submit");
    			attr_dev(button17, "class", "btn btn-success");
    			attr_dev(button17, "id", "add-btn");
    			add_location(button17, file$b, 1237, 57, 65527);
    			attr_dev(div74, "class", "hstack gap-2 justify-content-end");
    			add_location(div74, file$b, 1230, 54, 64976);
    			attr_dev(div75, "class", "modal-footer");
    			add_location(div75, file$b, 1229, 51, 64894);
    			attr_dev(div76, "class", "modal-body");
    			add_location(div76, file$b, 1183, 48, 61695);
    			add_location(form4, file$b, 1182, 45, 61639);
    			attr_dev(div77, "class", "modal-content");
    			add_location(div77, file$b, 1167, 42, 60641);
    			attr_dev(div78, "class", "modal-dialog modal-dialog-centered");
    			add_location(div78, file$b, 1165, 39, 60506);
    			attr_dev(div79, "class", "modal fade");
    			attr_dev(div79, "id", "showModalEditarEtiqueta");
    			attr_dev(div79, "tabindex", "-1");
    			attr_dev(div79, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div79, "aria-hidden", "true");
    			add_location(div79, file$b, 1159, 36, 60143);
    			attr_dev(h55, "class", "modal-title");
    			attr_dev(h55, "id", "exampleModalLabel");
    			add_location(h55, file$b, 1263, 48, 67156);
    			attr_dev(button18, "type", "button");
    			attr_dev(button18, "class", "btn-close");
    			attr_dev(button18, "data-bs-dismiss", "modal");
    			attr_dev(button18, "aria-label", "Close");
    			attr_dev(button18, "id", "close-modal");
    			add_location(button18, file$b, 1268, 48, 67480);
    			attr_dev(div80, "class", "modal-header bg-light p-3");
    			add_location(div80, file$b, 1261, 45, 67018);
    			attr_dev(label15, "for", "name-field");
    			attr_dev(label15, "class", "form-label");
    			add_location(label15, file$b, 1278, 54, 68149);
    			attr_dev(input18, "type", "text");
    			attr_dev(input18, "id", "name-field");
    			attr_dev(input18, "class", "form-control");
    			attr_dev(input18, "placeholder", "Ingresar Nombre");
    			input18.required = true;
    			add_location(input18, file$b, 1282, 54, 68437);
    			attr_dev(div81, "class", "mb-3");
    			add_location(div81, file$b, 1277, 51, 68075);
    			attr_dev(label16, "for", "description-field");
    			attr_dev(label16, "class", "form-label");
    			add_location(label16, file$b, 1292, 54, 69099);
    			attr_dev(input19, "type", "text");
    			attr_dev(input19, "id", "description-field");
    			attr_dev(input19, "class", "form-control");
    			attr_dev(input19, "placeholder", "Ingresar descripcion");
    			input19.required = true;
    			add_location(input19, file$b, 1296, 54, 69399);
    			attr_dev(div82, "class", "mb-3");
    			add_location(div82, file$b, 1291, 51, 69025);
    			attr_dev(label17, "for", "slug-field");
    			attr_dev(label17, "class", "form-label");
    			add_location(label17, file$b, 1306, 54, 70080);
    			attr_dev(input20, "type", "text");
    			attr_dev(input20, "id", "slug-field");
    			attr_dev(input20, "class", "form-control");
    			attr_dev(input20, "placeholder", "Ingresar Teléfono");
    			input20.required = true;
    			add_location(input20, file$b, 1310, 54, 70366);
    			attr_dev(div83, "class", "mb-3");
    			add_location(div83, file$b, 1305, 51, 70006);
    			attr_dev(button19, "type", "button");
    			attr_dev(button19, "class", "btn btn-danger");
    			attr_dev(button19, "data-bs-dismiss", "modal");
    			add_location(button19, file$b, 1322, 57, 71201);
    			attr_dev(button20, "type", "submit");
    			attr_dev(button20, "class", "btn btn-success");
    			attr_dev(button20, "id", "add-btn");
    			add_location(button20, file$b, 1327, 57, 71589);
    			attr_dev(div84, "class", "hstack gap-2 justify-content-end");
    			add_location(div84, file$b, 1320, 54, 71038);
    			attr_dev(div85, "class", "modal-footer");
    			add_location(div85, file$b, 1319, 51, 70956);
    			attr_dev(input21, "type", "text");
    			input21.value = "create";
    			attr_dev(input21, "name", "action");
    			input21.hidden = true;
    			add_location(input21, file$b, 1335, 51, 72187);
    			attr_dev(div86, "class", "modal-body");
    			add_location(div86, file$b, 1276, 48, 67998);
    			add_location(form5, file$b, 1275, 45, 67942);
    			attr_dev(div87, "class", "modal-content");
    			add_location(div87, file$b, 1260, 42, 66944);
    			attr_dev(div88, "class", "modal-dialog modal-dialog-centered");
    			add_location(div88, file$b, 1258, 39, 66809);
    			attr_dev(div89, "class", "modal fade");
    			attr_dev(div89, "id", "showModalAñadirEtiqueta");
    			attr_dev(div89, "tabindex", "-1");
    			attr_dev(div89, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div89, "aria-hidden", "true");
    			add_location(div89, file$b, 1252, 36, 66446);
    			attr_dev(div90, "class", "table-responsive table-card mt-3 mb-1");
    			set_style(div90, "height", "200px");
    			set_style(div90, "overflow", "scroll");
    			add_location(div90, file$b, 1099, 33, 56132);
    			attr_dev(div91, "id", "customerList");
    			add_location(div91, file$b, 1082, 30, 55151);
    			attr_dev(div92, "class", "card-body");
    			add_location(div92, file$b, 1081, 27, 55096);
    			attr_dev(div93, "class", "card");
    			add_location(div93, file$b, 1075, 24, 54831);
    			attr_dev(div94, "class", "col-lg-12");
    			add_location(div94, file$b, 1074, 21, 54782);
    			attr_dev(div95, "class", "row");
    			add_location(div95, file$b, 1073, 18, 54742);
    			attr_dev(div96, "class", "container-fluid");
    			add_location(div96, file$b, 476, 15, 16415);
    			attr_dev(div97, "class", "page-content");
    			add_location(div97, file$b, 475, 12, 16372);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$b, 1365, 15, 73462);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$b, 1367, 15, 73585);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$b, 1369, 15, 73698);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$b, 1371, 15, 73808);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$b, 1373, 15, 73923);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$b, 1375, 15, 74040);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/prismjs/prism.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$b, 1377, 15, 74156);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/list.js/list.min.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$b, 1379, 15, 74259);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/libs/list.pagination.js/list.pagination.min.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$b, 1381, 15, 74365);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/pages/listjs.init.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$b, 1385, 15, 74532);
    			if (!src_url_equal(script10.src, script10_src_value = "http://localhost:8080/libs/sweetalert2/sweetalert2.min.js")) attr_dev(script10, "src", script10_src_value);
    			add_location(script10, file$b, 1389, 15, 74680);
    			if (!src_url_equal(script11.src, script11_src_value = "http://localhost:8080/js/app.js")) attr_dev(script11, "src", script11_src_value);
    			add_location(script11, file$b, 1393, 15, 74831);
    			add_location(div98, file$b, 1360, 12, 73227);
    			attr_dev(div99, "class", "main-content");
    			add_location(div99, file$b, 474, 9, 16332);
    			attr_dev(div100, "id", "layout-wrapper");
    			add_location(div100, file$b, 460, 6, 15777);
    			if (!src_url_equal(script12.src, script12_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script12, "src", script12_src_value);
    			add_location(script12, file$b, 1403, 9, 75152);
    			if (!src_url_equal(script13.src, script13_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script13, "src", script13_src_value);
    			add_location(script13, file$b, 1405, 9, 75263);
    			if (!src_url_equal(script14.src, script14_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script14, "src", script14_src_value);
    			add_location(script14, file$b, 1407, 9, 75364);
    			if (!src_url_equal(script15.src, script15_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script15, "src", script15_src_value);
    			add_location(script15, file$b, 1409, 9, 75462);
    			if (!src_url_equal(script16.src, script16_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script16, "src", script16_src_value);
    			add_location(script16, file$b, 1411, 9, 75565);
    			if (!src_url_equal(script17.src, script17_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script17, "src", script17_src_value);
    			add_location(script17, file$b, 1413, 9, 75670);
    			if (!src_url_equal(script18.src, script18_src_value = "http://localhost:8080/libs/prismjs/prism.js")) attr_dev(script18, "src", script18_src_value);
    			add_location(script18, file$b, 1415, 9, 75774);
    			if (!src_url_equal(script19.src, script19_src_value = "http://localhost:8080/libs/list.js/list.min.js")) attr_dev(script19, "src", script19_src_value);
    			add_location(script19, file$b, 1416, 9, 75852);
    			if (!src_url_equal(script20.src, script20_src_value = "http://localhost:8080/libs/list.pagination.js/list.pagination.min.js")) attr_dev(script20, "src", script20_src_value);
    			add_location(script20, file$b, 1417, 9, 75933);
    			if (!src_url_equal(script21.src, script21_src_value = "http://localhost:8080/js/pages/listjs.init.js")) attr_dev(script21, "src", script21_src_value);
    			add_location(script21, file$b, 1421, 9, 76082);
    			if (!src_url_equal(script22.src, script22_src_value = "http://localhost:8080/libs/sweetalert2/sweetalert2.min.js")) attr_dev(script22, "src", script22_src_value);
    			add_location(script22, file$b, 1424, 9, 76199);
    			if (!src_url_equal(script23.src, script23_src_value = "http://localhost:8080/js/app.js")) attr_dev(script23, "src", script23_src_value);
    			add_location(script23, file$b, 1428, 9, 76332);
    			add_location(div101, file$b, 1398, 6, 74947);
    			add_location(main, file$b, 458, 3, 15736);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div100);
    			mount_component(headerapp, div100, null);
    			append_dev(div100, t0);
    			append_dev(div100, div0);
    			mount_component(sidebar, div0, null);
    			append_dev(div100, t1);
    			append_dev(div100, div1);
    			append_dev(div100, t2);
    			append_dev(div100, div99);
    			append_dev(div99, div97);
    			append_dev(div97, div96);
    			append_dev(div96, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h40);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a);
    			append_dev(ol, t6);
    			append_dev(ol, li1);
    			append_dev(div96, t8);
    			append_dev(div96, div35);
    			append_dev(div35, div34);
    			append_dev(div34, div33);
    			append_dev(div33, div6);
    			append_dev(div6, h41);
    			append_dev(div33, t10);
    			append_dev(div33, div32);
    			append_dev(div32, div31);
    			append_dev(div31, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t11);
    			append_dev(div31, t12);
    			append_dev(div31, div30);
    			append_dev(div30, table0);
    			append_dev(table0, thead0);
    			append_dev(thead0, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t14);
    			append_dev(tr0, th1);
    			append_dev(tr0, t16);
    			append_dev(tr0, th2);
    			append_dev(tr0, t18);
    			append_dev(tr0, th3);
    			append_dev(table0, t20);
    			append_dev(table0, tbody0);
    			info.block.m(tbody0, info.anchor = null);
    			info.mount = () => tbody0;
    			info.anchor = null;
    			append_dev(div30, t21);
    			append_dev(div30, div19);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, div10);
    			append_dev(div10, h50);
    			append_dev(div10, t23);
    			append_dev(div10, button1);
    			append_dev(div17, t24);
    			append_dev(div17, form0);
    			append_dev(form0, div16);
    			append_dev(div16, div11);
    			append_dev(div11, label0);
    			append_dev(div11, t26);
    			append_dev(div11, input0);
    			set_input_value(input0, /*dataSingleSelected*/ ctx[0].name);
    			append_dev(div16, t27);
    			append_dev(div16, div12);
    			append_dev(div12, label1);
    			append_dev(div12, t29);
    			append_dev(div12, input1);
    			set_input_value(input1, /*dataSingleSelected*/ ctx[0].description);
    			append_dev(div16, t30);
    			append_dev(div16, div13);
    			append_dev(div13, label2);
    			append_dev(div13, t32);
    			append_dev(div13, input2);
    			set_input_value(input2, /*dataSingleSelected*/ ctx[0].slug);
    			append_dev(div16, t33);
    			append_dev(div16, div15);
    			append_dev(div15, div14);
    			append_dev(div14, button2);
    			append_dev(div14, t35);
    			append_dev(div14, button3);
    			append_dev(div16, t37);
    			append_dev(div16, input3);
    			append_dev(div16, t38);
    			append_dev(div16, input4);
    			append_dev(div30, t39);
    			append_dev(div30, div29);
    			append_dev(div29, div28);
    			append_dev(div28, div27);
    			append_dev(div27, div20);
    			append_dev(div20, h51);
    			append_dev(div20, t41);
    			append_dev(div20, button4);
    			append_dev(div27, t42);
    			append_dev(div27, form1);
    			append_dev(form1, div26);
    			append_dev(div26, div21);
    			append_dev(div21, label3);
    			append_dev(div21, t44);
    			append_dev(div21, input5);
    			set_input_value(input5, /*dataCreate*/ ctx[1].name);
    			append_dev(div26, t45);
    			append_dev(div26, div22);
    			append_dev(div22, label4);
    			append_dev(div22, t47);
    			append_dev(div22, input6);
    			set_input_value(input6, /*dataCreate*/ ctx[1].description);
    			append_dev(div26, t48);
    			append_dev(div26, div23);
    			append_dev(div23, label5);
    			append_dev(div23, t50);
    			append_dev(div23, input7);
    			set_input_value(input7, /*dataCreate*/ ctx[1].slug);
    			append_dev(div26, t51);
    			append_dev(div26, div25);
    			append_dev(div25, div24);
    			append_dev(div24, button5);
    			append_dev(div24, t53);
    			append_dev(div24, button6);
    			append_dev(div96, t55);
    			append_dev(div96, div65);
    			append_dev(div65, div64);
    			append_dev(div64, div63);
    			append_dev(div63, div36);
    			append_dev(div36, h42);
    			append_dev(div63, t57);
    			append_dev(div63, div62);
    			append_dev(div62, div61);
    			append_dev(div61, div39);
    			append_dev(div39, div38);
    			append_dev(div38, div37);
    			append_dev(div37, button7);
    			append_dev(button7, i1);
    			append_dev(button7, t58);
    			append_dev(div61, t59);
    			append_dev(div61, div60);
    			append_dev(div60, table1);
    			append_dev(table1, thead1);
    			append_dev(thead1, tr1);
    			append_dev(tr1, th4);
    			append_dev(tr1, t61);
    			append_dev(tr1, th5);
    			append_dev(tr1, t63);
    			append_dev(tr1, th6);
    			append_dev(tr1, t65);
    			append_dev(tr1, th7);
    			append_dev(table1, t67);
    			append_dev(table1, tbody1);
    			info_1.block.m(tbody1, info_1.anchor = null);
    			info_1.mount = () => tbody1;
    			info_1.anchor = null;
    			append_dev(div60, t68);
    			append_dev(div60, div49);
    			append_dev(div49, div48);
    			append_dev(div48, div47);
    			append_dev(div47, div40);
    			append_dev(div40, h52);
    			append_dev(div40, t70);
    			append_dev(div40, button8);
    			append_dev(div47, t71);
    			append_dev(div47, form2);
    			append_dev(form2, div46);
    			append_dev(div46, div41);
    			append_dev(div41, label6);
    			append_dev(div41, t73);
    			append_dev(div41, input8);
    			set_input_value(input8, /*dataSingleSelected*/ ctx[0].name);
    			append_dev(div46, t74);
    			append_dev(div46, div42);
    			append_dev(div42, label7);
    			append_dev(div42, t76);
    			append_dev(div42, input9);
    			set_input_value(input9, /*dataSingleSelected*/ ctx[0].description);
    			append_dev(div46, t77);
    			append_dev(div46, div43);
    			append_dev(div43, label8);
    			append_dev(div43, t79);
    			append_dev(div43, input10);
    			set_input_value(input10, /*dataSingleSelected*/ ctx[0].slug);
    			append_dev(div46, t80);
    			append_dev(div46, div45);
    			append_dev(div45, div44);
    			append_dev(div44, button9);
    			append_dev(div44, t82);
    			append_dev(div44, button10);
    			append_dev(div60, t84);
    			append_dev(div60, div59);
    			append_dev(div59, div58);
    			append_dev(div58, div57);
    			append_dev(div57, div50);
    			append_dev(div50, h53);
    			append_dev(div50, t86);
    			append_dev(div50, button11);
    			append_dev(div57, t87);
    			append_dev(div57, form3);
    			append_dev(form3, div56);
    			append_dev(div56, div51);
    			append_dev(div51, label9);
    			append_dev(div51, t89);
    			append_dev(div51, input11);
    			set_input_value(input11, /*dataCreate*/ ctx[1].name);
    			append_dev(div56, t90);
    			append_dev(div56, div52);
    			append_dev(div52, label10);
    			append_dev(div52, t92);
    			append_dev(div52, input12);
    			set_input_value(input12, /*dataCreate*/ ctx[1].description);
    			append_dev(div56, t93);
    			append_dev(div56, div53);
    			append_dev(div53, label11);
    			append_dev(div53, t95);
    			append_dev(div53, input13);
    			set_input_value(input13, /*dataCreate*/ ctx[1].slug);
    			append_dev(div56, t96);
    			append_dev(div56, div55);
    			append_dev(div55, div54);
    			append_dev(div54, button12);
    			append_dev(div54, t98);
    			append_dev(div54, button13);
    			append_dev(div56, t100);
    			append_dev(div56, input14);
    			append_dev(div96, t101);
    			append_dev(div96, div95);
    			append_dev(div95, div94);
    			append_dev(div94, div93);
    			append_dev(div93, div66);
    			append_dev(div66, h43);
    			append_dev(div93, t103);
    			append_dev(div93, div92);
    			append_dev(div92, div91);
    			append_dev(div91, div69);
    			append_dev(div69, div68);
    			append_dev(div68, div67);
    			append_dev(div67, button14);
    			append_dev(button14, i2);
    			append_dev(button14, t104);
    			append_dev(div91, t105);
    			append_dev(div91, div90);
    			append_dev(div90, table2);
    			append_dev(table2, thead2);
    			append_dev(thead2, tr2);
    			append_dev(tr2, th8);
    			append_dev(tr2, t107);
    			append_dev(tr2, th9);
    			append_dev(tr2, t109);
    			append_dev(tr2, th10);
    			append_dev(tr2, t111);
    			append_dev(tr2, th11);
    			append_dev(table2, t113);
    			append_dev(table2, tbody2);
    			info_2.block.m(tbody2, info_2.anchor = null);
    			info_2.mount = () => tbody2;
    			info_2.anchor = null;
    			append_dev(div90, t114);
    			append_dev(div90, div79);
    			append_dev(div79, div78);
    			append_dev(div78, div77);
    			append_dev(div77, div70);
    			append_dev(div70, h54);
    			append_dev(div70, t116);
    			append_dev(div70, button15);
    			append_dev(div77, t117);
    			append_dev(div77, form4);
    			append_dev(form4, div76);
    			append_dev(div76, div71);
    			append_dev(div71, label12);
    			append_dev(div71, t119);
    			append_dev(div71, input15);
    			set_input_value(input15, /*dataSingleSelected*/ ctx[0].name);
    			append_dev(div76, t120);
    			append_dev(div76, div72);
    			append_dev(div72, label13);
    			append_dev(div72, t122);
    			append_dev(div72, input16);
    			set_input_value(input16, /*dataSingleSelected*/ ctx[0].description);
    			append_dev(div76, t123);
    			append_dev(div76, div73);
    			append_dev(div73, label14);
    			append_dev(div73, t125);
    			append_dev(div73, input17);
    			set_input_value(input17, /*dataSingleSelected*/ ctx[0].slug);
    			append_dev(div76, t126);
    			append_dev(div76, div75);
    			append_dev(div75, div74);
    			append_dev(div74, button16);
    			append_dev(div74, t128);
    			append_dev(div74, button17);
    			append_dev(div90, t130);
    			append_dev(div90, div89);
    			append_dev(div89, div88);
    			append_dev(div88, div87);
    			append_dev(div87, div80);
    			append_dev(div80, h55);
    			append_dev(div80, t132);
    			append_dev(div80, button18);
    			append_dev(div87, t133);
    			append_dev(div87, form5);
    			append_dev(form5, div86);
    			append_dev(div86, div81);
    			append_dev(div81, label15);
    			append_dev(div81, t135);
    			append_dev(div81, input18);
    			set_input_value(input18, /*dataCreate*/ ctx[1].name);
    			append_dev(div86, t136);
    			append_dev(div86, div82);
    			append_dev(div82, label16);
    			append_dev(div82, t138);
    			append_dev(div82, input19);
    			set_input_value(input19, /*dataCreate*/ ctx[1].description);
    			append_dev(div86, t139);
    			append_dev(div86, div83);
    			append_dev(div83, label17);
    			append_dev(div83, t141);
    			append_dev(div83, input20);
    			set_input_value(input20, /*dataCreate*/ ctx[1].slug);
    			append_dev(div86, t142);
    			append_dev(div86, div85);
    			append_dev(div85, div84);
    			append_dev(div84, button19);
    			append_dev(div84, t144);
    			append_dev(div84, button20);
    			append_dev(div86, t146);
    			append_dev(div86, input21);
    			append_dev(div99, t147);
    			append_dev(div99, div98);
    			append_dev(div98, script0);
    			append_dev(div98, t148);
    			append_dev(div98, script1);
    			append_dev(div98, t149);
    			append_dev(div98, script2);
    			append_dev(div98, t150);
    			append_dev(div98, script3);
    			append_dev(div98, t151);
    			append_dev(div98, script4);
    			append_dev(div98, t152);
    			append_dev(div98, script5);
    			append_dev(div98, t153);
    			append_dev(div98, script6);
    			append_dev(div98, t154);
    			append_dev(div98, script7);
    			append_dev(div98, t155);
    			append_dev(div98, script8);
    			append_dev(div98, t156);
    			append_dev(div98, script9);
    			append_dev(div98, t157);
    			append_dev(div98, script10);
    			append_dev(div98, t158);
    			append_dev(div98, script11);
    			append_dev(main, t159);
    			append_dev(main, div101);
    			append_dev(div101, script12);
    			append_dev(div101, t160);
    			append_dev(div101, script13);
    			append_dev(div101, t161);
    			append_dev(div101, script14);
    			append_dev(div101, t162);
    			append_dev(div101, script15);
    			append_dev(div101, t163);
    			append_dev(div101, script16);
    			append_dev(div101, t164);
    			append_dev(div101, script17);
    			append_dev(div101, t165);
    			append_dev(div101, script18);
    			append_dev(div101, t166);
    			append_dev(div101, script19);
    			append_dev(div101, t167);
    			append_dev(div101, script20);
    			append_dev(div101, t168);
    			append_dev(div101, script21);
    			append_dev(div101, t169);
    			append_dev(div101, script22);
    			append_dev(div101, t170);
    			append_dev(div101, script23);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[20]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[21]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[22]),
    					listen_dev(button3, "click", prevent_default(/*sendDataUpdateCategorias*/ ctx[12]), false, true, false),
    					listen_dev(input5, "input", /*input5_input_handler*/ ctx[23]),
    					listen_dev(input6, "input", /*input6_input_handler*/ ctx[24]),
    					listen_dev(input7, "input", /*input7_input_handler*/ ctx[25]),
    					listen_dev(button6, "click", /*sendDataCreateCategorias*/ ctx[9], false, false, false),
    					listen_dev(input8, "input", /*input8_input_handler*/ ctx[28]),
    					listen_dev(input9, "input", /*input9_input_handler*/ ctx[29]),
    					listen_dev(input10, "input", /*input10_input_handler*/ ctx[30]),
    					listen_dev(button10, "click", prevent_default(/*sendDataUpdateMarcas*/ ctx[13]), false, true, false),
    					listen_dev(input11, "input", /*input11_input_handler*/ ctx[31]),
    					listen_dev(input12, "input", /*input12_input_handler*/ ctx[32]),
    					listen_dev(input13, "input", /*input13_input_handler*/ ctx[33]),
    					listen_dev(button13, "click", /*sendDataCreateMarcas*/ ctx[10], false, false, false),
    					listen_dev(input15, "input", /*input15_input_handler*/ ctx[36]),
    					listen_dev(input16, "input", /*input16_input_handler*/ ctx[37]),
    					listen_dev(input17, "input", /*input17_input_handler*/ ctx[38]),
    					listen_dev(button17, "click", prevent_default(/*sendDataUpdateEtiquetas*/ ctx[14]), false, true, false),
    					listen_dev(input18, "input", /*input18_input_handler*/ ctx[39]),
    					listen_dev(input19, "input", /*input19_input_handler*/ ctx[40]),
    					listen_dev(input20, "input", /*input20_input_handler*/ ctx[41]),
    					listen_dev(button20, "click", /*sendDataCreateEtiquetas*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);

    			if (dirty[0] & /*dataSingleSelected*/ 1 && input0.value !== /*dataSingleSelected*/ ctx[0].name) {
    				set_input_value(input0, /*dataSingleSelected*/ ctx[0].name);
    			}

    			if (dirty[0] & /*dataSingleSelected*/ 1 && input1.value !== /*dataSingleSelected*/ ctx[0].description) {
    				set_input_value(input1, /*dataSingleSelected*/ ctx[0].description);
    			}

    			if (dirty[0] & /*dataSingleSelected*/ 1 && input2.value !== /*dataSingleSelected*/ ctx[0].slug) {
    				set_input_value(input2, /*dataSingleSelected*/ ctx[0].slug);
    			}

    			if (!current || dirty[0] & /*dataSingleSelected*/ 1 && input4_value_value !== (input4_value_value = /*dataSingleSelected*/ ctx[0].id) && input4.value !== input4_value_value) {
    				prop_dev(input4, "value", input4_value_value);
    			}

    			if (dirty[0] & /*dataCreate*/ 2 && input5.value !== /*dataCreate*/ ctx[1].name) {
    				set_input_value(input5, /*dataCreate*/ ctx[1].name);
    			}

    			if (dirty[0] & /*dataCreate*/ 2 && input6.value !== /*dataCreate*/ ctx[1].description) {
    				set_input_value(input6, /*dataCreate*/ ctx[1].description);
    			}

    			if (dirty[0] & /*dataCreate*/ 2 && input7.value !== /*dataCreate*/ ctx[1].slug) {
    				set_input_value(input7, /*dataCreate*/ ctx[1].slug);
    			}

    			update_await_block_branch(info_1, ctx, dirty);

    			if (dirty[0] & /*dataSingleSelected*/ 1 && input8.value !== /*dataSingleSelected*/ ctx[0].name) {
    				set_input_value(input8, /*dataSingleSelected*/ ctx[0].name);
    			}

    			if (dirty[0] & /*dataSingleSelected*/ 1 && input9.value !== /*dataSingleSelected*/ ctx[0].description) {
    				set_input_value(input9, /*dataSingleSelected*/ ctx[0].description);
    			}

    			if (dirty[0] & /*dataSingleSelected*/ 1 && input10.value !== /*dataSingleSelected*/ ctx[0].slug) {
    				set_input_value(input10, /*dataSingleSelected*/ ctx[0].slug);
    			}

    			if (dirty[0] & /*dataCreate*/ 2 && input11.value !== /*dataCreate*/ ctx[1].name) {
    				set_input_value(input11, /*dataCreate*/ ctx[1].name);
    			}

    			if (dirty[0] & /*dataCreate*/ 2 && input12.value !== /*dataCreate*/ ctx[1].description) {
    				set_input_value(input12, /*dataCreate*/ ctx[1].description);
    			}

    			if (dirty[0] & /*dataCreate*/ 2 && input13.value !== /*dataCreate*/ ctx[1].slug) {
    				set_input_value(input13, /*dataCreate*/ ctx[1].slug);
    			}

    			update_await_block_branch(info_2, ctx, dirty);

    			if (dirty[0] & /*dataSingleSelected*/ 1 && input15.value !== /*dataSingleSelected*/ ctx[0].name) {
    				set_input_value(input15, /*dataSingleSelected*/ ctx[0].name);
    			}

    			if (dirty[0] & /*dataSingleSelected*/ 1 && input16.value !== /*dataSingleSelected*/ ctx[0].description) {
    				set_input_value(input16, /*dataSingleSelected*/ ctx[0].description);
    			}

    			if (dirty[0] & /*dataSingleSelected*/ 1 && input17.value !== /*dataSingleSelected*/ ctx[0].slug) {
    				set_input_value(input17, /*dataSingleSelected*/ ctx[0].slug);
    			}

    			if (dirty[0] & /*dataCreate*/ 2 && input18.value !== /*dataCreate*/ ctx[1].name) {
    				set_input_value(input18, /*dataCreate*/ ctx[1].name);
    			}

    			if (dirty[0] & /*dataCreate*/ 2 && input19.value !== /*dataCreate*/ ctx[1].description) {
    				set_input_value(input19, /*dataCreate*/ ctx[1].description);
    			}

    			if (dirty[0] & /*dataCreate*/ 2 && input20.value !== /*dataCreate*/ ctx[1].slug) {
    				set_input_value(input20, /*dataCreate*/ ctx[1].slug);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    			info_1.block.d();
    			info_1.token = null;
    			info_1 = null;
    			info_2.block.d();
    			info_2.token = null;
    			info_2 = null;
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$3.name,
    		type: "then",
    		source: "(458:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (580:42) {:catch error}
    function create_catch_block_2$1(ctx) {
    	let t_value = /*error*/ ctx[50] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_2$1.name,
    		type: "catch",
    		source: "(580:42) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (545:42) {:then data}
    function create_then_block_3(ctx) {
    	let each_1_anchor;
    	let each_value_2 = /*data*/ ctx[46];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*deleteCategoria, getCategories, getSingleCategorie*/ 32792) {
    				each_value_2 = /*data*/ ctx[46];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_3.name,
    		type: "then",
    		source: "(545:42) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (546:45) {#each data as categorie}
    function create_each_block_2$1(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*categorie*/ ctx[54].name + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*categorie*/ ctx[54].description + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*categorie*/ ctx[54].slug + "";
    	let t4;
    	let t5;
    	let td3;
    	let div2;
    	let div0;
    	let button0;
    	let t7;
    	let div1;
    	let button1;
    	let t9;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[18](/*categorie*/ ctx[54]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[19](/*categorie*/ ctx[54]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text(t4_value);
    			t5 = space();
    			td3 = element("td");
    			div2 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			button0.textContent = "Editar";
    			t7 = space();
    			div1 = element("div");
    			button1 = element("button");
    			button1.textContent = "Borrar";
    			t9 = space();
    			add_location(td0, file$b, 547, 51, 20158);
    			attr_dev(td1, "width", "100px");
    			add_location(td1, file$b, 548, 51, 20236);
    			add_location(td2, file$b, 550, 51, 20391);
    			attr_dev(button0, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "data-bs-target", "#showModalEditarCategoria");
    			add_location(button0, file$b, 554, 60, 20694);
    			attr_dev(div0, "class", "edit");
    			add_location(div0, file$b, 553, 57, 20614);
    			attr_dev(button1, "class", "btn btn-sm btn-danger remove-item-btn");
    			add_location(button1, file$b, 567, 60, 21754);
    			attr_dev(div1, "class", "remove");
    			attr_dev(div1, "id", "removeItemModal");
    			add_location(div1, file$b, 564, 57, 21529);
    			attr_dev(div2, "class", "d-flex gap-2");
    			add_location(div2, file$b, 552, 54, 20529);
    			add_location(td3, file$b, 551, 51, 20469);
    			add_location(tr, file$b, 546, 48, 20101);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, button0);
    			append_dev(div2, t7);
    			append_dev(div2, div1);
    			append_dev(div1, button1);
    			append_dev(tr, t9);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", click_handler, false, false, false),
    					listen_dev(button1, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(546:45) {#each data as categorie}",
    		ctx
    	});

    	return block;
    }

    // (543:66)                                                Loading...                                            {:then data}
    function create_pending_block_3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_3.name,
    		type: "pending",
    		source: "(543:66)                                                Loading...                                            {:then data}",
    		ctx
    	});

    	return block;
    }

    // (867:42) {:catch error}
    function create_catch_block_1$3(ctx) {
    	let t_value = /*error*/ ctx[50] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$3.name,
    		type: "catch",
    		source: "(867:42) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (832:42) {:then data}
    function create_then_block_2$1(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*data*/ ctx[46];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*deleteMarca, getBrands, getSingleBrand*/ 65632) {
    				each_value_1 = /*data*/ ctx[46];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_2$1.name,
    		type: "then",
    		source: "(832:42) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (833:45) {#each data as brand}
    function create_each_block_1$1(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*brand*/ ctx[51].name + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*brand*/ ctx[51].description + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*brand*/ ctx[51].slug + "";
    	let t4;
    	let t5;
    	let td3;
    	let div2;
    	let div0;
    	let button0;
    	let t7;
    	let div1;
    	let button1;
    	let t9;
    	let mounted;
    	let dispose;

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[26](/*brand*/ ctx[51]);
    	}

    	function click_handler_3() {
    		return /*click_handler_3*/ ctx[27](/*brand*/ ctx[51]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text(t4_value);
    			t5 = space();
    			td3 = element("td");
    			div2 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			button0.textContent = "Editar";
    			t7 = space();
    			div1 = element("div");
    			button1 = element("button");
    			button1.textContent = "Borrar";
    			t9 = space();
    			add_location(td0, file$b, 834, 51, 38818);
    			attr_dev(td1, "width", "100px");
    			add_location(td1, file$b, 835, 51, 38892);
    			add_location(td2, file$b, 837, 51, 39043);
    			attr_dev(button0, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "data-bs-target", "#showModalEditarMarca");
    			add_location(button0, file$b, 841, 60, 39342);
    			attr_dev(div0, "class", "edit");
    			add_location(div0, file$b, 840, 57, 39262);
    			attr_dev(button1, "class", "btn btn-sm btn-danger remove-item-btn");
    			add_location(button1, file$b, 854, 60, 40390);
    			attr_dev(div1, "class", "remove");
    			attr_dev(div1, "id", "removeItemModal");
    			add_location(div1, file$b, 851, 57, 40165);
    			attr_dev(div2, "class", "d-flex gap-2");
    			add_location(div2, file$b, 839, 54, 39177);
    			add_location(td3, file$b, 838, 51, 39117);
    			add_location(tr, file$b, 833, 48, 38761);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, button0);
    			append_dev(div2, t7);
    			append_dev(div2, div1);
    			append_dev(div1, button1);
    			append_dev(tr, t9);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", click_handler_2, false, false, false),
    					listen_dev(button1, "click", click_handler_3, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(833:45) {#each data as brand}",
    		ctx
    	});

    	return block;
    }

    // (830:62)                                                Loading...                                            {:then data}
    function create_pending_block_2$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_2$1.name,
    		type: "pending",
    		source: "(830:62)                                                Loading...                                            {:then data}",
    		ctx
    	});

    	return block;
    }

    // (1153:42) {:catch error}
    function create_catch_block$3(ctx) {
    	let t_value = /*error*/ ctx[50] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$3.name,
    		type: "catch",
    		source: "(1153:42) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (1118:42) {:then data}
    function create_then_block_1$3(ctx) {
    	let each_1_anchor;
    	let each_value = /*data*/ ctx[46];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*deleteEtiqueta, getTags, getSingleTag*/ 131456) {
    				each_value = /*data*/ ctx[46];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$3.name,
    		type: "then",
    		source: "(1118:42) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (1119:45) {#each data as tag}
    function create_each_block$4(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*tag*/ ctx[47].name + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*tag*/ ctx[47].description + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*tag*/ ctx[47].slug + "";
    	let t4;
    	let t5;
    	let td3;
    	let div2;
    	let div0;
    	let button0;
    	let t7;
    	let div1;
    	let button1;
    	let t9;
    	let mounted;
    	let dispose;

    	function click_handler_4() {
    		return /*click_handler_4*/ ctx[34](/*tag*/ ctx[47]);
    	}

    	function click_handler_5() {
    		return /*click_handler_5*/ ctx[35](/*tag*/ ctx[47]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text(t4_value);
    			t5 = space();
    			td3 = element("td");
    			div2 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			button0.textContent = "Editar";
    			t7 = space();
    			div1 = element("div");
    			button1 = element("button");
    			button1.textContent = "Borrar";
    			t9 = space();
    			add_location(td0, file$b, 1120, 51, 57409);
    			attr_dev(td1, "width", "100px");
    			add_location(td1, file$b, 1121, 51, 57481);
    			add_location(td2, file$b, 1123, 51, 57630);
    			attr_dev(button0, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "data-bs-target", "#showModalEditarEtiqueta");
    			add_location(button0, file$b, 1127, 60, 57927);
    			attr_dev(div0, "class", "edit");
    			add_location(div0, file$b, 1126, 57, 57847);
    			attr_dev(button1, "class", "btn btn-sm btn-danger remove-item-btn");
    			add_location(button1, file$b, 1140, 60, 58974);
    			attr_dev(div1, "class", "remove");
    			attr_dev(div1, "id", "removeItemModal");
    			add_location(div1, file$b, 1137, 57, 58749);
    			attr_dev(div2, "class", "d-flex gap-2");
    			add_location(div2, file$b, 1125, 54, 57762);
    			add_location(td3, file$b, 1124, 51, 57702);
    			add_location(tr, file$b, 1119, 48, 57352);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, button0);
    			append_dev(div2, t7);
    			append_dev(div2, div1);
    			append_dev(div1, button1);
    			append_dev(tr, t9);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", click_handler_4, false, false, false),
    					listen_dev(button1, "click", click_handler_5, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(1119:45) {#each data as tag}",
    		ctx
    	});

    	return block;
    }

    // (1116:60)                                                Loading...                                            {:then data}
    function create_pending_block_1$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$3.name,
    		type: "pending",
    		source: "(1116:60)                                                Loading...                                            {:then data}",
    		ctx
    	});

    	return block;
    }

    // (456:28)      Loading Header...  {:then data}
    function create_pending_block$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading Header...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$3.name,
    		type: "pending",
    		source: "(456:28)      Loading Header...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let t0;
    	let link0;
    	let link1;
    	let script;
    	let script_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t1;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$3,
    		then: create_then_block$3,
    		catch: create_catch_block_3,
    		value: 46,
    		error: 50,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[2](), info);

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			link0 = element("link");
    			link1 = element("link");
    			script = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t1 = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Vista Detalle Categoría";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$b, 423, 3, 14761);
    			attr_dev(link1, "href", "http://localhost:8080/libs/sweetalert2/sweetalert2.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$b, 426, 3, 14872);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$b, 432, 3, 15037);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$b, 434, 3, 15127);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$b, 439, 3, 15268);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$b, 444, 3, 15402);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$b, 449, 3, 15537);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(42, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Catalogos', slots, []);
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = "/";
    	}

    	let myHeaders = new Headers();
    	myHeaders.append("Authorization", `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	let requestOptions = {
    		method: "GET",
    		headers: myHeaders,
    		redirect: "follow"
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	//    Categorias calls
    	async function getCategories() {
    		const response = await fetch("https://crud.jonathansoto.mx/api/categories", requestOptions);
    		const data = await response.json();
    		return data.data;
    	}

    	const dataSingleSelected = {
    		action: "update",
    		id: 0,
    		name: "",
    		description: "",
    		slug: ""
    	};

    	async function getSingleCategorie(id) {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/categories/${id}`, requestOptions);
    		const data = await response.json();
    		$$invalidate(0, dataSingleSelected.id = data.data.id, dataSingleSelected);
    		$$invalidate(0, dataSingleSelected.name = data.data.name, dataSingleSelected);
    		$$invalidate(0, dataSingleSelected.description = data.data.description, dataSingleSelected);
    		$$invalidate(0, dataSingleSelected.slug = data.data.slug, dataSingleSelected);
    		console.log(dataSingleSelected);
    		return data.data;
    	}

    	// =================================================
    	//   Marcas calls
    	async function getBrands() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/brands`, requestOptions);
    		const data = await response.json();
    		return data.data;
    	}

    	async function getSingleBrand(id) {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/brands/${id}`, requestOptions);
    		const data = await response.json();
    		$$invalidate(0, dataSingleSelected.id = data.data.id, dataSingleSelected);
    		$$invalidate(0, dataSingleSelected.name = data.data.name, dataSingleSelected);
    		$$invalidate(0, dataSingleSelected.description = data.data.description, dataSingleSelected);
    		$$invalidate(0, dataSingleSelected.slug = data.data.slug, dataSingleSelected);
    		return data.data;
    	}

    	// =================================================
    	//  Etiquetas calls
    	async function getTags() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/tags`, requestOptions);
    		const data = await response.json();
    		return data.data;
    	}

    	async function getSingleTag(id) {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/tags/${id}`, requestOptions);
    		const data = await response.json();
    		$$invalidate(0, dataSingleSelected.id = data.data.id, dataSingleSelected);
    		$$invalidate(0, dataSingleSelected.name = data.data.name, dataSingleSelected);
    		$$invalidate(0, dataSingleSelected.description = data.data.description, dataSingleSelected);
    		$$invalidate(0, dataSingleSelected.slug = data.data.slug, dataSingleSelected);
    		return data.data;
    	}

    	// ======================================================================
    	// Creacion  de Categorias - Marcas - Etiquetas
    	// ======================================================================
    	const dataCreate = { name: "", description: "", slug: "" };

    	async function sendDataCreateCategorias() {
    		const bodyForm = new FormData();
    		bodyForm.append("action", "create");
    		bodyForm.append("name", dataCreate.name);
    		bodyForm.append("description", dataCreate.description);
    		bodyForm.append("slug", dataCreate.slug);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/CategoriesController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Se añadio correctamente",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "info",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						$$invalidate(1, dataCreate.name = "", dataCreate);
    						$$invalidate(1, dataCreate.description = "", dataCreate);
    						$$invalidate(1, dataCreate.slug = "", dataCreate);
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	async function sendDataCreateMarcas() {
    		const bodyForm = new FormData();
    		bodyForm.append("action", "create");
    		bodyForm.append("name", dataCreate.name);
    		bodyForm.append("description", dataCreate.description);
    		bodyForm.append("slug", dataCreate.slug);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/BrandsController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Creacion completada",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "info",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						$$invalidate(1, dataCreate.name = "", dataCreate);
    						$$invalidate(1, dataCreate.description = "", dataCreate);
    						$$invalidate(1, dataCreate.slug = "", dataCreate);
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	async function sendDataCreateEtiquetas() {
    		const bodyForm = new FormData();
    		bodyForm.append("action", "create");
    		bodyForm.append("name", dataCreate.name);
    		bodyForm.append("description", dataCreate.description);
    		bodyForm.append("slug", dataCreate.slug);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/TagsController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Creacion completada",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "info",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						$$invalidate(1, dataCreate.name = "", dataCreate);
    						$$invalidate(1, dataCreate.description = "", dataCreate);
    						$$invalidate(1, dataCreate.slug = "", dataCreate);
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	// ======================================================================
    	// Edicion de Categorias - Marcas - Etiquetas
    	// ======================================================================
    	async function sendDataUpdateCategorias() {
    		const bodyForm = new FormData();
    		bodyForm.append("action", dataSingleSelected.action);
    		bodyForm.append("name", dataSingleSelected.name);
    		bodyForm.append("description", dataSingleSelected.description);
    		bodyForm.append("slug", dataSingleSelected.slug);
    		bodyForm.append("id", dataSingleSelected.id);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/CategoriesController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Edicion completada",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "info",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	async function sendDataUpdateMarcas() {
    		const bodyForm = new FormData();
    		bodyForm.append("action", dataSingleSelected.action);
    		bodyForm.append("name", dataSingleSelected.name);
    		bodyForm.append("description", dataSingleSelected.description);
    		bodyForm.append("slug", dataSingleSelected.slug);
    		bodyForm.append("id", dataSingleSelected.id);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/BrandsController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Edicion completada",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "info",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	async function sendDataUpdateEtiquetas() {
    		const bodyForm = new FormData();
    		bodyForm.append("action", dataSingleSelected.action);
    		bodyForm.append("name", dataSingleSelected.name);
    		bodyForm.append("description", dataSingleSelected.description);
    		bodyForm.append("slug", dataSingleSelected.slug);
    		bodyForm.append("id", dataSingleSelected.id);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/TagsController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Edicion completada",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "info",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	// ====================================================================
    	// Eliminaacion de Categorias - Marcas - Etiquetas
    	// ====================================================================
    	async function deleteCategoria(id) {
    		const bodyForm = new FormData();
    		bodyForm.append("action", "delete");
    		bodyForm.append("id", id);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/CategoriesController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Se elimino la categoria",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "error",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	async function deleteMarca(id) {
    		const bodyForm = new FormData();
    		bodyForm.append("action", "delete");
    		bodyForm.append("id", id);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/BrandsController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Se elimino la marca",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "error",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	async function deleteEtiqueta(id) {
    		const bodyForm = new FormData();
    		bodyForm.append("action", "delete");
    		bodyForm.append("id", id);

    		axios.post("https://newphpecommercejona.herokuapp.com/app/TagsController.php", bodyForm).then(function (response) {
    			if (response) {
    				console.log(response);

    				sweetalert2_all.fire({
    					title: "Se elimino la etiqueta",
    					text: "Se recargara la pagina para reflejar los cambios",
    					icon: "error",
    					showCancelButton: false,
    					confirmButtonText: "Aceptar"
    				}).then(result => {
    					if (result.value) {
    						location.href = "/catalogos";
    					}
    				});
    			} else {
    				console.log("Nel");
    			}
    		}).catch(resp => console.log(resp));
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Catalogos> was created with unknown prop '${key}'`);
    	});

    	const click_handler = categorie => getSingleCategorie(categorie.id);
    	const click_handler_1 = categorie => deleteCategoria(categorie.id);

    	function input0_input_handler() {
    		dataSingleSelected.name = this.value;
    		$$invalidate(0, dataSingleSelected);
    	}

    	function input1_input_handler() {
    		dataSingleSelected.description = this.value;
    		$$invalidate(0, dataSingleSelected);
    	}

    	function input2_input_handler() {
    		dataSingleSelected.slug = this.value;
    		$$invalidate(0, dataSingleSelected);
    	}

    	function input5_input_handler() {
    		dataCreate.name = this.value;
    		$$invalidate(1, dataCreate);
    	}

    	function input6_input_handler() {
    		dataCreate.description = this.value;
    		$$invalidate(1, dataCreate);
    	}

    	function input7_input_handler() {
    		dataCreate.slug = this.value;
    		$$invalidate(1, dataCreate);
    	}

    	const click_handler_2 = brand => getSingleBrand(brand.id);
    	const click_handler_3 = brand => deleteMarca(brand.id);

    	function input8_input_handler() {
    		dataSingleSelected.name = this.value;
    		$$invalidate(0, dataSingleSelected);
    	}

    	function input9_input_handler() {
    		dataSingleSelected.description = this.value;
    		$$invalidate(0, dataSingleSelected);
    	}

    	function input10_input_handler() {
    		dataSingleSelected.slug = this.value;
    		$$invalidate(0, dataSingleSelected);
    	}

    	function input11_input_handler() {
    		dataCreate.name = this.value;
    		$$invalidate(1, dataCreate);
    	}

    	function input12_input_handler() {
    		dataCreate.description = this.value;
    		$$invalidate(1, dataCreate);
    	}

    	function input13_input_handler() {
    		dataCreate.slug = this.value;
    		$$invalidate(1, dataCreate);
    	}

    	const click_handler_4 = tag => getSingleTag(tag.id);
    	const click_handler_5 = tag => deleteEtiqueta(tag.id);

    	function input15_input_handler() {
    		dataSingleSelected.name = this.value;
    		$$invalidate(0, dataSingleSelected);
    	}

    	function input16_input_handler() {
    		dataSingleSelected.description = this.value;
    		$$invalidate(0, dataSingleSelected);
    	}

    	function input17_input_handler() {
    		dataSingleSelected.slug = this.value;
    		$$invalidate(0, dataSingleSelected);
    	}

    	function input18_input_handler() {
    		dataCreate.name = this.value;
    		$$invalidate(1, dataCreate);
    	}

    	function input19_input_handler() {
    		dataCreate.description = this.value;
    		$$invalidate(1, dataCreate);
    	}

    	function input20_input_handler() {
    		dataCreate.slug = this.value;
    		$$invalidate(1, dataCreate);
    	}

    	$$self.$capture_state = () => ({
    		HeaderApp,
    		Sidebar,
    		Swal: sweetalert2_all,
    		axios,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		getCategories,
    		dataSingleSelected,
    		getSingleCategorie,
    		getBrands,
    		getSingleBrand,
    		getTags,
    		getSingleTag,
    		dataCreate,
    		sendDataCreateCategorias,
    		sendDataCreateMarcas,
    		sendDataCreateEtiquetas,
    		sendDataUpdateCategorias,
    		sendDataUpdateMarcas,
    		sendDataUpdateEtiquetas,
    		deleteCategoria,
    		deleteMarca,
    		deleteEtiqueta,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dataSingleSelected,
    		dataCreate,
    		getDataUserLoggin,
    		getCategories,
    		getSingleCategorie,
    		getBrands,
    		getSingleBrand,
    		getTags,
    		getSingleTag,
    		sendDataCreateCategorias,
    		sendDataCreateMarcas,
    		sendDataCreateEtiquetas,
    		sendDataUpdateCategorias,
    		sendDataUpdateMarcas,
    		sendDataUpdateEtiquetas,
    		deleteCategoria,
    		deleteMarca,
    		deleteEtiqueta,
    		click_handler,
    		click_handler_1,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input5_input_handler,
    		input6_input_handler,
    		input7_input_handler,
    		click_handler_2,
    		click_handler_3,
    		input8_input_handler,
    		input9_input_handler,
    		input10_input_handler,
    		input11_input_handler,
    		input12_input_handler,
    		input13_input_handler,
    		click_handler_4,
    		click_handler_5,
    		input15_input_handler,
    		input16_input_handler,
    		input17_input_handler,
    		input18_input_handler,
    		input19_input_handler,
    		input20_input_handler
    	];
    }

    class Catalogos extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Catalogos",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* node_modules\svelte-carousel\src\components\Dot\Dot.svelte generated by Svelte v3.52.0 */

    const file$a = "node_modules\\svelte-carousel\\src\\components\\Dot\\Dot.svelte";

    function create_fragment$a(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "sc-carousel-button sc-carousel-dot__dot svelte-yu7247");
    			toggle_class(button, "sc-carousel-dot__dot_active", /*active*/ ctx[0]);
    			add_location(button, file$a, 7, 0, 99);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*active*/ 1) {
    				toggle_class(button, "sc-carousel-dot__dot_active", /*active*/ ctx[0]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Dot', slots, []);
    	let { active = false } = $$props;
    	const writable_props = ['active'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Dot> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    	};

    	$$self.$capture_state = () => ({ active });

    	$$self.$inject_state = $$props => {
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [active, click_handler];
    }

    class Dot extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { active: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dot",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get active() {
    		throw new Error("<Dot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Dot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-carousel\src\components\Dots\Dots.svelte generated by Svelte v3.52.0 */
    const file$9 = "node_modules\\svelte-carousel\\src\\components\\Dots\\Dots.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (23:2) {#each Array(pagesCount) as _, pageIndex (pageIndex)}
    function create_each_block$3(key_1, ctx) {
    	let div;
    	let dot;
    	let t;
    	let current;

    	function click_handler() {
    		return /*click_handler*/ ctx[3](/*pageIndex*/ ctx[7]);
    	}

    	dot = new Dot({
    			props: {
    				active: /*currentPageIndex*/ ctx[1] === /*pageIndex*/ ctx[7]
    			},
    			$$inline: true
    		});

    	dot.$on("click", click_handler);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			create_component(dot.$$.fragment);
    			t = space();
    			attr_dev(div, "class", "sc-carousel-dots__dot-container svelte-1oj5bge");
    			add_location(div, file$9, 23, 4, 515);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(dot, div, null);
    			append_dev(div, t);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const dot_changes = {};
    			if (dirty & /*currentPageIndex, pagesCount*/ 3) dot_changes.active = /*currentPageIndex*/ ctx[1] === /*pageIndex*/ ctx[7];
    			dot.$set(dot_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dot.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dot.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(dot);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(23:2) {#each Array(pagesCount) as _, pageIndex (pageIndex)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = Array(/*pagesCount*/ ctx[0]);
    	validate_each_argument(each_value);
    	const get_key = ctx => /*pageIndex*/ ctx[7];
    	validate_each_keys(ctx, each_value, get_each_context$3, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$3(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "sc-carousel-dots__container svelte-1oj5bge");
    			add_location(div, file$9, 21, 0, 411);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*currentPageIndex, Array, pagesCount, handleDotClick*/ 7) {
    				each_value = Array(/*pagesCount*/ ctx[0]);
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$3, null, get_each_context$3);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Dots', slots, []);
    	const dispatch = createEventDispatcher();
    	let { pagesCount = 1 } = $$props;
    	let { currentPageIndex = 0 } = $$props;

    	function handleDotClick(pageIndex) {
    		dispatch('pageChange', pageIndex);
    	}

    	const writable_props = ['pagesCount', 'currentPageIndex'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Dots> was created with unknown prop '${key}'`);
    	});

    	const click_handler = pageIndex => handleDotClick(pageIndex);

    	$$self.$$set = $$props => {
    		if ('pagesCount' in $$props) $$invalidate(0, pagesCount = $$props.pagesCount);
    		if ('currentPageIndex' in $$props) $$invalidate(1, currentPageIndex = $$props.currentPageIndex);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		Dot,
    		dispatch,
    		pagesCount,
    		currentPageIndex,
    		handleDotClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('pagesCount' in $$props) $$invalidate(0, pagesCount = $$props.pagesCount);
    		if ('currentPageIndex' in $$props) $$invalidate(1, currentPageIndex = $$props.currentPageIndex);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [pagesCount, currentPageIndex, handleDotClick, click_handler];
    }

    class Dots extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { pagesCount: 0, currentPageIndex: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dots",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get pagesCount() {
    		throw new Error("<Dots>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pagesCount(value) {
    		throw new Error("<Dots>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentPageIndex() {
    		throw new Error("<Dots>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentPageIndex(value) {
    		throw new Error("<Dots>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const PREV = 'prev';
    const NEXT = 'next';

    /* node_modules\svelte-carousel\src\components\Arrow\Arrow.svelte generated by Svelte v3.52.0 */
    const file$8 = "node_modules\\svelte-carousel\\src\\components\\Arrow\\Arrow.svelte";

    function create_fragment$8(ctx) {
    	let button;
    	let i;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			i = element("i");
    			attr_dev(i, "class", "sc-carousel-arrow__arrow svelte-9ztt4p");
    			toggle_class(i, "sc-carousel-arrow__arrow-next", /*direction*/ ctx[0] === NEXT);
    			toggle_class(i, "sc-carousel-arrow__arrow-prev", /*direction*/ ctx[0] === PREV);
    			add_location(i, file$8, 19, 2, 393);
    			attr_dev(button, "class", "sc-carousel-button sc-carousel-arrow__circle svelte-9ztt4p");
    			toggle_class(button, "sc-carousel-arrow__circle_disabled", /*disabled*/ ctx[1]);
    			add_location(button, file$8, 14, 0, 256);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*direction, NEXT*/ 1) {
    				toggle_class(i, "sc-carousel-arrow__arrow-next", /*direction*/ ctx[0] === NEXT);
    			}

    			if (dirty & /*direction, PREV*/ 1) {
    				toggle_class(i, "sc-carousel-arrow__arrow-prev", /*direction*/ ctx[0] === PREV);
    			}

    			if (dirty & /*disabled*/ 2) {
    				toggle_class(button, "sc-carousel-arrow__circle_disabled", /*disabled*/ ctx[1]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Arrow', slots, []);
    	let { direction = NEXT } = $$props;
    	let { disabled = false } = $$props;
    	const writable_props = ['direction', 'disabled'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Arrow> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('direction' in $$props) $$invalidate(0, direction = $$props.direction);
    		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
    	};

    	$$self.$capture_state = () => ({ NEXT, PREV, direction, disabled });

    	$$self.$inject_state = $$props => {
    		if ('direction' in $$props) $$invalidate(0, direction = $$props.direction);
    		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [direction, disabled, click_handler];
    }

    class Arrow extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { direction: 0, disabled: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Arrow",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get direction() {
    		throw new Error("<Arrow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set direction(value) {
    		throw new Error("<Arrow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Arrow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Arrow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-carousel\src\components\Progress\Progress.svelte generated by Svelte v3.52.0 */

    const file$7 = "node_modules\\svelte-carousel\\src\\components\\Progress\\Progress.svelte";

    function create_fragment$7(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "sc-carousel-progress__indicator svelte-nuyenl");
    			set_style(div, "width", /*width*/ ctx[0] + "%");
    			add_location(div, file$7, 11, 0, 192);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*width*/ 1) {
    				set_style(div, "width", /*width*/ ctx[0] + "%");
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const MAX_PERCENT = 100;

    function instance$7($$self, $$props, $$invalidate) {
    	let width;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Progress', slots, []);
    	let { value = 0 } = $$props;
    	const writable_props = ['value'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Progress> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(1, value = $$props.value);
    	};

    	$$self.$capture_state = () => ({ MAX_PERCENT, value, width });

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(1, value = $$props.value);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 2) {
    			$$invalidate(0, width = Math.min(Math.max(value * MAX_PERCENT, 0), MAX_PERCENT));
    		}
    	};

    	return [width, value];
    }

    class Progress extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { value: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Progress",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get value() {
    		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // start event
    function addStartEventListener(source, cb) {
      source.addEventListener('mousedown', cb);
      source.addEventListener('touchstart', cb, { passive: true });
    }
    function removeStartEventListener(source, cb) {
      source.removeEventListener('mousedown', cb);
      source.removeEventListener('touchstart', cb);
    }

    // end event
    function addEndEventListener(source, cb) {
      source.addEventListener('mouseup', cb);
      source.addEventListener('touchend', cb);
    }
    function removeEndEventListener(source, cb) {
      source.removeEventListener('mouseup', cb);
      source.removeEventListener('touchend', cb);
    }

    // move event
    function addMoveEventListener(source, cb) {
      source.addEventListener('mousemove', cb);
      source.addEventListener('touchmove', cb);
    }
    function removeMoveEventListener(source, cb) {
      source.removeEventListener('mousemove', cb);
      source.removeEventListener('touchmove', cb);
    }

    function createDispatcher(source) {
      return function (event, data) {
        source.dispatchEvent(
          new CustomEvent(event, {
            detail: data,
          })
        );
      }
    }

    const TAP_DURATION_MS = 110;
    const TAP_MOVEMENT_PX = 9; // max movement during the tap, keep it small

    const SWIPE_MIN_DURATION_MS = 111;
    const SWIPE_MIN_DISTANCE_PX = 20;

    function getCoords(event) {
      if ('TouchEvent' in window && event instanceof TouchEvent) {
        const touch = event.touches[0];
        return {
          x: touch ? touch.clientX : 0,
          y: touch ? touch.clientY : 0,
        }
      }
      return {
        x: event.clientX,
        y: event.clientY,
      }
    }

    function swipeable(node, { thresholdProvider }) {
      const dispatch = createDispatcher(node);
      let x;
      let y;
      let moved = 0;
      let swipeStartedAt;
      let isTouching = false;

      function isValidSwipe() {
        const swipeDurationMs = Date.now() - swipeStartedAt;
        return swipeDurationMs >= SWIPE_MIN_DURATION_MS && Math.abs(moved) >= SWIPE_MIN_DISTANCE_PX
      }

      function handleDown(event) {
        swipeStartedAt = Date.now();
        moved = 0;
        isTouching = true;
        const coords = getCoords(event);
        x = coords.x;
        y = coords.y;
        dispatch('swipeStart', { x, y });
        addMoveEventListener(window, handleMove);
        addEndEventListener(window, handleUp);
      }

      function handleMove(event) {
        if (!isTouching) return
        const coords = getCoords(event);
        const dx = coords.x - x;
        const dy = coords.y - y;
        x = coords.x;
        y = coords.y;
        dispatch('swipeMove', { x, y, dx, dy });

        if (dx !== 0 && Math.sign(dx) !== Math.sign(moved)) {
          moved = 0;
        }
        moved += dx;
        if (Math.abs(moved) > thresholdProvider()) {
          dispatch('swipeThresholdReached', { direction: moved > 0 ? PREV : NEXT });
          removeEndEventListener(window, handleUp);
          removeMoveEventListener(window, handleMove);
        }
      }

      function handleUp(event) {
        removeEndEventListener(window, handleUp);
        removeMoveEventListener(window, handleMove);

        isTouching = false;

        if (!isValidSwipe()) {
          dispatch('swipeFailed');
          return
        }
        const coords = getCoords(event);
        dispatch('swipeEnd', { x: coords.x, y: coords.y });
      }

      addStartEventListener(node, handleDown);
      return {
        destroy() {
          removeStartEventListener(node, handleDown);
        },
      }
    }

    // in event
    function addHoverInEventListener(source, cb) {
      source.addEventListener('mouseenter', cb);
    }
    function removeHoverInEventListener(source, cb) {
      source.removeEventListener('mouseenter', cb);
    }

    // out event
    function addHoverOutEventListener(source, cb) {
      source.addEventListener('mouseleave', cb);
    }
    function removeHoverOutEventListener(source, cb) {
      source.removeEventListener('mouseleave', cb);
    }

    /**
     * hoverable events are for mouse events only
     */
    function hoverable(node) {
      const dispatch = createDispatcher(node);

      function handleHoverIn() {
        addHoverOutEventListener(node, handleHoverOut);
        dispatch('hovered', { value: true });
      }

      function handleHoverOut() {
        dispatch('hovered', { value: false });
        removeHoverOutEventListener(node, handleHoverOut);
      }

      addHoverInEventListener(node, handleHoverIn);
      
      return {
        destroy() {
          removeHoverInEventListener(node, handleHoverIn);
          removeHoverOutEventListener(node, handleHoverOut);
        },
      }
    }

    const getDistance = (p1, p2) => {
      const xDist = p2.x - p1.x;
      const yDist = p2.y - p1.y;

      return Math.sqrt((xDist * xDist) + (yDist * yDist));
    };

    function getValueInRange(min, value, max) {
      return Math.max(min, Math.min(value, max))
    }

    // tap start event
    function addFocusinEventListener(source, cb) {
      source.addEventListener('touchstart', cb, { passive: true });
    }
    function removeFocusinEventListener(source, cb) {
      source.removeEventListener('touchstart', cb);
    }

    // tap end event
    function addFocusoutEventListener(source, cb) {
      source.addEventListener('touchend', cb);
    }
    function removeFocusoutEventListener(source, cb) {
      source.removeEventListener('touchend', cb);
    }

    /**
     * tappable events are for touchable devices only
     */
    function tappable(node) {
      const dispatch = createDispatcher(node);

      let tapStartedAt = 0;
      let tapStartPos = { x: 0, y: 0 };

      function getIsValidTap({
        tapEndedAt,
        tapEndedPos
      }) {
        const tapTime = tapEndedAt - tapStartedAt;
        const tapDist = getDistance(tapStartPos, tapEndedPos);
        return (
          tapTime <= TAP_DURATION_MS &&
          tapDist <= TAP_MOVEMENT_PX
        )
      }

      function handleTapstart(event) {
        tapStartedAt = Date.now();

        const touch = event.touches[0];
        tapStartPos = { x: touch.clientX, y: touch.clientY };

        addFocusoutEventListener(node, handleTapend);
      }

      function handleTapend(event) {
        removeFocusoutEventListener(node, handleTapend);

        const touch = event.changedTouches[0];
        if (getIsValidTap({
          tapEndedAt: Date.now(),
          tapEndedPos: { x: touch.clientX, y: touch.clientY }
        })) {
          dispatch('tapped');
        }
      }

      addFocusinEventListener(node, handleTapstart);
      
      return {
        destroy() {
          removeFocusinEventListener(node, handleTapstart);
          removeFocusoutEventListener(node, handleTapend);
        },
      }
    }

    // getCurrentPageIndexByCurrentParticleIndex

    function _getCurrentPageIndexByCurrentParticleIndexInfinite({
      currentParticleIndex,
      particlesCount,
      clonesCountHead,
      clonesCountTotal,
      particlesToScroll,
    }) {
      if (currentParticleIndex === particlesCount - clonesCountHead) return 0
      if (currentParticleIndex === 0) return _getPagesCountByParticlesCountInfinite({
        particlesCountWithoutClones: particlesCount - clonesCountTotal,
        particlesToScroll,
      }) - 1
      return Math.floor((currentParticleIndex - clonesCountHead) / particlesToScroll)
    }

    function _getCurrentPageIndexByCurrentParticleIndexLimited({
      currentParticleIndex,
      particlesToScroll,
    }) {
      return Math.ceil(currentParticleIndex / particlesToScroll)
    }

    function getCurrentPageIndexByCurrentParticleIndex({
      currentParticleIndex,
      particlesCount,
      clonesCountHead,
      clonesCountTotal,
      infinite,
      particlesToScroll,
    }) {
      return infinite
        ? _getCurrentPageIndexByCurrentParticleIndexInfinite({
          currentParticleIndex,
          particlesCount,
          clonesCountHead,
          clonesCountTotal,
          particlesToScroll,
        })
        : _getCurrentPageIndexByCurrentParticleIndexLimited({
          currentParticleIndex,
          particlesToScroll,
        })
    }

    // getPagesCountByParticlesCount

    function _getPagesCountByParticlesCountInfinite({
      particlesCountWithoutClones,
      particlesToScroll,
    }) {
      return Math.ceil(particlesCountWithoutClones / particlesToScroll)
    }

    function _getPagesCountByParticlesCountLimited({
      particlesCountWithoutClones,
      particlesToScroll,
      particlesToShow,
    }) {
      const partialPageSize = getPartialPageSize({
        particlesCountWithoutClones,
        particlesToScroll,
        particlesToShow,
      });
      return Math.ceil(particlesCountWithoutClones / particlesToScroll) - partialPageSize
    }

    function getPagesCountByParticlesCount({
      infinite,
      particlesCountWithoutClones,
      particlesToScroll,
      particlesToShow,
    }) {
      return infinite
        ? _getPagesCountByParticlesCountInfinite({
          particlesCountWithoutClones,
          particlesToScroll,
        })
        : _getPagesCountByParticlesCountLimited({
          particlesCountWithoutClones,
          particlesToScroll,
          particlesToShow,
        })
    }

    // getParticleIndexByPageIndex

    function _getParticleIndexByPageIndexInfinite({
      pageIndex,
      clonesCountHead,
      clonesCountTail,
      particlesToScroll,
      particlesCount,
    }) {
      return getValueInRange(
        0,
        Math.min(clonesCountHead + pageIndex * particlesToScroll, particlesCount - clonesCountTail),
        particlesCount - 1
      )
    }

    function _getParticleIndexByPageIndexLimited({
      pageIndex,
      particlesToScroll,
      particlesCount,
      particlesToShow,
    }) {
      return getValueInRange(
        0,
        Math.min(pageIndex * particlesToScroll, particlesCount - particlesToShow),
        particlesCount - 1
      ) 
    }

    function getParticleIndexByPageIndex({
      infinite,
      pageIndex,
      clonesCountHead,
      clonesCountTail,
      particlesToScroll,
      particlesCount,
      particlesToShow,
    }) {
      return infinite
        ? _getParticleIndexByPageIndexInfinite({
          pageIndex,
          clonesCountHead,
          clonesCountTail,
          particlesToScroll,
          particlesCount,
        })
        : _getParticleIndexByPageIndexLimited({
          pageIndex,
          particlesToScroll,
          particlesCount,
          particlesToShow,
        })
    }

    function applyParticleSizes({
      particlesContainerChildren,
      particleWidth,
    }) {
      for (let particleIndex=0; particleIndex<particlesContainerChildren.length; particleIndex++) {
        particlesContainerChildren[particleIndex].style.minWidth = `${particleWidth}px`;
        particlesContainerChildren[particleIndex].style.maxWidth = `${particleWidth}px`;
      }
    }

    function getPartialPageSize({
      particlesToScroll,
      particlesToShow,
      particlesCountWithoutClones, 
    }) {
      const overlap = particlesToScroll - particlesToShow;
      let particlesCount = particlesToShow;

      while(true) {
        const diff = particlesCountWithoutClones - particlesCount - overlap;
        if (diff < particlesToShow) {
          return Math.max(diff, 0) // show: 2; scroll: 3, n: 5 => -1
        }
        particlesCount += particlesToShow + overlap;
      }
    }

    function createResizeObserver(onResize) {
      return new ResizeObserver(entries => {
        onResize({
          width: entries[0].contentRect.width,
        });
      });
    }

    function getClones({
      clonesCountHead,
      clonesCountTail,
      particlesContainerChildren,
    }) {
      // TODO: add fns to remove clones if needed
      const clonesToAppend = [];
      for (let i=0; i<clonesCountTail; i++) {
        clonesToAppend.push(particlesContainerChildren[i].cloneNode(true));
      }

      const clonesToPrepend = [];
      const len = particlesContainerChildren.length;
      for (let i=len-1; i>len-1-clonesCountHead; i--) {
        clonesToPrepend.push(particlesContainerChildren[i].cloneNode(true));
      }

      return {
        clonesToAppend,
        clonesToPrepend,
      }
    }

    function applyClones({
      particlesContainer,
      clonesToAppend,
      clonesToPrepend,
    }) {
      for (let i=0; i<clonesToAppend.length; i++) {
        particlesContainer.append(clonesToAppend[i]);
      }
      for (let i=0; i<clonesToPrepend.length; i++) {
        particlesContainer.prepend(clonesToPrepend[i]);
      }
    }

    function getClonesCount({
      infinite,
      particlesToShow,
      partialPageSize,
    }) {
      const clonesCount = infinite
        ? {
          // need to round with ceil as particlesToShow, particlesToShow can be floating (e.g. 1.5, 3.75)
          head: Math.ceil(partialPageSize || particlesToShow),
          tail: Math.ceil(particlesToShow),
        } : {
          head: 0,
          tail: 0,
        };

      return {
        ...clonesCount,
        total: clonesCount.head + clonesCount.tail,
      }
    }

    const get$1 = (object, fieldName, defaultValue) => {
      if (object && object.hasOwnProperty(fieldName)) {
        return object[fieldName]
      }
      if (defaultValue === undefined) {
        throw new Error(`Required arg "${fieldName}" was not provided`)
      }
      return defaultValue
    };

    const switcher = (description) => (key) => {
      description[key] && description[key]();
    };

    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /** `Object#toString` result references. */
    var funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        symbolTag = '[object Symbol]';

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        reLeadingDot = /^\./,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Checks if `value` is a host object in IE < 9.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
     */
    function isHostObject(value) {
      // Many host objects are `Object` objects that can coerce to strings
      // despite having improperly defined `toString` methods.
      var result = false;
      if (value != null && typeof value.toString != 'function') {
        try {
          result = !!(value + '');
        } catch (e) {}
      }
      return result;
    }

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Symbol$1 = root.Symbol,
        splice = arrayProto.splice;

    /* Built-in method references that are verified to be native. */
    var Map$1 = getNative(root, 'Map'),
        nativeCreate = getNative(Object, 'create');

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map$1 || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      return getMapData(this, key)['delete'](key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoize(function(string) {
      string = toString(string);

      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to process.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8-9 which returns 'object' for typed array and other constructors.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    var lodash_get = get;

    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    var lodash_clonedeep = createCommonjsModule(function (module, exports) {
    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    cloneableTags[boolTag] = cloneableTags[dateTag] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag] =
    cloneableTags[numberTag] = cloneableTags[objectTag] =
    cloneableTags[regexpTag] = cloneableTags[setTag] =
    cloneableTags[stringTag] = cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /**
     * Adds the key-value `pair` to `map`.
     *
     * @private
     * @param {Object} map The map to modify.
     * @param {Array} pair The key-value pair to add.
     * @returns {Object} Returns `map`.
     */
    function addMapEntry(map, pair) {
      // Don't return `map.set` because it's not chainable in IE 11.
      map.set(pair[0], pair[1]);
      return map;
    }

    /**
     * Adds `value` to `set`.
     *
     * @private
     * @param {Object} set The set to modify.
     * @param {*} value The value to add.
     * @returns {Object} Returns `set`.
     */
    function addSetEntry(set, value) {
      // Don't return `set.add` because it's not chainable in IE 11.
      set.add(value);
      return set;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array ? array.length : 0;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array ? array.length : 0;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Checks if `value` is a host object in IE < 9.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
     */
    function isHostObject(value) {
      // Many host objects are `Object` objects that can coerce to strings
      // despite having improperly defined `toString` methods.
      var result = false;
      if (value != null && typeof value.toString != 'function') {
        try {
          result = !!(value + '');
        } catch (e) {}
      }
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        Symbol = root.Symbol,
        Uint8Array = root.Uint8Array,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeKeys = overArg(Object.keys, Object);

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, 'DataView'),
        Map = getNative(root, 'Map'),
        Promise = getNative(root, 'Promise'),
        Set = getNative(root, 'Set'),
        WeakMap = getNative(root, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      return getMapData(this, key)['delete'](key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      return this.__data__['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
      // Safari 9 makes `arguments.length` enumerable in strict mode.
      var result = (isArray(value) || isArguments(value))
        ? baseTimes(value.length, String)
        : [];

      var length = result.length,
          skipIndexes = !!length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {boolean} [isFull] Specify a clone including symbols.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      return objectToString.call(value);
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        assignValue(object, key, newValue === undefined ? source[key] : newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * Creates an array of the own enumerable symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11,
    // for data views in Edge < 14, and promises in Node.js.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : undefined;

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to process.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true, true);
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8-9 which returns 'object' for typed array and other constructors.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    module.exports = cloneDeep;
    });

    /**
     * Lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright JS Foundation and other contributors <https://js.foundation/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    var lodash_isequal = createCommonjsModule(function (module, exports) {
    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        Symbol = root.Symbol,
        Uint8Array = root.Uint8Array,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeKeys = overArg(Object.keys, Object);

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, 'DataView'),
        Map = getNative(root, 'Map'),
        Promise = getNative(root, 'Promise'),
        Set = getNative(root, 'Set'),
        WeakMap = getNative(root, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    module.exports = isEqual;
    });

    const depsAreEqual = (deps1, deps2) => {
      return lodash_isequal(deps1, deps2)
    };

    const getDepNames = (deps) => {
      return Object.keys(deps || {})
    };

    const getUpdatedDeps = (depNames, currentData) => {
      const updatedDeps = {};
      depNames.forEach((depName) => {
        updatedDeps[depName] = currentData[depName];
      });
      return updatedDeps
    };

    const createSubscription = () => {
      const subscribers = {};

      const memoDependency = (target, dep) => {
        const { watcherName, fn } = target;
        const { prop, value } = dep;

        if (!subscribers[watcherName]) {
          subscribers[watcherName] = {
            deps: {},
            fn,
          };
        }
        subscribers[watcherName].deps[prop] = value;
      };

      return {
        subscribers,
        subscribe(target, dep) {
          if (target) {
            memoDependency(target, dep);
          }
        },
        notify(data, prop) {
          Object.entries(subscribers).forEach(([watchName, { deps, fn }]) => {
            const depNames = getDepNames(deps);

            if (depNames.includes(prop)) {
              const updatedDeps = getUpdatedDeps(depNames, data);
              if (!depsAreEqual(deps, updatedDeps)) {
                subscribers[watchName].deps = updatedDeps;
                fn();
              }
            }
          });
        },
      }
    };

    const createTargetWatcher = () => {
      let target = null;

      return {
        targetWatcher(watcherName, fn) {
          target = {
            watcherName,
            fn,
          };
          target.fn();
          target = null;
        },
        getTarget() {
          return target
        },
      }
    };

    function simplyReactive(entities, options) {
      const data = lodash_get(entities, 'data', {});
      const watch = lodash_get(entities, 'watch', {});
      const methods = lodash_get(entities, 'methods', {});
      const onChange = lodash_get(options, 'onChange', () => {});

      const { subscribe, notify, subscribers } = createSubscription();
      const { targetWatcher, getTarget } = createTargetWatcher();

      let _data;
      const _methods = {};
      const getContext = () => ({
        data: _data,
        methods: _methods,
      });

      let callingMethod = false;
      const methodWithFlags = (fn) => (...args) => {
        callingMethod = true;
        const result = fn(...args);
        callingMethod = false;
        return result
      };

      // init methods before data, as methods may be used in data
      Object.entries(methods).forEach(([methodName, methodItem]) => {
        _methods[methodName] = methodWithFlags((...args) =>
          methodItem(getContext(), ...args)
        );
        Object.defineProperty(_methods[methodName], 'name', { value: methodName });
      });

      _data = new Proxy(lodash_clonedeep(data), {
        get(target, prop) {
          if (getTarget() && !callingMethod) {
            subscribe(getTarget(), { prop, value: target[prop] });
          }
          return Reflect.get(...arguments)
        },
        set(target, prop, value) {
          // if value is the same, do nothing
          if (target[prop] === value) {
            return true
          }

          Reflect.set(...arguments);

          if (!getTarget()) {
            onChange && onChange(prop, value);
            notify(_data, prop);
          }

          return true
        },
      });

      Object.entries(watch).forEach(([watchName, watchItem]) => {
        targetWatcher(watchName, () => {
          watchItem(getContext());
        });
      });

      const output = [_data, _methods];
      output._internal = {
        _getSubscribers() {
          return subscribers
        },
      };

      return output
    }

    function getIndexesOfParticlesWithoutClonesInPage({
      pageIndex,
      particlesToShow,
      particlesToScroll,
      particlesCount,
    }) {
      const overlap = pageIndex === 0 ? 0 : particlesToShow - particlesToScroll;
      const from = pageIndex * particlesToShow - pageIndex * overlap;
      const to = from + Math.max(particlesToShow, particlesToScroll) - 1;
      const indexes = [];
      for (let i=from; i<=Math.min(particlesCount - 1, to); i++) {
        indexes.push(i);
      }
      return indexes
    }

    function getAdjacentIndexes({
      infinite,
      pageIndex,
      pagesCount,
      particlesCount,
      particlesToShow,
      particlesToScroll,
    }) {
      const _pageIndex = getValueInRange(0, pageIndex, pagesCount - 1);

      let rangeStart = _pageIndex - 1;
      let rangeEnd = _pageIndex + 1;

      rangeStart = infinite
        ? rangeStart < 0 ? pagesCount - 1 : rangeStart
        : Math.max(0, rangeStart);

      rangeEnd = infinite
        ? rangeEnd > pagesCount - 1 ? 0 : rangeEnd
        : Math.min(pagesCount - 1, rangeEnd);

      const pageIndexes = [...new Set([
        rangeStart,
        _pageIndex,
        rangeEnd,

        // because of these values outputs for infinite/non-infinites are the same
        0, // needed to clone first page particles
        pagesCount - 1, // needed to clone last page particles
      ])].sort((a, b) => a - b);
      const particleIndexes = pageIndexes.flatMap(
        pageIndex => getIndexesOfParticlesWithoutClonesInPage({
          pageIndex,
          particlesToShow,
          particlesToScroll,
          particlesCount,
        })
      );
      return {
        pageIndexes,
        particleIndexes: [...new Set(particleIndexes)].sort((a, b) => a - b),
      }
    }

    const setIntervalImmediate = (fn, ms) => {
      fn();
      return setInterval(fn, ms);
    };

    const STEP_MS = 35;
    const MAX_VALUE = 1;

    class ProgressManager {
      constructor({ onProgressValueChange }) {
        this._onProgressValueChange = onProgressValueChange;

        this._autoplayDuration;
        this._onProgressValueChange;
      
        this._interval;
        this._paused = false;
      }

      setAutoplayDuration(autoplayDuration) {
        this._autoplayDuration = autoplayDuration;
      }

      start(onFinish) {
        return new Promise((resolve) => {
          this.reset();

          const stepMs = Math.min(STEP_MS, Math.max(this._autoplayDuration, 1));
          let progress = -stepMs;
      
          this._interval = setIntervalImmediate(async () => {
            if (this._paused) {
              return
            }
            progress += stepMs;
      
            const value = progress / this._autoplayDuration;
            this._onProgressValueChange(value);
      
            if (value > MAX_VALUE) {
              this.reset();
              await onFinish();
              resolve();
            }
          }, stepMs);
        })
      }

      pause() {
        this._paused = true;
      }

      resume() {
        this._paused = false;
      }

      reset() {
        clearInterval(this._interval);
        this._onProgressValueChange(MAX_VALUE);
      }
    }

    function createCarousel(onChange) {
      const progressManager = new ProgressManager({
        onProgressValueChange: (value) => {
          onChange('progressValue', 1 - value);
        },
      });

      const reactive = simplyReactive(
        {
          data: {
            particlesCountWithoutClones: 0,
            particlesToShow: 1, // normalized
            particlesToShowInit: 1, // initial value
            particlesToScroll: 1, // normalized
            particlesToScrollInit: 1, // initial value
            particlesCount: 1,
            currentParticleIndex: 1,
            infinite: false,
            autoplayDuration: 1000,
            clonesCountHead: 0,
            clonesCountTail: 0,
            clonesCountTotal: 0,
            partialPageSize: 1,
            currentPageIndex: 1,
            pagesCount: 1,
            pauseOnFocus: false,
            focused: false,
            autoplay: false,
            autoplayDirection: 'next',
            disabled: false, // disable page change while animation is in progress
            durationMsInit: 1000,
            durationMs: 1000,
            offset: 0,
            particleWidth: 0,
            loaded: [],
          },
          watch: {
            setLoaded({ data }) {
              data.loaded = getAdjacentIndexes({
                infinite: data.infinite,
                pageIndex: data.currentPageIndex,
                pagesCount: data.pagesCount,
                particlesCount: data.particlesCountWithoutClones,
                particlesToShow: data.particlesToShow,
                particlesToScroll: data.particlesToScroll,
              }).particleIndexes;
            },
            setCurrentPageIndex({ data }) {
              data.currentPageIndex = getCurrentPageIndexByCurrentParticleIndex({
                currentParticleIndex: data.currentParticleIndex,
                particlesCount: data.particlesCount,
                clonesCountHead: data.clonesCountHead,
                clonesCountTotal: data.clonesCountTotal,
                infinite: data.infinite,
                particlesToScroll: data.particlesToScroll,
              });
            },
            setPartialPageSize({ data }) {
              data.partialPageSize = getPartialPageSize({
                particlesToScroll: data.particlesToScroll,
                particlesToShow: data.particlesToShow,
                particlesCountWithoutClones: data.particlesCountWithoutClones,
              });
            },
            setClonesCount({ data }) {
              const { head, tail } = getClonesCount({
                infinite: data.infinite,
                particlesToShow: data.particlesToShow,
                partialPageSize: data.partialPageSize,
              });
              data.clonesCountHead = head;
              data.clonesCountTail = tail;
              data.clonesCountTotal = head + tail;
            },
            setProgressManagerAutoplayDuration({ data }) {
              progressManager.setAutoplayDuration(data.autoplayDuration);
            },
            toggleProgressManager({ data: { pauseOnFocus, focused } }) {
              // as focused is in if block, it will not be put to deps, read them in data: {}
              if (pauseOnFocus) {
                if (focused) {
                  progressManager.pause();
                } else {
                  progressManager.resume();
                }
              }
            },
            initDuration({ data }) {
              data.durationMs = data.durationMsInit;
            },
            applyAutoplay({ data, methods: { _applyAutoplayIfNeeded } }) {
              // prevent _applyAutoplayIfNeeded to be called with watcher
              // to prevent its data added to deps
              data.autoplay && _applyAutoplayIfNeeded(data.autoplay);
            },
            setPagesCount({ data }) {
              data.pagesCount = getPagesCountByParticlesCount({
                infinite: data.infinite,
                particlesCountWithoutClones: data.particlesCountWithoutClones,
                particlesToScroll: data.particlesToScroll,
                particlesToShow: data.particlesToShow,
              });
            },
            setParticlesToShow({ data }) {
              data.particlesToShow = getValueInRange(
                1,
                data.particlesToShowInit,
                data.particlesCountWithoutClones
              );
            },
            setParticlesToScroll({ data }) {
              data.particlesToScroll = getValueInRange(
                1,
                data.particlesToScrollInit,
                data.particlesCountWithoutClones
              );
            },
          },
          methods: {
            _prev({ data }) {
              data.currentParticleIndex = getParticleIndexByPageIndex({
                infinite: data.infinite,
                pageIndex: data.currentPageIndex - 1,
                clonesCountHead: data.clonesCountHead,
                clonesCountTail: data.clonesCountTail,
                particlesToScroll: data.particlesToScroll,
                particlesCount: data.particlesCount,
                particlesToShow: data.particlesToShow,
              });
            },
            _next({ data }) {
              data.currentParticleIndex = getParticleIndexByPageIndex({
                infinite: data.infinite,
                pageIndex: data.currentPageIndex + 1,
                clonesCountHead: data.clonesCountHead,
                clonesCountTail: data.clonesCountTail,
                particlesToScroll: data.particlesToScroll,
                particlesCount: data.particlesCount,
                particlesToShow: data.particlesToShow,
              });
            },
            _moveToParticle({ data }, particleIndex) {
              data.currentParticleIndex = getValueInRange(
                0,
                particleIndex,
                data.particlesCount - 1
              );
            },
            toggleFocused({ data }) {
              data.focused = !data.focused;
            },
            async _applyAutoplayIfNeeded({ data, methods }) {
              // prevent progress change if not infinite for first and last page
              if (
                !data.infinite &&
                ((data.autoplayDirection === NEXT &&
                  data.currentParticleIndex === data.particlesCount - 1) ||
                  (data.autoplayDirection === PREV &&
                    data.currentParticleIndex === 0))
              ) {
                progressManager.reset();
                return
              }

              if (data.autoplay) {
                const onFinish = () =>
                  switcher({
                    [NEXT]: async () => methods.showNextPage(),
                    [PREV]: async () => methods.showPrevPage(),
                  })(data.autoplayDirection);

                await progressManager.start(onFinish);
              }
            },
            // makes delayed jump to 1st or last element
            async _jumpIfNeeded({ data, methods }) {
              let jumped = false;
              if (data.infinite) {
                if (data.currentParticleIndex === 0) {
                  await methods.showParticle(
                    data.particlesCount - data.clonesCountTotal,
                    {
                      animated: false,
                    }
                  );
                  jumped = true;
                } else if (
                  data.currentParticleIndex ===
                  data.particlesCount - data.clonesCountTail
                ) {
                  await methods.showParticle(data.clonesCountHead, {
                    animated: false,
                  });
                  jumped = true;
                }
              }
              return jumped
            },
            async changePage({ data, methods }, updateStoreFn, options) {
              progressManager.reset();
              if (data.disabled) return
              data.disabled = true;

              updateStoreFn();
              await methods.offsetPage({ animated: get$1(options, 'animated', true) });
              data.disabled = false;

              const jumped = await methods._jumpIfNeeded();
              !jumped && methods._applyAutoplayIfNeeded(); // no need to wait it finishes
            },
            async showNextPage({ data, methods }, options) {
              if (data.disabled) return
              await methods.changePage(methods._next, options);
            },
            async showPrevPage({ data, methods }, options) {
              if (data.disabled) return
              await methods.changePage(methods._prev, options);
            },
            async showParticle({ methods }, particleIndex, options) {
              await methods.changePage(
                () => methods._moveToParticle(particleIndex),
                options
              );
            },
            _getParticleIndexByPageIndex({ data }, pageIndex) {
              return getParticleIndexByPageIndex({
                infinite: data.infinite,
                pageIndex,
                clonesCountHead: data.clonesCountHead,
                clonesCountTail: data.clonesCountTail,
                particlesToScroll: data.particlesToScroll,
                particlesCount: data.particlesCount,
                particlesToShow: data.particlesToShow,
              })
            },
            async showPage({ methods }, pageIndex, options) {
              const particleIndex = methods._getParticleIndexByPageIndex(pageIndex);
              await methods.showParticle(particleIndex, options);
            },
            offsetPage({ data }, options) {
              const animated = get$1(options, 'animated', true);
              return new Promise((resolve) => {
                // durationMs is an offset animation time
                data.durationMs = animated ? data.durationMsInit : 0;
                data.offset = -data.currentParticleIndex * data.particleWidth;
                setTimeout(() => {
                  resolve();
                }, data.durationMs);
              })
            },
          },
        },
        {
          onChange,
        }
      );
      const [data, methods] = reactive;

      return [{ data, progressManager }, methods, reactive._internal]
    }

    /* node_modules\svelte-carousel\src\components\Carousel\Carousel.svelte generated by Svelte v3.52.0 */

    const { Error: Error_1 } = globals;
    const file$6 = "node_modules\\svelte-carousel\\src\\components\\Carousel\\Carousel.svelte";

    const get_dots_slot_changes = dirty => ({
    	currentPageIndex: dirty[0] & /*currentPageIndex*/ 32,
    	pagesCount: dirty[0] & /*pagesCount*/ 1024,
    	loaded: dirty[0] & /*loaded*/ 64
    });

    const get_dots_slot_context = ctx => ({
    	currentPageIndex: /*currentPageIndex*/ ctx[5],
    	pagesCount: /*pagesCount*/ ctx[10],
    	showPage: /*handlePageChange*/ ctx[15],
    	loaded: /*loaded*/ ctx[6]
    });

    const get_next_slot_changes = dirty => ({
    	loaded: dirty[0] & /*loaded*/ 64,
    	currentPageIndex: dirty[0] & /*currentPageIndex*/ 32
    });

    const get_next_slot_context = ctx => ({
    	showNextPage: /*methods*/ ctx[14].showNextPage,
    	loaded: /*loaded*/ ctx[6],
    	currentPageIndex: /*currentPageIndex*/ ctx[5]
    });

    const get_default_slot_changes = dirty => ({
    	loaded: dirty[0] & /*loaded*/ 64,
    	currentPageIndex: dirty[0] & /*currentPageIndex*/ 32
    });

    const get_default_slot_context = ctx => ({
    	loaded: /*loaded*/ ctx[6],
    	currentPageIndex: /*currentPageIndex*/ ctx[5]
    });

    const get_prev_slot_changes = dirty => ({
    	loaded: dirty[0] & /*loaded*/ 64,
    	currentPageIndex: dirty[0] & /*currentPageIndex*/ 32
    });

    const get_prev_slot_context = ctx => ({
    	showPrevPage: /*methods*/ ctx[14].showPrevPage,
    	loaded: /*loaded*/ ctx[6],
    	currentPageIndex: /*currentPageIndex*/ ctx[5]
    });

    // (259:4) {#if arrows}
    function create_if_block_3(ctx) {
    	let current;
    	const prev_slot_template = /*#slots*/ ctx[37].prev;
    	const prev_slot = create_slot(prev_slot_template, ctx, /*$$scope*/ ctx[36], get_prev_slot_context);
    	const prev_slot_or_fallback = prev_slot || fallback_block_2(ctx);

    	const block = {
    		c: function create() {
    			if (prev_slot_or_fallback) prev_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (prev_slot_or_fallback) {
    				prev_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (prev_slot) {
    				if (prev_slot.p && (!current || dirty[0] & /*loaded, currentPageIndex*/ 96 | dirty[1] & /*$$scope*/ 32)) {
    					update_slot_base(
    						prev_slot,
    						prev_slot_template,
    						ctx,
    						/*$$scope*/ ctx[36],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[36])
    						: get_slot_changes(prev_slot_template, /*$$scope*/ ctx[36], dirty, get_prev_slot_changes),
    						get_prev_slot_context
    					);
    				}
    			} else {
    				if (prev_slot_or_fallback && prev_slot_or_fallback.p && (!current || dirty[0] & /*infinite, currentPageIndex*/ 36)) {
    					prev_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prev_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prev_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (prev_slot_or_fallback) prev_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(259:4) {#if arrows}",
    		ctx
    	});

    	return block;
    }

    // (260:60)           
    function fallback_block_2(ctx) {
    	let div;
    	let arrow;
    	let current;

    	arrow = new Arrow({
    			props: {
    				direction: "prev",
    				disabled: !/*infinite*/ ctx[2] && /*currentPageIndex*/ ctx[5] === 0
    			},
    			$$inline: true
    		});

    	arrow.$on("click", /*showPrevPage*/ ctx[23]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(arrow.$$.fragment);
    			attr_dev(div, "class", "sc-carousel__arrow-container svelte-uwo0yk");
    			add_location(div, file$6, 260, 8, 6343);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(arrow, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const arrow_changes = {};
    			if (dirty[0] & /*infinite, currentPageIndex*/ 36) arrow_changes.disabled = !/*infinite*/ ctx[2] && /*currentPageIndex*/ ctx[5] === 0;
    			arrow.$set(arrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(arrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(arrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(arrow);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_2.name,
    		type: "fallback",
    		source: "(260:60)           ",
    		ctx
    	});

    	return block;
    }

    // (297:6) {#if autoplayProgressVisible}
    function create_if_block_2(ctx) {
    	let div;
    	let progress;
    	let current;

    	progress = new Progress({
    			props: { value: /*progressValue*/ ctx[7] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(progress.$$.fragment);
    			attr_dev(div, "class", "sc-carousel-progress__container svelte-uwo0yk");
    			add_location(div, file$6, 297, 8, 7492);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(progress, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const progress_changes = {};
    			if (dirty[0] & /*progressValue*/ 128) progress_changes.value = /*progressValue*/ ctx[7];
    			progress.$set(progress_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(progress.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(progress.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(progress);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(297:6) {#if autoplayProgressVisible}",
    		ctx
    	});

    	return block;
    }

    // (303:4) {#if arrows}
    function create_if_block_1(ctx) {
    	let current;
    	const next_slot_template = /*#slots*/ ctx[37].next;
    	const next_slot = create_slot(next_slot_template, ctx, /*$$scope*/ ctx[36], get_next_slot_context);
    	const next_slot_or_fallback = next_slot || fallback_block_1(ctx);

    	const block = {
    		c: function create() {
    			if (next_slot_or_fallback) next_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (next_slot_or_fallback) {
    				next_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (next_slot) {
    				if (next_slot.p && (!current || dirty[0] & /*loaded, currentPageIndex*/ 96 | dirty[1] & /*$$scope*/ 32)) {
    					update_slot_base(
    						next_slot,
    						next_slot_template,
    						ctx,
    						/*$$scope*/ ctx[36],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[36])
    						: get_slot_changes(next_slot_template, /*$$scope*/ ctx[36], dirty, get_next_slot_changes),
    						get_next_slot_context
    					);
    				}
    			} else {
    				if (next_slot_or_fallback && next_slot_or_fallback.p && (!current || dirty[0] & /*infinite, currentPageIndex, pagesCount*/ 1060)) {
    					next_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(next_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(next_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (next_slot_or_fallback) next_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(303:4) {#if arrows}",
    		ctx
    	});

    	return block;
    }

    // (304:60)           
    function fallback_block_1(ctx) {
    	let div;
    	let arrow;
    	let current;

    	arrow = new Arrow({
    			props: {
    				direction: "next",
    				disabled: !/*infinite*/ ctx[2] && /*currentPageIndex*/ ctx[5] === /*pagesCount*/ ctx[10] - 1
    			},
    			$$inline: true
    		});

    	arrow.$on("click", /*methods*/ ctx[14].showNextPage);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(arrow.$$.fragment);
    			attr_dev(div, "class", "sc-carousel__arrow-container svelte-uwo0yk");
    			add_location(div, file$6, 304, 8, 7714);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(arrow, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const arrow_changes = {};
    			if (dirty[0] & /*infinite, currentPageIndex, pagesCount*/ 1060) arrow_changes.disabled = !/*infinite*/ ctx[2] && /*currentPageIndex*/ ctx[5] === /*pagesCount*/ ctx[10] - 1;
    			arrow.$set(arrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(arrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(arrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(arrow);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1.name,
    		type: "fallback",
    		source: "(304:60)           ",
    		ctx
    	});

    	return block;
    }

    // (315:2) {#if dots}
    function create_if_block(ctx) {
    	let current;
    	const dots_slot_template = /*#slots*/ ctx[37].dots;
    	const dots_slot = create_slot(dots_slot_template, ctx, /*$$scope*/ ctx[36], get_dots_slot_context);
    	const dots_slot_or_fallback = dots_slot || fallback_block(ctx);

    	const block = {
    		c: function create() {
    			if (dots_slot_or_fallback) dots_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (dots_slot_or_fallback) {
    				dots_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dots_slot) {
    				if (dots_slot.p && (!current || dirty[0] & /*currentPageIndex, pagesCount, loaded*/ 1120 | dirty[1] & /*$$scope*/ 32)) {
    					update_slot_base(
    						dots_slot,
    						dots_slot_template,
    						ctx,
    						/*$$scope*/ ctx[36],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[36])
    						: get_slot_changes(dots_slot_template, /*$$scope*/ ctx[36], dirty, get_dots_slot_changes),
    						get_dots_slot_context
    					);
    				}
    			} else {
    				if (dots_slot_or_fallback && dots_slot_or_fallback.p && (!current || dirty[0] & /*pagesCount, currentPageIndex*/ 1056)) {
    					dots_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dots_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dots_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (dots_slot_or_fallback) dots_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(315:2) {#if dots}",
    		ctx
    	});

    	return block;
    }

    // (321:5)         
    function fallback_block(ctx) {
    	let dots_1;
    	let current;

    	dots_1 = new Dots({
    			props: {
    				pagesCount: /*pagesCount*/ ctx[10],
    				currentPageIndex: /*currentPageIndex*/ ctx[5]
    			},
    			$$inline: true
    		});

    	dots_1.$on("pageChange", /*pageChange_handler*/ ctx[41]);

    	const block = {
    		c: function create() {
    			create_component(dots_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dots_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const dots_1_changes = {};
    			if (dirty[0] & /*pagesCount*/ 1024) dots_1_changes.pagesCount = /*pagesCount*/ ctx[10];
    			if (dirty[0] & /*currentPageIndex*/ 32) dots_1_changes.currentPageIndex = /*currentPageIndex*/ ctx[5];
    			dots_1.$set(dots_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dots_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dots_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dots_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(321:5)         ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div3;
    	let div2;
    	let t0;
    	let div1;
    	let div0;
    	let swipeable_action;
    	let t1;
    	let t2;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*arrows*/ ctx[1] && create_if_block_3(ctx);
    	const default_slot_template = /*#slots*/ ctx[37].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[36], get_default_slot_context);
    	let if_block1 = /*autoplayProgressVisible*/ ctx[3] && create_if_block_2(ctx);
    	let if_block2 = /*arrows*/ ctx[1] && create_if_block_1(ctx);
    	let if_block3 = /*dots*/ ctx[4] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			if (if_block3) if_block3.c();
    			attr_dev(div0, "class", "sc-carousel__pages-container svelte-uwo0yk");
    			set_style(div0, "transform", "translateX(" + /*offset*/ ctx[8] + "px)");
    			set_style(div0, "transition-duration", /*durationMs*/ ctx[9] + "ms");
    			set_style(div0, "transition-timing-function", /*timingFunction*/ ctx[0]);
    			add_location(div0, file$6, 279, 6, 6800);
    			attr_dev(div1, "class", "sc-carousel__pages-window svelte-uwo0yk");
    			add_location(div1, file$6, 269, 4, 6592);
    			attr_dev(div2, "class", "sc-carousel__content-container svelte-uwo0yk");
    			add_location(div2, file$6, 257, 2, 6209);
    			attr_dev(div3, "class", "sc-carousel__carousel-container svelte-uwo0yk");
    			add_location(div3, file$6, 256, 0, 6160);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			if (if_block0) if_block0.m(div2, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			/*div0_binding*/ ctx[39](div0);
    			append_dev(div1, t1);
    			if (if_block1) if_block1.m(div1, null);
    			/*div1_binding*/ ctx[40](div1);
    			append_dev(div2, t2);
    			if (if_block2) if_block2.m(div2, null);
    			append_dev(div3, t3);
    			if (if_block3) if_block3.m(div3, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(swipeable_action = swipeable.call(null, div0, {
    						thresholdProvider: /*swipeable_function*/ ctx[38]
    					})),
    					listen_dev(div0, "swipeStart", /*handleSwipeStart*/ ctx[16], false, false, false),
    					listen_dev(div0, "swipeMove", /*handleSwipeMove*/ ctx[18], false, false, false),
    					listen_dev(div0, "swipeEnd", /*handleSwipeEnd*/ ctx[19], false, false, false),
    					listen_dev(div0, "swipeFailed", /*handleSwipeFailed*/ ctx[20], false, false, false),
    					listen_dev(div0, "swipeThresholdReached", /*handleSwipeThresholdReached*/ ctx[17], false, false, false),
    					action_destroyer(hoverable.call(null, div1)),
    					listen_dev(div1, "hovered", /*handleHovered*/ ctx[21], false, false, false),
    					action_destroyer(tappable.call(null, div1)),
    					listen_dev(div1, "tapped", /*handleTapped*/ ctx[22], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*arrows*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*arrows*/ 2) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div2, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*loaded, currentPageIndex*/ 96 | dirty[1] & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[36],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[36])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[36], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}

    			if (!current || dirty[0] & /*offset*/ 256) {
    				set_style(div0, "transform", "translateX(" + /*offset*/ ctx[8] + "px)");
    			}

    			if (!current || dirty[0] & /*durationMs*/ 512) {
    				set_style(div0, "transition-duration", /*durationMs*/ ctx[9] + "ms");
    			}

    			if (!current || dirty[0] & /*timingFunction*/ 1) {
    				set_style(div0, "transition-timing-function", /*timingFunction*/ ctx[0]);
    			}

    			if (swipeable_action && is_function(swipeable_action.update) && dirty[0] & /*pageWindowWidth*/ 2048) swipeable_action.update.call(null, {
    				thresholdProvider: /*swipeable_function*/ ctx[38]
    			});

    			if (/*autoplayProgressVisible*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*autoplayProgressVisible*/ 8) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*arrows*/ ctx[1]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*arrows*/ 2) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div2, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*dots*/ ctx[4]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*dots*/ 16) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div3, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(default_slot, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(default_slot, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block0) if_block0.d();
    			if (default_slot) default_slot.d(detaching);
    			/*div0_binding*/ ctx[39](null);
    			if (if_block1) if_block1.d();
    			/*div1_binding*/ ctx[40](null);
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Carousel', slots, ['prev','default','next','dots']);
    	let loaded = [];
    	let currentPageIndex;
    	let progressValue;
    	let offset = 0;
    	let durationMs = 0;
    	let pagesCount = 1;

    	const [{ data, progressManager }, methods, service] = createCarousel((key, value) => {
    		switcher({
    			'currentPageIndex': () => $$invalidate(5, currentPageIndex = value),
    			'progressValue': () => $$invalidate(7, progressValue = value),
    			'offset': () => $$invalidate(8, offset = value),
    			'durationMs': () => $$invalidate(9, durationMs = value),
    			'pagesCount': () => $$invalidate(10, pagesCount = value),
    			'loaded': () => $$invalidate(6, loaded = value)
    		})(key);
    	});

    	const dispatch = createEventDispatcher();
    	let { timingFunction = 'ease-in-out' } = $$props;
    	let { arrows = true } = $$props;
    	let { infinite = true } = $$props;
    	let { initialPageIndex = 0 } = $$props;
    	let { duration = 500 } = $$props;
    	let { autoplay = false } = $$props;
    	let { autoplayDuration = 3000 } = $$props;
    	let { autoplayDirection = NEXT } = $$props;
    	let { pauseOnFocus = false } = $$props;
    	let { autoplayProgressVisible = false } = $$props;
    	let { dots = true } = $$props;
    	let { swiping = true } = $$props;
    	let { particlesToShow = 1 } = $$props;
    	let { particlesToScroll = 1 } = $$props;

    	async function goTo(pageIndex, options) {
    		const animated = get$1(options, 'animated', true);

    		if (typeof pageIndex !== 'number') {
    			throw new Error('pageIndex should be a number');
    		}

    		await methods.showPage(pageIndex, { animated });
    	}

    	async function goToPrev(options) {
    		const animated = get$1(options, 'animated', true);
    		await methods.showPrevPage({ animated });
    	}

    	async function goToNext(options) {
    		const animated = get$1(options, 'animated', true);
    		await methods.showNextPage({ animated });
    	}

    	let pageWindowWidth = 0;
    	let pageWindowElement;
    	let particlesContainer;

    	const pageWindowElementResizeObserver = createResizeObserver(({ width }) => {
    		$$invalidate(11, pageWindowWidth = width);
    		data.particleWidth = pageWindowWidth / data.particlesToShow;

    		applyParticleSizes({
    			particlesContainerChildren: particlesContainer.children,
    			particleWidth: data.particleWidth
    		});

    		methods.offsetPage({ animated: false });
    	});

    	function addClones() {
    		const { clonesToAppend, clonesToPrepend } = getClones({
    			clonesCountHead: data.clonesCountHead,
    			clonesCountTail: data.clonesCountTail,
    			particlesContainerChildren: particlesContainer.children
    		});

    		applyClones({
    			particlesContainer,
    			clonesToAppend,
    			clonesToPrepend
    		});
    	}

    	onMount(() => {
    		(async () => {
    			await tick();

    			if (particlesContainer && pageWindowElement) {
    				data.particlesCountWithoutClones = particlesContainer.children.length;
    				await tick();
    				data.infinite && addClones();

    				// call after adding clones
    				data.particlesCount = particlesContainer.children.length;

    				methods.showPage(initialPageIndex, { animated: false });
    				pageWindowElementResizeObserver.observe(pageWindowElement);
    			}
    		})();
    	});

    	onDestroy(() => {
    		pageWindowElementResizeObserver.disconnect();
    		progressManager.reset();
    	});

    	async function handlePageChange(pageIndex) {
    		await methods.showPage(pageIndex, { animated: true });
    	}

    	// gestures
    	function handleSwipeStart() {
    		if (!swiping) return;
    		data.durationMs = 0;
    	}

    	async function handleSwipeThresholdReached(event) {
    		if (!swiping) return;

    		await switcher({
    			[NEXT]: methods.showNextPage,
    			[PREV]: methods.showPrevPage
    		})(event.detail.direction);
    	}

    	function handleSwipeMove(event) {
    		if (!swiping) return;
    		data.offset += event.detail.dx;
    	}

    	function handleSwipeEnd() {
    		if (!swiping) return;
    		methods.showParticle(data.currentParticleIndex);
    	}

    	async function handleSwipeFailed() {
    		if (!swiping) return;
    		await methods.offsetPage({ animated: true });
    	}

    	function handleHovered(event) {
    		data.focused = event.detail.value;
    	}

    	function handleTapped() {
    		methods.toggleFocused();
    	}

    	function showPrevPage() {
    		methods.showPrevPage();
    	}

    	const writable_props = [
    		'timingFunction',
    		'arrows',
    		'infinite',
    		'initialPageIndex',
    		'duration',
    		'autoplay',
    		'autoplayDuration',
    		'autoplayDirection',
    		'pauseOnFocus',
    		'autoplayProgressVisible',
    		'dots',
    		'swiping',
    		'particlesToShow',
    		'particlesToScroll'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Carousel> was created with unknown prop '${key}'`);
    	});

    	const swipeable_function = () => pageWindowWidth / 3;

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			particlesContainer = $$value;
    			$$invalidate(13, particlesContainer);
    		});
    	}

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			pageWindowElement = $$value;
    			$$invalidate(12, pageWindowElement);
    		});
    	}

    	const pageChange_handler = event => handlePageChange(event.detail);

    	$$self.$$set = $$props => {
    		if ('timingFunction' in $$props) $$invalidate(0, timingFunction = $$props.timingFunction);
    		if ('arrows' in $$props) $$invalidate(1, arrows = $$props.arrows);
    		if ('infinite' in $$props) $$invalidate(2, infinite = $$props.infinite);
    		if ('initialPageIndex' in $$props) $$invalidate(24, initialPageIndex = $$props.initialPageIndex);
    		if ('duration' in $$props) $$invalidate(25, duration = $$props.duration);
    		if ('autoplay' in $$props) $$invalidate(26, autoplay = $$props.autoplay);
    		if ('autoplayDuration' in $$props) $$invalidate(27, autoplayDuration = $$props.autoplayDuration);
    		if ('autoplayDirection' in $$props) $$invalidate(28, autoplayDirection = $$props.autoplayDirection);
    		if ('pauseOnFocus' in $$props) $$invalidate(29, pauseOnFocus = $$props.pauseOnFocus);
    		if ('autoplayProgressVisible' in $$props) $$invalidate(3, autoplayProgressVisible = $$props.autoplayProgressVisible);
    		if ('dots' in $$props) $$invalidate(4, dots = $$props.dots);
    		if ('swiping' in $$props) $$invalidate(30, swiping = $$props.swiping);
    		if ('particlesToShow' in $$props) $$invalidate(31, particlesToShow = $$props.particlesToShow);
    		if ('particlesToScroll' in $$props) $$invalidate(32, particlesToScroll = $$props.particlesToScroll);
    		if ('$$scope' in $$props) $$invalidate(36, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onDestroy,
    		onMount,
    		tick,
    		createEventDispatcher,
    		Dots,
    		Arrow,
    		Progress,
    		NEXT,
    		PREV,
    		swipeable,
    		hoverable,
    		tappable,
    		applyParticleSizes,
    		createResizeObserver,
    		getClones,
    		applyClones,
    		get: get$1,
    		switcher,
    		createCarousel,
    		loaded,
    		currentPageIndex,
    		progressValue,
    		offset,
    		durationMs,
    		pagesCount,
    		data,
    		progressManager,
    		methods,
    		service,
    		dispatch,
    		timingFunction,
    		arrows,
    		infinite,
    		initialPageIndex,
    		duration,
    		autoplay,
    		autoplayDuration,
    		autoplayDirection,
    		pauseOnFocus,
    		autoplayProgressVisible,
    		dots,
    		swiping,
    		particlesToShow,
    		particlesToScroll,
    		goTo,
    		goToPrev,
    		goToNext,
    		pageWindowWidth,
    		pageWindowElement,
    		particlesContainer,
    		pageWindowElementResizeObserver,
    		addClones,
    		handlePageChange,
    		handleSwipeStart,
    		handleSwipeThresholdReached,
    		handleSwipeMove,
    		handleSwipeEnd,
    		handleSwipeFailed,
    		handleHovered,
    		handleTapped,
    		showPrevPage
    	});

    	$$self.$inject_state = $$props => {
    		if ('loaded' in $$props) $$invalidate(6, loaded = $$props.loaded);
    		if ('currentPageIndex' in $$props) $$invalidate(5, currentPageIndex = $$props.currentPageIndex);
    		if ('progressValue' in $$props) $$invalidate(7, progressValue = $$props.progressValue);
    		if ('offset' in $$props) $$invalidate(8, offset = $$props.offset);
    		if ('durationMs' in $$props) $$invalidate(9, durationMs = $$props.durationMs);
    		if ('pagesCount' in $$props) $$invalidate(10, pagesCount = $$props.pagesCount);
    		if ('timingFunction' in $$props) $$invalidate(0, timingFunction = $$props.timingFunction);
    		if ('arrows' in $$props) $$invalidate(1, arrows = $$props.arrows);
    		if ('infinite' in $$props) $$invalidate(2, infinite = $$props.infinite);
    		if ('initialPageIndex' in $$props) $$invalidate(24, initialPageIndex = $$props.initialPageIndex);
    		if ('duration' in $$props) $$invalidate(25, duration = $$props.duration);
    		if ('autoplay' in $$props) $$invalidate(26, autoplay = $$props.autoplay);
    		if ('autoplayDuration' in $$props) $$invalidate(27, autoplayDuration = $$props.autoplayDuration);
    		if ('autoplayDirection' in $$props) $$invalidate(28, autoplayDirection = $$props.autoplayDirection);
    		if ('pauseOnFocus' in $$props) $$invalidate(29, pauseOnFocus = $$props.pauseOnFocus);
    		if ('autoplayProgressVisible' in $$props) $$invalidate(3, autoplayProgressVisible = $$props.autoplayProgressVisible);
    		if ('dots' in $$props) $$invalidate(4, dots = $$props.dots);
    		if ('swiping' in $$props) $$invalidate(30, swiping = $$props.swiping);
    		if ('particlesToShow' in $$props) $$invalidate(31, particlesToShow = $$props.particlesToShow);
    		if ('particlesToScroll' in $$props) $$invalidate(32, particlesToScroll = $$props.particlesToScroll);
    		if ('pageWindowWidth' in $$props) $$invalidate(11, pageWindowWidth = $$props.pageWindowWidth);
    		if ('pageWindowElement' in $$props) $$invalidate(12, pageWindowElement = $$props.pageWindowElement);
    		if ('particlesContainer' in $$props) $$invalidate(13, particlesContainer = $$props.particlesContainer);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*currentPageIndex*/ 32) {
    			{
    				dispatch('pageChange', currentPageIndex);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*infinite*/ 4) {
    			{
    				data.infinite = infinite;
    			}
    		}

    		if ($$self.$$.dirty[0] & /*duration*/ 33554432) {
    			{
    				data.durationMsInit = duration;
    			}
    		}

    		if ($$self.$$.dirty[0] & /*autoplay*/ 67108864) {
    			{
    				data.autoplay = autoplay;
    			}
    		}

    		if ($$self.$$.dirty[0] & /*autoplayDuration*/ 134217728) {
    			{
    				data.autoplayDuration = autoplayDuration;
    			}
    		}

    		if ($$self.$$.dirty[0] & /*autoplayDirection*/ 268435456) {
    			{
    				data.autoplayDirection = autoplayDirection;
    			}
    		}

    		if ($$self.$$.dirty[0] & /*pauseOnFocus*/ 536870912) {
    			{
    				data.pauseOnFocus = pauseOnFocus;
    			}
    		}

    		if ($$self.$$.dirty[1] & /*particlesToShow*/ 1) {
    			{
    				data.particlesToShowInit = particlesToShow;
    			}
    		}

    		if ($$self.$$.dirty[1] & /*particlesToScroll*/ 2) {
    			{
    				data.particlesToScrollInit = particlesToScroll;
    			}
    		}
    	};

    	return [
    		timingFunction,
    		arrows,
    		infinite,
    		autoplayProgressVisible,
    		dots,
    		currentPageIndex,
    		loaded,
    		progressValue,
    		offset,
    		durationMs,
    		pagesCount,
    		pageWindowWidth,
    		pageWindowElement,
    		particlesContainer,
    		methods,
    		handlePageChange,
    		handleSwipeStart,
    		handleSwipeThresholdReached,
    		handleSwipeMove,
    		handleSwipeEnd,
    		handleSwipeFailed,
    		handleHovered,
    		handleTapped,
    		showPrevPage,
    		initialPageIndex,
    		duration,
    		autoplay,
    		autoplayDuration,
    		autoplayDirection,
    		pauseOnFocus,
    		swiping,
    		particlesToShow,
    		particlesToScroll,
    		goTo,
    		goToPrev,
    		goToNext,
    		$$scope,
    		slots,
    		swipeable_function,
    		div0_binding,
    		div1_binding,
    		pageChange_handler
    	];
    }

    class Carousel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$6,
    			create_fragment$6,
    			safe_not_equal,
    			{
    				timingFunction: 0,
    				arrows: 1,
    				infinite: 2,
    				initialPageIndex: 24,
    				duration: 25,
    				autoplay: 26,
    				autoplayDuration: 27,
    				autoplayDirection: 28,
    				pauseOnFocus: 29,
    				autoplayProgressVisible: 3,
    				dots: 4,
    				swiping: 30,
    				particlesToShow: 31,
    				particlesToScroll: 32,
    				goTo: 33,
    				goToPrev: 34,
    				goToNext: 35
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Carousel",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get timingFunction() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set timingFunction(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get arrows() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set arrows(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get infinite() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set infinite(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get initialPageIndex() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set initialPageIndex(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get duration() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set duration(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get autoplay() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autoplay(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get autoplayDuration() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autoplayDuration(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get autoplayDirection() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autoplayDirection(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pauseOnFocus() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pauseOnFocus(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get autoplayProgressVisible() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autoplayProgressVisible(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dots() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dots(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get swiping() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set swiping(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get particlesToShow() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set particlesToShow(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get particlesToScroll() {
    		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set particlesToScroll(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get goTo() {
    		return this.$$.ctx[33];
    	}

    	set goTo(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get goToPrev() {
    		return this.$$.ctx[34];
    	}

    	set goToPrev(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get goToNext() {
    		return this.$$.ctx[35];
    	}

    	set goToNext(value) {
    		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\views\ViewProduct.svelte generated by Svelte v3.52.0 */
    const file$5 = "src\\views\\ViewProduct.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (979:0) {:catch error}
    function create_catch_block_1$2(ctx) {
    	let t_value = /*error*/ ctx[20] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$2.name,
    		type: "catch",
    		source: "(979:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (140:0) {:then data}
    function create_then_block$2(ctx) {
    	let main;
    	let div11;
    	let header;
    	let headerapp;
    	let t0;
    	let div0;
    	let sidebar;
    	let t1;
    	let div1;
    	let t2;
    	let div10;
    	let div9;
    	let div8;
    	let div5;
    	let div4;
    	let div3;
    	let h4;
    	let t4;
    	let div2;
    	let ol;
    	let li0;
    	let a;
    	let t6;
    	let li1;
    	let t8;
    	let div7;
    	let t9;
    	let div6;
    	let script0;
    	let script0_src_value;
    	let t10;
    	let script1;
    	let script1_src_value;
    	let t11;
    	let script2;
    	let script2_src_value;
    	let t12;
    	let script3;
    	let script3_src_value;
    	let t13;
    	let script4;
    	let script4_src_value;
    	let t14;
    	let script5;
    	let script5_src_value;
    	let t15;
    	let script6;
    	let script6_src_value;
    	let t16;
    	let script7;
    	let script7_src_value;
    	let t17;
    	let script8;
    	let script8_src_value;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[10] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$2,
    		then: create_then_block_1$2,
    		catch: create_catch_block$2,
    		value: 10,
    		error: 20,
    		blocks: [,,,]
    	};

    	handle_promise(/*getProductById*/ ctx[2](), info);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div11 = element("div");
    			header = element("header");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div10 = element("div");
    			div9 = element("div");
    			div8 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Vista de Detalle Producto";
    			t4 = space();
    			div2 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a = element("a");
    			a.textContent = "Productos";
    			t6 = space();
    			li1 = element("li");
    			li1.textContent = "Vista de Detalle Producto";
    			t8 = space();
    			div7 = element("div");
    			info.block.c();
    			t9 = space();
    			div6 = element("div");
    			script0 = element("script");
    			t10 = space();
    			script1 = element("script");
    			t11 = space();
    			script2 = element("script");
    			t12 = space();
    			script3 = element("script");
    			t13 = space();
    			script4 = element("script");
    			t14 = space();
    			script5 = element("script");
    			t15 = space();
    			script6 = element("script");
    			t16 = space();
    			script7 = element("script");
    			t17 = space();
    			script8 = element("script");
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$5, 143, 9, 3927);
    			attr_dev(div0, "class", "app-menu navbar-menu");
    			add_location(div0, file$5, 148, 9, 4069);
    			attr_dev(div1, "class", "vertical-overlay");
    			add_location(div1, file$5, 155, 9, 4294);
    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$5, 168, 27, 4948);
    			attr_dev(a, "href", "#!");
    			add_location(a, file$5, 173, 36, 5219);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$5, 172, 33, 5153);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$5, 175, 33, 5320);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$5, 171, 30, 5091);
    			attr_dev(div2, "class", "page-title-right");
    			add_location(div2, file$5, 170, 27, 5029);
    			attr_dev(div3, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div3, file$5, 166, 24, 4810);
    			attr_dev(div4, "class", "col-12");
    			add_location(div4, file$5, 165, 21, 4764);
    			attr_dev(div5, "class", "row");
    			add_location(div5, file$5, 164, 18, 4724);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$5, 948, 24, 64365);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$5, 950, 24, 64506);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$5, 952, 24, 64637);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$5, 954, 24, 64765);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$5, 956, 24, 64898);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$5, 958, 24, 65033);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/swiper/swiper-bundle.min.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$5, 962, 24, 65197);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/js/pages/ecommerce-product-details.init.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$5, 966, 24, 65396);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$5, 970, 24, 65581);
    			add_location(div6, file$5, 943, 21, 64086);
    			attr_dev(div7, "class", "row");
    			add_location(div7, file$5, 185, 18, 5682);
    			attr_dev(div8, "class", "container-fluid");
    			add_location(div8, file$5, 162, 15, 4630);
    			attr_dev(div9, "class", "page-content");
    			add_location(div9, file$5, 161, 12, 4587);
    			attr_dev(div10, "class", "main-content");
    			add_location(div10, file$5, 160, 9, 4547);
    			attr_dev(div11, "id", "layout-wrapper");
    			add_location(div11, file$5, 142, 6, 3891);
    			add_location(main, file$5, 140, 3, 3850);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div11);
    			append_dev(div11, header);
    			mount_component(headerapp, header, null);
    			append_dev(div11, t0);
    			append_dev(div11, div0);
    			mount_component(sidebar, div0, null);
    			append_dev(div11, t1);
    			append_dev(div11, div1);
    			append_dev(div11, t2);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h4);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a);
    			append_dev(ol, t6);
    			append_dev(ol, li1);
    			append_dev(div8, t8);
    			append_dev(div8, div7);
    			info.block.m(div7, info.anchor = null);
    			info.mount = () => div7;
    			info.anchor = t9;
    			append_dev(div7, t9);
    			append_dev(div7, div6);
    			append_dev(div6, script0);
    			append_dev(div6, t10);
    			append_dev(div6, script1);
    			append_dev(div6, t11);
    			append_dev(div6, script2);
    			append_dev(div6, t12);
    			append_dev(div6, script3);
    			append_dev(div6, t13);
    			append_dev(div6, script4);
    			append_dev(div6, t14);
    			append_dev(div6, script5);
    			append_dev(div6, t15);
    			append_dev(div6, script6);
    			append_dev(div6, t16);
    			append_dev(div6, script7);
    			append_dev(div6, t17);
    			append_dev(div6, script8);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);

    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$2.name,
    		type: "then",
    		source: "(140:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (938:21) {:catch error}
    function create_catch_block$2(ctx) {
    	let t_value = /*error*/ ctx[20] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$2.name,
    		type: "catch",
    		source: "(938:21) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (189:21) {:then data}
    function create_then_block_1$2(ctx) {
    	let div82;
    	let div81;
    	let div80;
    	let div79;
    	let div3;
    	let div0;
    	let img0;
    	let img0_src_value;
    	let t0;
    	let div2;
    	let div1;
    	let h3;
    	let t2;
    	let carousel;
    	let t3;
    	let div23;
    	let div22;
    	let div5;
    	let div4;
    	let h40;
    	let t4_value = /*data*/ ctx[10].name + "";
    	let t4;
    	let t5;
    	let div12;
    	let div11;
    	let div10;
    	let div9;
    	let div7;
    	let div6;
    	let i0;
    	let t6;
    	let div8;
    	let p0;
    	let t8;
    	let h50;
    	let t9_value = /*data*/ ctx[10].presentations[0].price[0].amount + "";
    	let t9;
    	let t10;
    	let div13;
    	let h51;
    	let t12;
    	let p1;
    	let t13_value = /*data*/ ctx[10].slug + "";
    	let t13;
    	let t14;
    	let div14;
    	let h52;
    	let t16;
    	let p2;
    	let t17_value = /*data*/ ctx[10].description + "";
    	let t17;
    	let t18;
    	let div17;
    	let div16;
    	let div15;
    	let h53;
    	let t20;
    	let p3;
    	let t21_value = /*data*/ ctx[10].features + "";
    	let t21;
    	let t22;
    	let div21;
    	let h54;
    	let t24;
    	let nav;
    	let ul;
    	let li;
    	let a;
    	let t26;
    	let div20;
    	let div19;
    	let div18;
    	let table;
    	let tbody;
    	let tr0;
    	let th0;
    	let t28;
    	let t29;
    	let tr1;
    	let th1;
    	let t31;
    	let td;
    	let t32_value = /*data*/ ctx[10].brand.name + "";
    	let t32;
    	let t33;
    	let t34_value = /*data*/ ctx[10].brand.description + "";
    	let t34;
    	let t35;
    	let t36;
    	let tr2;
    	let th2;
    	let t38;
    	let t39;
    	let div78;
    	let div77;
    	let div76;
    	let div75;
    	let div24;
    	let t40;
    	let div74;
    	let div30;
    	let div27;
    	let div26;
    	let div25;
    	let h55;
    	let t42;
    	let button0;
    	let i1;
    	let t43;
    	let t44;
    	let div29;
    	let div28;
    	let lord_icon0;
    	let lord_icon0_src_value;
    	let t45;
    	let h56;
    	let t47;
    	let p4;
    	let t49;
    	let div45;
    	let div44;
    	let div43;
    	let div31;
    	let h57;
    	let t51;
    	let button1;
    	let t52;
    	let form0;
    	let div40;
    	let div36;
    	let div35;
    	let div34;
    	let div33;
    	let img1;
    	let img1_src_value;
    	let t53;
    	let div32;
    	let input0;
    	let t54;
    	let label0;
    	let span0;
    	let i2;
    	let t55;
    	let div37;
    	let label1;
    	let t57;
    	let input1;
    	let t58;
    	let div38;
    	let label2;
    	let t60;
    	let input2;
    	let t61;
    	let div39;
    	let label3;
    	let t63;
    	let input3;
    	let t64;
    	let div42;
    	let div41;
    	let button2;
    	let t66;
    	let button3;
    	let t68;
    	let div65;
    	let div64;
    	let div63;
    	let div46;
    	let h58;
    	let t70;
    	let button4;
    	let t71;
    	let form1;
    	let div62;
    	let div51;
    	let div50;
    	let div49;
    	let div48;
    	let img2;
    	let img2_src_value;
    	let t72;
    	let div47;
    	let input4;
    	let t73;
    	let label4;
    	let span1;
    	let i3;
    	let t74;
    	let div52;
    	let label5;
    	let t76;
    	let input5;
    	let t77;
    	let div53;
    	let label6;
    	let t79;
    	let input6;
    	let t80;
    	let div54;
    	let label7;
    	let t82;
    	let input7;
    	let t83;
    	let div55;
    	let label8;
    	let t85;
    	let input8;
    	let t86;
    	let div56;
    	let label9;
    	let t88;
    	let input9;
    	let t89;
    	let div57;
    	let label10;
    	let t91;
    	let input10;
    	let t92;
    	let div58;
    	let label11;
    	let t94;
    	let input11;
    	let t95;
    	let div59;
    	let label12;
    	let t97;
    	let input12;
    	let t98;
    	let div61;
    	let div60;
    	let button5;
    	let t100;
    	let button6;
    	let t102;
    	let input13;
    	let t103;
    	let input14;
    	let t104;
    	let div73;
    	let div72;
    	let div71;
    	let div66;
    	let button7;
    	let t105;
    	let div70;
    	let div68;
    	let lord_icon1;
    	let lord_icon1_src_value;
    	let t106;
    	let div67;
    	let h41;
    	let t108;
    	let p5;
    	let t110;
    	let div69;
    	let button8;
    	let t112;
    	let button9;
    	let current;
    	let mounted;
    	let dispose;

    	carousel = new Carousel({
    			props: {
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let each_value_1 = /*data*/ ctx[10].categories;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*data*/ ctx[10].tags;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div82 = element("div");
    			div81 = element("div");
    			div80 = element("div");
    			div79 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			img0 = element("img");
    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Presentaciones";
    			t2 = space();
    			create_component(carousel.$$.fragment);
    			t3 = space();
    			div23 = element("div");
    			div22 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			h40 = element("h4");
    			t4 = text(t4_value);
    			t5 = space();
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			div7 = element("div");
    			div6 = element("div");
    			i0 = element("i");
    			t6 = space();
    			div8 = element("div");
    			p0 = element("p");
    			p0.textContent = "Precio:";
    			t8 = space();
    			h50 = element("h5");
    			t9 = text(t9_value);
    			t10 = space();
    			div13 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Slug:";
    			t12 = space();
    			p1 = element("p");
    			t13 = text(t13_value);
    			t14 = space();
    			div14 = element("div");
    			h52 = element("h5");
    			h52.textContent = "Descripción :";
    			t16 = space();
    			p2 = element("p");
    			t17 = text(t17_value);
    			t18 = space();
    			div17 = element("div");
    			div16 = element("div");
    			div15 = element("div");
    			h53 = element("h5");
    			h53.textContent = "Características :";
    			t20 = space();
    			p3 = element("p");
    			t21 = text(t21_value);
    			t22 = space();
    			div21 = element("div");
    			h54 = element("h5");
    			h54.textContent = "Descripción del Producto:";
    			t24 = space();
    			nav = element("nav");
    			ul = element("ul");
    			li = element("li");
    			a = element("a");
    			a.textContent = "Especificaciones";
    			t26 = space();
    			div20 = element("div");
    			div19 = element("div");
    			div18 = element("div");
    			table = element("table");
    			tbody = element("tbody");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Categoría";
    			t28 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t29 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Marca";
    			t31 = space();
    			td = element("td");
    			t32 = text(t32_value);
    			t33 = text(" ( ");
    			t34 = text(t34_value);
    			t35 = text("\r\n                                                                  )");
    			t36 = space();
    			tr2 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Etiquetas";
    			t38 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t39 = space();
    			div78 = element("div");
    			div77 = element("div");
    			div76 = element("div");
    			div75 = element("div");
    			div24 = element("div");
    			t40 = space();
    			div74 = element("div");
    			div30 = element("div");
    			div27 = element("div");
    			div26 = element("div");
    			div25 = element("div");
    			h55 = element("h5");
    			h55.textContent = "Presentaciones";
    			t42 = space();
    			button0 = element("button");
    			i1 = element("i");
    			t43 = text("\r\n                                                                  Añadir Presentación");
    			t44 = space();
    			div29 = element("div");
    			div28 = element("div");
    			lord_icon0 = element("lord-icon");
    			t45 = space();
    			h56 = element("h5");
    			h56.textContent = "Lo sentimos! No\r\n                                                               se encontraron\r\n                                                               resultados";
    			t47 = space();
    			p4 = element("p");
    			p4.textContent = "Hemos buscado en\r\n                                                               todos los\r\n                                                               Usuarios. No\r\n                                                               encontramos\r\n                                                               ningún usuario\r\n                                                               para su búsqueda.";
    			t49 = space();
    			div45 = element("div");
    			div44 = element("div");
    			div43 = element("div");
    			div31 = element("div");
    			h57 = element("h5");
    			h57.textContent = "Editar\r\n                                                                  Presentación";
    			t51 = space();
    			button1 = element("button");
    			t52 = space();
    			form0 = element("form");
    			div40 = element("div");
    			div36 = element("div");
    			div35 = element("div");
    			div34 = element("div");
    			div33 = element("div");
    			img1 = element("img");
    			t53 = space();
    			div32 = element("div");
    			input0 = element("input");
    			t54 = space();
    			label0 = element("label");
    			span0 = element("span");
    			i2 = element("i");
    			t55 = space();
    			div37 = element("div");
    			label1 = element("label");
    			label1.textContent = "Nombre";
    			t57 = space();
    			input1 = element("input");
    			t58 = space();
    			div38 = element("div");
    			label2 = element("label");
    			label2.textContent = "Status";
    			t60 = space();
    			input2 = element("input");
    			t61 = space();
    			div39 = element("div");
    			label3 = element("label");
    			label3.textContent = "Monto";
    			t63 = space();
    			input3 = element("input");
    			t64 = space();
    			div42 = element("div");
    			div41 = element("div");
    			button2 = element("button");
    			button2.textContent = "Cerrar";
    			t66 = space();
    			button3 = element("button");
    			button3.textContent = "Guardar\r\n                                                                        cambios";
    			t68 = space();
    			div65 = element("div");
    			div64 = element("div");
    			div63 = element("div");
    			div46 = element("div");
    			h58 = element("h5");
    			h58.textContent = "Añadir Nueva\r\n                                                                  Presentación";
    			t70 = space();
    			button4 = element("button");
    			t71 = space();
    			form1 = element("form");
    			div62 = element("div");
    			div51 = element("div");
    			div50 = element("div");
    			div49 = element("div");
    			div48 = element("div");
    			img2 = element("img");
    			t72 = space();
    			div47 = element("div");
    			input4 = element("input");
    			t73 = space();
    			label4 = element("label");
    			span1 = element("span");
    			i3 = element("i");
    			t74 = space();
    			div52 = element("div");
    			label5 = element("label");
    			label5.textContent = "Descripcion";
    			t76 = space();
    			input5 = element("input");
    			t77 = space();
    			div53 = element("div");
    			label6 = element("label");
    			label6.textContent = "Code";
    			t79 = space();
    			input6 = element("input");
    			t80 = space();
    			div54 = element("div");
    			label7 = element("label");
    			label7.textContent = "Peso en\r\n                                                                        gramos";
    			t82 = space();
    			input7 = element("input");
    			t83 = space();
    			div55 = element("div");
    			label8 = element("label");
    			label8.textContent = "Status";
    			t85 = space();
    			input8 = element("input");
    			t86 = space();
    			div56 = element("div");
    			label9 = element("label");
    			label9.textContent = "Stock";
    			t88 = space();
    			input9 = element("input");
    			t89 = space();
    			div57 = element("div");
    			label10 = element("label");
    			label10.textContent = "Stock\r\n                                                                        min";
    			t91 = space();
    			input10 = element("input");
    			t92 = space();
    			div58 = element("div");
    			label11 = element("label");
    			label11.textContent = "Stock\r\n                                                                        max";
    			t94 = space();
    			input11 = element("input");
    			t95 = space();
    			div59 = element("div");
    			label12 = element("label");
    			label12.textContent = "Cantidad";
    			t97 = space();
    			input12 = element("input");
    			t98 = space();
    			div61 = element("div");
    			div60 = element("div");
    			button5 = element("button");
    			button5.textContent = "Cerrar";
    			t100 = space();
    			button6 = element("button");
    			button6.textContent = "Añadir\r\n                                                                           Presentación";
    			t102 = space();
    			input13 = element("input");
    			t103 = space();
    			input14 = element("input");
    			t104 = space();
    			div73 = element("div");
    			div72 = element("div");
    			div71 = element("div");
    			div66 = element("div");
    			button7 = element("button");
    			t105 = space();
    			div70 = element("div");
    			div68 = element("div");
    			lord_icon1 = element("lord-icon");
    			t106 = space();
    			div67 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Estás\r\n                                                                        seguro ?";
    			t108 = space();
    			p5 = element("p");
    			p5.textContent = "¿Estás\r\n                                                                        seguro\r\n                                                                        de\r\n                                                                        eliminar\r\n                                                                        la\r\n                                                                        presentación?";
    			t110 = space();
    			div69 = element("div");
    			button8 = element("button");
    			button8.textContent = "Cerrar";
    			t112 = space();
    			button9 = element("button");
    			button9.textContent = "Sí, borrar\r\n                                                                     presentación!";
    			if (!src_url_equal(img0.src, img0_src_value = /*data*/ ctx[10].cover)) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", /*data*/ ctx[10].name);
    			attr_dev(img0, "class", "img-fluid d-block");
    			add_location(img0, file$5, 195, 42, 6233);
    			attr_dev(div0, "class", "product-img");
    			add_location(div0, file$5, 194, 39, 6164);
    			attr_dev(h3, "class", "pt-4 text-center");
    			add_location(h3, file$5, 204, 45, 6830);
    			attr_dev(div1, "class", "col overflow-auto");
    			add_location(div1, file$5, 202, 42, 6670);
    			attr_dev(div2, "class", "row mt-5");
    			add_location(div2, file$5, 201, 39, 6604);
    			attr_dev(div3, "class", "col-xl-4 col-md-8 mx-auto");
    			add_location(div3, file$5, 193, 36, 6084);
    			add_location(h40, file$5, 226, 48, 8220);
    			attr_dev(div4, "class", "flex-grow-1");
    			add_location(div4, file$5, 225, 45, 8145);
    			attr_dev(div5, "class", "d-flex");
    			add_location(div5, file$5, 224, 42, 8078);
    			attr_dev(i0, "class", "ri-money-dollar-circle-fill");
    			add_location(i0, file$5, 242, 60, 9279);
    			attr_dev(div6, "class", "avatar-title rounded bg-transparent text-success fs-24");
    			add_location(div6, file$5, 240, 57, 9088);
    			attr_dev(div7, "class", "avatar-sm me-2");
    			add_location(div7, file$5, 238, 54, 8943);
    			attr_dev(p0, "class", "text-muted mb-1");
    			add_location(p0, file$5, 247, 57, 9651);
    			attr_dev(h50, "class", "mb-0");
    			add_location(h50, file$5, 251, 57, 9930);
    			attr_dev(div8, "class", "flex-grow-1");
    			add_location(div8, file$5, 246, 54, 9567);
    			attr_dev(div9, "class", "d-flex align-items-center");
    			add_location(div9, file$5, 236, 51, 8793);
    			attr_dev(div10, "class", "p-2 border border-dashed rounded");
    			add_location(div10, file$5, 234, 48, 8642);
    			attr_dev(div11, "class", "col-lg-3 col-sm-6");
    			add_location(div11, file$5, 233, 45, 8561);
    			attr_dev(div12, "class", "row mt-4");
    			add_location(div12, file$5, 232, 42, 8492);
    			attr_dev(h51, "class", "fs-14");
    			add_location(h51, file$5, 263, 45, 10705);
    			add_location(p1, file$5, 264, 45, 10780);
    			attr_dev(div13, "class", "mt-4 text-muted");
    			add_location(div13, file$5, 262, 42, 10629);
    			attr_dev(h52, "class", "fs-14");
    			add_location(h52, file$5, 270, 45, 11067);
    			add_location(p2, file$5, 273, 45, 11247);
    			attr_dev(div14, "class", "mt-4 text-muted");
    			add_location(div14, file$5, 269, 42, 10991);
    			attr_dev(h53, "class", "fs-14");
    			add_location(h53, file$5, 280, 51, 11682);
    			add_location(p3, file$5, 283, 51, 11884);
    			attr_dev(div15, "class", "mt-3");
    			add_location(div15, file$5, 279, 48, 11611);
    			attr_dev(div16, "class", "col-sm-6");
    			add_location(div16, file$5, 278, 45, 11539);
    			attr_dev(div17, "class", "mt-4 text-muted");
    			add_location(div17, file$5, 277, 42, 11463);
    			attr_dev(h54, "class", "fs-14 mb-3");
    			add_location(h54, file$5, 291, 45, 12301);
    			attr_dev(a, "class", "nav-link active");
    			attr_dev(a, "id", "nav-speci-tab");
    			attr_dev(a, "data-bs-toggle", "tab");
    			attr_dev(a, "href", "#nav-speci");
    			attr_dev(a, "role", "tab");
    			attr_dev(a, "aria-controls", "nav-speci");
    			attr_dev(a, "aria-selected", "true");
    			add_location(a, file$5, 300, 54, 12920);
    			attr_dev(li, "class", "nav-item");
    			add_location(li, file$5, 299, 51, 12843);
    			attr_dev(ul, "class", "nav nav-tabs nav-tabs-custom nav-success");
    			attr_dev(ul, "id", "nav-tab");
    			attr_dev(ul, "role", "tablist");
    			add_location(ul, file$5, 295, 48, 12553);
    			add_location(nav, file$5, 294, 45, 12498);
    			attr_dev(th0, "scope", "row");
    			set_style(th0, "width", "200px");
    			add_location(th0, file$5, 326, 63, 14792);
    			set_style(tr0, "display", "flex");
    			add_location(tr0, file$5, 324, 60, 14636);
    			attr_dev(th1, "scope", "row");
    			set_style(th1, "width", "200px");
    			add_location(th1, file$5, 338, 63, 15736);
    			add_location(td, file$5, 342, 63, 16050);
    			set_style(tr1, "display", "flex");
    			add_location(tr1, file$5, 336, 60, 15580);
    			attr_dev(th2, "scope", "row");
    			set_style(th2, "width", "200px");
    			add_location(th2, file$5, 351, 63, 16738);
    			set_style(tr2, "display", "flex");
    			add_location(tr2, file$5, 349, 60, 16582);
    			add_location(tbody, file$5, 323, 57, 14567);
    			attr_dev(table, "class", "table mb-0");
    			add_location(table, file$5, 322, 54, 14482);
    			attr_dev(div18, "class", "table-responsive");
    			add_location(div18, file$5, 320, 51, 14341);
    			attr_dev(div19, "class", "tab-pane fade show active");
    			attr_dev(div19, "id", "nav-speci");
    			attr_dev(div19, "role", "tabpanel");
    			attr_dev(div19, "aria-labelledby", "nav-speci-tab");
    			add_location(div19, file$5, 315, 48, 13978);
    			attr_dev(div20, "class", "tab-content border border-top-0 p-4");
    			attr_dev(div20, "id", "nav-tabContent");
    			add_location(div20, file$5, 312, 45, 13761);
    			attr_dev(div21, "class", "product-content mt-5");
    			add_location(div21, file$5, 290, 42, 12220);
    			attr_dev(div22, "class", "mt-xl-0 mt-5");
    			add_location(div22, file$5, 223, 39, 8008);
    			attr_dev(div23, "class", "col-xl-8");
    			add_location(div23, file$5, 222, 36, 7945);
    			attr_dev(div24, "class", "card-header");
    			add_location(div24, file$5, 375, 48, 18187);
    			attr_dev(h55, "class", "fs-14 mb-3");
    			add_location(h55, file$5, 384, 63, 18798);
    			attr_dev(i1, "class", "ri-add-line align-bottom me-1");
    			add_location(i1, file$5, 394, 67, 19635);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-success add-btn");
    			attr_dev(button0, "data-bs-toggle", "modal");
    			attr_dev(button0, "id", "create-btn");
    			attr_dev(button0, "data-bs-target", "#showModalAñadir");
    			add_location(button0, file$5, 388, 63, 19105);
    			add_location(div25, file$5, 383, 60, 18728);
    			attr_dev(div26, "class", "col-sm-auto");
    			add_location(div26, file$5, 381, 57, 18580);
    			attr_dev(div27, "class", "row g-4 mb-3");
    			add_location(div27, file$5, 380, 54, 18495);
    			if (!src_url_equal(lord_icon0.src, lord_icon0_src_value = "https://cdn.lordicon.com/msoeawqm.json")) set_custom_element_data(lord_icon0, "src", lord_icon0_src_value);
    			set_custom_element_data(lord_icon0, "trigger", "loop");
    			set_custom_element_data(lord_icon0, "colors", "primary:#121331,secondary:#08a88a");
    			set_style(lord_icon0, "width", "75px");
    			set_style(lord_icon0, "height", "75px");
    			add_location(lord_icon0, file$5, 493, 60, 27482);
    			attr_dev(h56, "class", "mt-2");
    			add_location(h56, file$5, 498, 60, 27947);
    			attr_dev(p4, "class", "text-muted mb-0");
    			add_location(p4, file$5, 503, 60, 28327);
    			attr_dev(div28, "class", "text-center");
    			add_location(div28, file$5, 491, 57, 27334);
    			attr_dev(div29, "class", "noresult");
    			set_style(div29, "display", "none");
    			add_location(div29, file$5, 488, 54, 27115);
    			attr_dev(div30, "id", "customerList");
    			add_location(div30, file$5, 379, 51, 18416);
    			attr_dev(h57, "class", "modal-title");
    			attr_dev(h57, "id", "exampleModalLabel");
    			add_location(h57, file$5, 528, 63, 30122);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn-close");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			attr_dev(button1, "aria-label", "Close");
    			attr_dev(button1, "id", "close-modal");
    			add_location(button1, file$5, 534, 63, 30592);
    			attr_dev(div31, "class", "modal-header bg-light p-3");
    			add_location(div31, file$5, 526, 60, 29954);
    			if (!src_url_equal(img1.src, img1_src_value = "http://localhost:8080/images/users/avatar-1.jpg")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "class", "rounded-circle avatar-xl img-thumbnail user-profile-image shadow");
    			attr_dev(img1, "alt", "user-profile-image");
    			add_location(img1, file$5, 552, 78, 32132);
    			attr_dev(input0, "id", "profile-img-file-input");
    			attr_dev(input0, "type", "file");
    			attr_dev(input0, "class", "profile-img-file-input");
    			add_location(input0, file$5, 558, 81, 32844);
    			attr_dev(i2, "class", "ri-camera-fill");
    			add_location(i2, file$5, 567, 87, 33836);
    			attr_dev(span0, "class", "avatar-title rounded-circle bg-light text-body shadow");
    			add_location(span0, file$5, 565, 84, 33591);
    			attr_dev(label0, "for", "profile-img-file-input");
    			attr_dev(label0, "class", "profile-photo-edit avatar-xs");
    			add_location(label0, file$5, 562, 81, 33262);
    			attr_dev(div32, "class", "avatar-xs p-0 rounded-circle profile-photo-edit");
    			add_location(div32, file$5, 556, 78, 32618);
    			attr_dev(div33, "class", "profile-user position-relative d-inline-block mx-auto mb-4");
    			add_location(div33, file$5, 550, 75, 31900);
    			attr_dev(div34, "class", "text-center");
    			add_location(div34, file$5, 548, 72, 31722);
    			attr_dev(div35, "class", "card-body p-4");
    			add_location(div35, file$5, 546, 69, 31548);
    			attr_dev(div36, "class", "mb-3");
    			add_location(div36, file$5, 544, 66, 31389);
    			attr_dev(label1, "for", "name-field");
    			attr_dev(label1, "class", "form-label");
    			add_location(label1, file$5, 579, 69, 34768);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "id", "name-field");
    			attr_dev(input1, "class", "form-control");
    			attr_dev(input1, "placeholder", "Enter Name");
    			input1.required = true;
    			add_location(input1, file$5, 583, 69, 35116);
    			attr_dev(div37, "class", "mb-3");
    			add_location(div37, file$5, 577, 66, 34609);
    			attr_dev(label2, "for", "status-field");
    			attr_dev(label2, "class", "form-label");
    			add_location(label2, file$5, 592, 69, 35874);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "id", "status-field");
    			attr_dev(input2, "class", "form-control");
    			attr_dev(input2, "placeholder", "Enter Status");
    			input2.required = true;
    			add_location(input2, file$5, 596, 69, 36224);
    			attr_dev(div38, "class", "mb-3");
    			add_location(div38, file$5, 590, 66, 35715);
    			attr_dev(label3, "for", "monto-field");
    			attr_dev(label3, "class", "form-label");
    			add_location(label3, file$5, 606, 69, 36988);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "id", "monto-field");
    			attr_dev(input3, "class", "form-control");
    			attr_dev(input3, "placeholder", "Enter Monto");
    			input3.required = true;
    			add_location(input3, file$5, 610, 69, 37336);
    			attr_dev(div39, "class", "mb-3");
    			add_location(div39, file$5, 604, 66, 36829);
    			attr_dev(div40, "class", "modal-body");
    			add_location(div40, file$5, 542, 63, 31230);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn btn-light");
    			attr_dev(button2, "data-bs-dismiss", "modal");
    			add_location(button2, file$5, 622, 69, 38353);
    			attr_dev(button3, "type", "submit");
    			attr_dev(button3, "class", "btn btn-success");
    			attr_dev(button3, "id", "add-btn");
    			add_location(button3, file$5, 627, 69, 38800);
    			attr_dev(div41, "class", "hstack gap-2 justify-content-end");
    			add_location(div41, file$5, 620, 66, 38166);
    			attr_dev(div42, "class", "modal-footer");
    			add_location(div42, file$5, 618, 63, 38005);
    			add_location(form0, file$5, 541, 60, 31159);
    			attr_dev(div43, "class", "modal-content");
    			add_location(div43, file$5, 524, 57, 29804);
    			attr_dev(div44, "class", "modal-dialog modal-dialog-centered");
    			add_location(div44, file$5, 522, 54, 29639);
    			attr_dev(div45, "class", "modal fade");
    			attr_dev(div45, "id", "showModalEditar");
    			attr_dev(div45, "tabindex", "-1");
    			attr_dev(div45, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div45, "aria-hidden", "true");
    			add_location(div45, file$5, 516, 51, 29194);
    			attr_dev(h58, "class", "modal-title");
    			attr_dev(h58, "id", "exampleModalLabel");
    			add_location(h58, file$5, 652, 63, 40632);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "btn-close");
    			attr_dev(button4, "data-bs-dismiss", "modal");
    			attr_dev(button4, "aria-label", "Close");
    			attr_dev(button4, "id", "close-modal");
    			add_location(button4, file$5, 658, 63, 41108);
    			attr_dev(div46, "class", "modal-header bg-light p-3");
    			add_location(div46, file$5, 650, 60, 40464);
    			if (!src_url_equal(img2.src, img2_src_value = "http://localhost:8080/images/users/user-dummy-img.jpg")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "class", "rounded-circle avatar-xl img-thumbnail user-profile-image shadow");
    			attr_dev(img2, "alt", "user-profile");
    			add_location(img2, file$5, 679, 78, 42967);
    			attr_dev(input4, "id", "profile-img-file-input");
    			attr_dev(input4, "type", "file");
    			attr_dev(input4, "name", "cover");
    			attr_dev(input4, "class", "profile-img-file-input");
    			add_location(input4, file$5, 685, 81, 43679);
    			attr_dev(i3, "class", "ri-camera-fill");
    			add_location(i3, file$5, 695, 87, 44769);
    			attr_dev(span1, "class", "avatar-title rounded-circle bg-light text-body shadow");
    			add_location(span1, file$5, 693, 84, 44524);
    			attr_dev(label4, "for", "profile-img-file-input");
    			attr_dev(label4, "class", "profile-photo-edit avatar-xs");
    			add_location(label4, file$5, 690, 81, 44195);
    			attr_dev(div47, "class", "avatar-xs p-0 rounded-circle profile-photo-edit");
    			add_location(div47, file$5, 683, 78, 43453);
    			attr_dev(div48, "class", "profile-user position-relative d-inline-block mx-auto mb-4");
    			add_location(div48, file$5, 677, 75, 42735);
    			attr_dev(div49, "class", "text-center");
    			add_location(div49, file$5, 675, 72, 42557);
    			attr_dev(div50, "class", "card-body p-4");
    			add_location(div50, file$5, 673, 69, 42383);
    			attr_dev(div51, "class", "mb-3");
    			add_location(div51, file$5, 671, 66, 42224);
    			attr_dev(label5, "for", "name-field");
    			attr_dev(label5, "class", "form-label");
    			add_location(label5, file$5, 707, 69, 45701);
    			attr_dev(input5, "type", "text");
    			attr_dev(input5, "name", "description");
    			attr_dev(input5, "id", "name-field");
    			attr_dev(input5, "class", "form-control");
    			attr_dev(input5, "placeholder", "Enter Name");
    			input5.required = true;
    			add_location(input5, file$5, 711, 69, 46054);
    			attr_dev(div52, "class", "mb-3");
    			add_location(div52, file$5, 705, 66, 45542);
    			attr_dev(label6, "for", "Code-field");
    			attr_dev(label6, "class", "form-label");
    			add_location(label6, file$5, 721, 69, 46904);
    			attr_dev(input6, "type", "text");
    			attr_dev(input6, "id", "Code-field");
    			attr_dev(input6, "name", "code");
    			attr_dev(input6, "class", "form-control");
    			attr_dev(input6, "placeholder", "Ponga el Code aqui");
    			input6.required = true;
    			add_location(input6, file$5, 725, 69, 47250);
    			attr_dev(div53, "class", "mb-3");
    			add_location(div53, file$5, 719, 66, 46745);
    			attr_dev(label7, "for", "weight-field");
    			attr_dev(label7, "class", "form-label");
    			add_location(label7, file$5, 735, 69, 48101);
    			attr_dev(input7, "type", "text");
    			attr_dev(input7, "id", "weight-field");
    			attr_dev(input7, "name", "weight_in_grams");
    			attr_dev(input7, "class", "form-control");
    			attr_dev(input7, "placeholder", "Ponga el peso aqui");
    			input7.required = true;
    			add_location(input7, file$5, 740, 69, 48532);
    			attr_dev(div54, "class", "mb-3");
    			add_location(div54, file$5, 733, 66, 47942);
    			attr_dev(label8, "for", "status-field");
    			attr_dev(label8, "class", "form-label");
    			add_location(label8, file$5, 750, 69, 49396);
    			attr_dev(input8, "type", "text");
    			attr_dev(input8, "id", "status-field");
    			attr_dev(input8, "name", "status");
    			attr_dev(input8, "class", "form-control");
    			attr_dev(input8, "placeholder", "Ponga el Status aqui");
    			input8.required = true;
    			add_location(input8, file$5, 754, 69, 49746);
    			attr_dev(div55, "class", "mb-3");
    			add_location(div55, file$5, 748, 66, 49237);
    			attr_dev(label9, "for", "stock-field");
    			attr_dev(label9, "class", "form-label");
    			add_location(label9, file$5, 765, 69, 50605);
    			attr_dev(input9, "type", "text");
    			attr_dev(input9, "id", "stock-field");
    			attr_dev(input9, "name", "stock");
    			attr_dev(input9, "class", "form-control");
    			attr_dev(input9, "placeholder", "Ponga el stock aqui");
    			input9.required = true;
    			add_location(input9, file$5, 769, 69, 50953);
    			attr_dev(div56, "class", "mb-3");
    			add_location(div56, file$5, 763, 66, 50446);
    			attr_dev(label10, "for", "stock-field");
    			attr_dev(label10, "class", "form-label");
    			add_location(label10, file$5, 780, 69, 51809);
    			attr_dev(input10, "type", "text");
    			attr_dev(input10, "id", "stock-field");
    			attr_dev(input10, "name", "stock_min");
    			attr_dev(input10, "class", "form-control");
    			attr_dev(input10, "placeholder", "Ponga el stock minimo aqui");
    			input10.required = true;
    			add_location(input10, file$5, 785, 69, 52234);
    			attr_dev(div57, "class", "mb-3");
    			add_location(div57, file$5, 778, 66, 51650);
    			attr_dev(label11, "for", "stock-field");
    			attr_dev(label11, "class", "form-label");
    			add_location(label11, file$5, 796, 69, 53101);
    			attr_dev(input11, "type", "text");
    			attr_dev(input11, "id", "stock-field");
    			attr_dev(input11, "name", "stock_max");
    			attr_dev(input11, "class", "form-control");
    			attr_dev(input11, "placeholder", "Ponga el stock maximo aqui");
    			input11.required = true;
    			add_location(input11, file$5, 801, 69, 53526);
    			attr_dev(div58, "class", "mb-3");
    			add_location(div58, file$5, 794, 66, 52942);
    			attr_dev(label12, "for", "amount-field");
    			attr_dev(label12, "class", "form-label");
    			add_location(label12, file$5, 812, 69, 54393);
    			attr_dev(input12, "type", "text");
    			attr_dev(input12, "id", "amount-field");
    			attr_dev(input12, "name", "amount");
    			attr_dev(input12, "class", "form-control");
    			attr_dev(input12, "placeholder", "Ponga la cantidad aqui");
    			input12.required = true;
    			add_location(input12, file$5, 816, 69, 54745);
    			attr_dev(div59, "class", "mb-3");
    			add_location(div59, file$5, 810, 66, 54234);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "class", "btn btn-danger");
    			attr_dev(button5, "data-bs-dismiss", "modal");
    			add_location(button5, file$5, 829, 72, 55807);
    			attr_dev(button6, "type", "submit");
    			attr_dev(button6, "class", "btn btn-success");
    			attr_dev(button6, "id", "edit-btn");
    			add_location(button6, file$5, 834, 72, 56270);
    			attr_dev(div60, "class", "hstack gap-2 justify-content-end");
    			add_location(div60, file$5, 827, 69, 55614);
    			attr_dev(div61, "class", "modal-footer");
    			add_location(div61, file$5, 825, 66, 55447);
    			attr_dev(div62, "class", "modal-body");
    			add_location(div62, file$5, 669, 63, 42065);
    			input13.value = "create";
    			attr_dev(input13, "name", "action");
    			input13.hidden = true;
    			add_location(input13, file$5, 844, 63, 57124);
    			input14.value = /*id*/ ctx[0];
    			attr_dev(input14, "name", "product_id");
    			input14.hidden = true;
    			add_location(input14, file$5, 848, 63, 57435);
    			attr_dev(form1, "method", "post");
    			attr_dev(form1, "action", "https://newphpecommercejona.herokuapp.com/app/PresentationsController.php");
    			attr_dev(form1, "enctype", "multipart/form-data");
    			add_location(form1, file$5, 665, 60, 41675);
    			attr_dev(div63, "class", "modal-content");
    			add_location(div63, file$5, 648, 57, 40314);
    			attr_dev(div64, "class", "modal-dialog modal-dialog-centered");
    			add_location(div64, file$5, 646, 54, 40149);
    			attr_dev(div65, "class", "modal fade");
    			attr_dev(div65, "id", "showModalAñadir");
    			attr_dev(div65, "tabindex", "-1");
    			attr_dev(div65, "aria-labelledby", "exampleModalLabel");
    			attr_dev(div65, "aria-hidden", "true");
    			add_location(div65, file$5, 640, 51, 39704);
    			attr_dev(button7, "type", "button");
    			attr_dev(button7, "class", "btn-close");
    			attr_dev(button7, "data-bs-dismiss", "modal");
    			attr_dev(button7, "aria-label", "Close");
    			attr_dev(button7, "id", "btn-close");
    			add_location(button7, file$5, 868, 63, 58889);
    			attr_dev(div66, "class", "modal-header");
    			add_location(div66, file$5, 866, 60, 58734);
    			if (!src_url_equal(lord_icon1.src, lord_icon1_src_value = "https://cdn.lordicon.com/gsqxdxog.json")) set_custom_element_data(lord_icon1, "src", lord_icon1_src_value);
    			set_custom_element_data(lord_icon1, "trigger", "loop");
    			set_custom_element_data(lord_icon1, "colors", "primary:#f7b84b,secondary:#f06548");
    			set_style(lord_icon1, "width", "100px");
    			set_style(lord_icon1, "height", "100px");
    			add_location(lord_icon1, file$5, 879, 66, 59772);
    			add_location(h41, file$5, 886, 69, 60452);
    			attr_dev(p5, "class", "text-muted mx-4 mb-0");
    			add_location(p5, file$5, 890, 69, 60764);
    			attr_dev(div67, "class", "mt-4 pt-2 fs-15 mx-4 mx-sm-5");
    			add_location(div67, file$5, 884, 66, 60269);
    			attr_dev(div68, "class", "mt-2 text-center");
    			add_location(div68, file$5, 877, 63, 59607);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "class", "btn w-sm btn-light");
    			attr_dev(button8, "data-bs-dismiss", "modal");
    			add_location(button8, file$5, 903, 66, 61829);
    			attr_dev(button9, "type", "button");
    			attr_dev(button9, "class", "btn w-sm btn-danger ");
    			attr_dev(button9, "id", "delete-record");
    			add_location(button9, file$5, 908, 66, 62266);
    			attr_dev(div69, "class", "d-flex gap-2 justify-content-center mt-4 mb-2");
    			add_location(div69, file$5, 901, 63, 61635);
    			attr_dev(div70, "class", "modal-body");
    			add_location(div70, file$5, 875, 60, 59454);
    			attr_dev(div71, "class", "modal-content");
    			add_location(div71, file$5, 864, 57, 58584);
    			attr_dev(div72, "class", "modal-dialog modal-dialog-centered");
    			add_location(div72, file$5, 862, 54, 58419);
    			attr_dev(div73, "class", "modal fade zoomIn");
    			attr_dev(div73, "id", "deleteRecordModal");
    			attr_dev(div73, "tabindex", "-1");
    			attr_dev(div73, "aria-hidden", "true");
    			add_location(div73, file$5, 857, 51, 58056);
    			attr_dev(div74, "class", "card-body");
    			add_location(div74, file$5, 378, 48, 18340);
    			attr_dev(div75, "class", "card");
    			add_location(div75, file$5, 374, 45, 18119);
    			attr_dev(div76, "class", "col-lg-12");
    			add_location(div76, file$5, 373, 42, 18049);
    			attr_dev(div77, "class", "row");
    			add_location(div77, file$5, 372, 39, 17988);
    			attr_dev(div78, "class", "col-xl-12");
    			add_location(div78, file$5, 371, 36, 17924);
    			attr_dev(div79, "class", "row gx-lg-5");
    			add_location(div79, file$5, 192, 33, 6021);
    			attr_dev(div80, "class", "card-body");
    			add_location(div80, file$5, 191, 30, 5963);
    			attr_dev(div81, "class", "card");
    			add_location(div81, file$5, 190, 27, 5913);
    			attr_dev(div82, "class", "col-lg-12");
    			add_location(div82, file$5, 189, 24, 5861);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div82, anchor);
    			append_dev(div82, div81);
    			append_dev(div81, div80);
    			append_dev(div80, div79);
    			append_dev(div79, div3);
    			append_dev(div3, div0);
    			append_dev(div0, img0);
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h3);
    			append_dev(div1, t2);
    			mount_component(carousel, div1, null);
    			append_dev(div79, t3);
    			append_dev(div79, div23);
    			append_dev(div23, div22);
    			append_dev(div22, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h40);
    			append_dev(h40, t4);
    			append_dev(div22, t5);
    			append_dev(div22, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div7);
    			append_dev(div7, div6);
    			append_dev(div6, i0);
    			append_dev(div9, t6);
    			append_dev(div9, div8);
    			append_dev(div8, p0);
    			append_dev(div8, t8);
    			append_dev(div8, h50);
    			append_dev(h50, t9);
    			append_dev(div22, t10);
    			append_dev(div22, div13);
    			append_dev(div13, h51);
    			append_dev(div13, t12);
    			append_dev(div13, p1);
    			append_dev(p1, t13);
    			append_dev(div22, t14);
    			append_dev(div22, div14);
    			append_dev(div14, h52);
    			append_dev(div14, t16);
    			append_dev(div14, p2);
    			append_dev(p2, t17);
    			append_dev(div22, t18);
    			append_dev(div22, div17);
    			append_dev(div17, div16);
    			append_dev(div16, div15);
    			append_dev(div15, h53);
    			append_dev(div15, t20);
    			append_dev(div15, p3);
    			append_dev(p3, t21);
    			append_dev(div22, t22);
    			append_dev(div22, div21);
    			append_dev(div21, h54);
    			append_dev(div21, t24);
    			append_dev(div21, nav);
    			append_dev(nav, ul);
    			append_dev(ul, li);
    			append_dev(li, a);
    			append_dev(div21, t26);
    			append_dev(div21, div20);
    			append_dev(div20, div19);
    			append_dev(div19, div18);
    			append_dev(div18, table);
    			append_dev(table, tbody);
    			append_dev(tbody, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t28);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(tr0, null);
    			}

    			append_dev(tbody, t29);
    			append_dev(tbody, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t31);
    			append_dev(tr1, td);
    			append_dev(td, t32);
    			append_dev(td, t33);
    			append_dev(td, t34);
    			append_dev(td, t35);
    			append_dev(tbody, t36);
    			append_dev(tbody, tr2);
    			append_dev(tr2, th2);
    			append_dev(tr2, t38);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tr2, null);
    			}

    			append_dev(div79, t39);
    			append_dev(div79, div78);
    			append_dev(div78, div77);
    			append_dev(div77, div76);
    			append_dev(div76, div75);
    			append_dev(div75, div24);
    			append_dev(div75, t40);
    			append_dev(div75, div74);
    			append_dev(div74, div30);
    			append_dev(div30, div27);
    			append_dev(div27, div26);
    			append_dev(div26, div25);
    			append_dev(div25, h55);
    			append_dev(div25, t42);
    			append_dev(div25, button0);
    			append_dev(button0, i1);
    			append_dev(button0, t43);
    			append_dev(div30, t44);
    			append_dev(div30, div29);
    			append_dev(div29, div28);
    			append_dev(div28, lord_icon0);
    			append_dev(div28, t45);
    			append_dev(div28, h56);
    			append_dev(div28, t47);
    			append_dev(div28, p4);
    			append_dev(div74, t49);
    			append_dev(div74, div45);
    			append_dev(div45, div44);
    			append_dev(div44, div43);
    			append_dev(div43, div31);
    			append_dev(div31, h57);
    			append_dev(div31, t51);
    			append_dev(div31, button1);
    			append_dev(div43, t52);
    			append_dev(div43, form0);
    			append_dev(form0, div40);
    			append_dev(div40, div36);
    			append_dev(div36, div35);
    			append_dev(div35, div34);
    			append_dev(div34, div33);
    			append_dev(div33, img1);
    			append_dev(div33, t53);
    			append_dev(div33, div32);
    			append_dev(div32, input0);
    			append_dev(div32, t54);
    			append_dev(div32, label0);
    			append_dev(label0, span0);
    			append_dev(span0, i2);
    			append_dev(div40, t55);
    			append_dev(div40, div37);
    			append_dev(div37, label1);
    			append_dev(div37, t57);
    			append_dev(div37, input1);
    			append_dev(div40, t58);
    			append_dev(div40, div38);
    			append_dev(div38, label2);
    			append_dev(div38, t60);
    			append_dev(div38, input2);
    			append_dev(div40, t61);
    			append_dev(div40, div39);
    			append_dev(div39, label3);
    			append_dev(div39, t63);
    			append_dev(div39, input3);
    			append_dev(form0, t64);
    			append_dev(form0, div42);
    			append_dev(div42, div41);
    			append_dev(div41, button2);
    			append_dev(div41, t66);
    			append_dev(div41, button3);
    			append_dev(div74, t68);
    			append_dev(div74, div65);
    			append_dev(div65, div64);
    			append_dev(div64, div63);
    			append_dev(div63, div46);
    			append_dev(div46, h58);
    			append_dev(div46, t70);
    			append_dev(div46, button4);
    			append_dev(div63, t71);
    			append_dev(div63, form1);
    			append_dev(form1, div62);
    			append_dev(div62, div51);
    			append_dev(div51, div50);
    			append_dev(div50, div49);
    			append_dev(div49, div48);
    			append_dev(div48, img2);
    			append_dev(div48, t72);
    			append_dev(div48, div47);
    			append_dev(div47, input4);
    			append_dev(div47, t73);
    			append_dev(div47, label4);
    			append_dev(label4, span1);
    			append_dev(span1, i3);
    			append_dev(div62, t74);
    			append_dev(div62, div52);
    			append_dev(div52, label5);
    			append_dev(div52, t76);
    			append_dev(div52, input5);
    			append_dev(div62, t77);
    			append_dev(div62, div53);
    			append_dev(div53, label6);
    			append_dev(div53, t79);
    			append_dev(div53, input6);
    			append_dev(div62, t80);
    			append_dev(div62, div54);
    			append_dev(div54, label7);
    			append_dev(div54, t82);
    			append_dev(div54, input7);
    			append_dev(div62, t83);
    			append_dev(div62, div55);
    			append_dev(div55, label8);
    			append_dev(div55, t85);
    			append_dev(div55, input8);
    			append_dev(div62, t86);
    			append_dev(div62, div56);
    			append_dev(div56, label9);
    			append_dev(div56, t88);
    			append_dev(div56, input9);
    			append_dev(div62, t89);
    			append_dev(div62, div57);
    			append_dev(div57, label10);
    			append_dev(div57, t91);
    			append_dev(div57, input10);
    			append_dev(div62, t92);
    			append_dev(div62, div58);
    			append_dev(div58, label11);
    			append_dev(div58, t94);
    			append_dev(div58, input11);
    			append_dev(div62, t95);
    			append_dev(div62, div59);
    			append_dev(div59, label12);
    			append_dev(div59, t97);
    			append_dev(div59, input12);
    			append_dev(div62, t98);
    			append_dev(div62, div61);
    			append_dev(div61, div60);
    			append_dev(div60, button5);
    			append_dev(div60, t100);
    			append_dev(div60, button6);
    			append_dev(form1, t102);
    			append_dev(form1, input13);
    			append_dev(form1, t103);
    			append_dev(form1, input14);
    			append_dev(div74, t104);
    			append_dev(div74, div73);
    			append_dev(div73, div72);
    			append_dev(div72, div71);
    			append_dev(div71, div66);
    			append_dev(div66, button7);
    			append_dev(div71, t105);
    			append_dev(div71, div70);
    			append_dev(div70, div68);
    			append_dev(div68, lord_icon1);
    			append_dev(div68, t106);
    			append_dev(div68, div67);
    			append_dev(div67, h41);
    			append_dev(div67, t108);
    			append_dev(div67, p5);
    			append_dev(div70, t110);
    			append_dev(div70, div69);
    			append_dev(div69, button8);
    			append_dev(div69, t112);
    			append_dev(div69, button9);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button6, "click", reloadPage, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const carousel_changes = {};

    			if (dirty & /*$$scope*/ 2097152) {
    				carousel_changes.$$scope = { dirty, ctx };
    			}

    			carousel.$set(carousel_changes);

    			if (dirty & /*getProductById*/ 4) {
    				each_value_1 = /*data*/ ctx[10].categories;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(tr0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*getProductById*/ 4) {
    				each_value = /*data*/ ctx[10].tags;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty & /*id*/ 1 && input14.value !== /*id*/ ctx[0]) {
    				prop_dev(input14, "value", /*id*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(carousel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(carousel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div82);
    			destroy_component(carousel);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$2.name,
    		type: "then",
    		source: "(189:21) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (209:48) {#each data.presentations as presentation}
    function create_each_block_2(ctx) {
    	let a;
    	let img;
    	let img_src_value;
    	let t;

    	const block = {
    		c: function create() {
    			a = element("a");
    			img = element("img");
    			t = space();
    			attr_dev(img, "class", "d-block w-100");
    			if (!src_url_equal(img.src, img_src_value = "https://crud.jonathansoto.mx/storage/products/" + /*presentation*/ ctx[17].cover)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "First slide");
    			add_location(img, file$5, 210, 54, 7244);
    			attr_dev(a, "href", "");
    			add_location(a, file$5, 209, 51, 7177);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, img);
    			append_dev(a, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(209:48) {#each data.presentations as presentation}",
    		ctx
    	});

    	return block;
    }

    // (208:45) <Carousel>
    function create_default_slot$1(ctx) {
    	let each_1_anchor;
    	let each_value_2 = /*data*/ ctx[10].presentations;
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*getProductById*/ 4) {
    				each_value_2 = /*data*/ ctx[10].presentations;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(208:45) <Carousel>",
    		ctx
    	});

    	return block;
    }

    // (331:63) {#each data.categories as categorie}
    function create_each_block_1(ctx) {
    	let td;
    	let t0_value = /*categorie*/ ctx[14].name + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			td = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			add_location(td, file$5, 331, 66, 15215);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			append_dev(td, t0);
    			append_dev(td, t1);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(331:63) {#each data.categories as categorie}",
    		ctx
    	});

    	return block;
    }

    // (356:63) {#each data.tags as tags}
    function create_each_block$2(ctx) {
    	let td;
    	let t_value = /*tags*/ ctx[11].name + "";
    	let t;

    	const block = {
    		c: function create() {
    			td = element("td");
    			t = text(t_value);
    			add_location(td, file$5, 356, 66, 17149);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			append_dev(td, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(356:63) {#each data.tags as tags}",
    		ctx
    	});

    	return block;
    }

    // (187:46)                           <!-- promise is pending -->                       {:then data}
    function create_pending_block_1$2(ctx) {
    	const block = {
    		c: noop$1,
    		m: noop$1,
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: noop$1
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$2.name,
    		type: "pending",
    		source: "(187:46)                           <!-- promise is pending -->                       {:then data}",
    		ctx
    	});

    	return block;
    }

    // (138:28)      Loading...  {:then data}
    function create_pending_block$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$2.name,
    		type: "pending",
    		source: "(138:28)      Loading...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let t0;
    	let link0;
    	let link1;
    	let script;
    	let script_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t1;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$2,
    		then: create_then_block$2,
    		catch: create_catch_block_1$2,
    		value: 10,
    		error: 20,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			link0 = element("link");
    			link1 = element("link");
    			script = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t1 = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Vista Detalle Productos";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$5, 105, 3, 2884);
    			attr_dev(link1, "href", "http://localhost:8080/libs/swiper/swiper-bundle.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$5, 108, 3, 2996);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$5, 114, 3, 3158);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$5, 116, 3, 3248);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$5, 121, 3, 3389);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$5, 126, 3, 3523);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$5, 131, 3, 3658);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function reloadPage(e) {
    	e.preventDefault();

    	Swal.fire({
    		title: "Recargara ventana",
    		text: "Se recargara la pagina para ver los cambios realizados :)",
    		icon: "info",
    		showCancelButton: false,
    		confirmButtonText: "Aceptar"
    	}).then(result => {
    		if (result.value) {
    			location.reload();
    		}
    	});
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(3, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ViewProduct', slots, []);
    	let { id } = $$props;
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = "/";
    	}

    	var myHeaders = new Headers();
    	myHeaders.append("Authorization", `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	var requestOptions = {
    		method: "GET",
    		headers: myHeaders,
    		redirect: "follow"
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	async function getProductById() {
    		const fetch_query = await fetch(`https://crud.jonathansoto.mx/api/products/${id}`, requestOptions);
    		const resp = await fetch_query.json();
    		return resp.data;
    	}

    	// Traer todas las categorias
    	async function getCategories() {
    		const fetch_query = await fetch("https://crud.jonathansoto.mx/api/categories", requestOptions);
    		const resp = await fetch_query.json();
    		return resp.data;
    	}

    	// Traer todas las marcas
    	async function getBrands() {
    		const fetch_query = await fetch("https://crud.jonathansoto.mx/api/brands", requestOptions);
    		const resp = await fetch_query.json();
    		return resp.data;
    	}

    	// Traer todas las etiquetas
    	async function getTags() {
    		const fetch_query = await fetch("https://crud.jonathansoto.mx/api/tags", requestOptions);
    		const resp = await fetch_query.json();
    		return resp.data;
    	}

    	$$self.$$.on_mount.push(function () {
    		if (id === undefined && !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])) {
    			console.warn("<ViewProduct> was created without expected prop 'id'");
    		}
    	});

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ViewProduct> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		id,
    		Sidebar,
    		HeaderApp,
    		Carousel,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		getProductById,
    		reloadPage,
    		getCategories,
    		getBrands,
    		getTags,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, getDataUserLoggin, getProductById];
    }

    class ViewProduct extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { id: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ViewProduct",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get id() {
    		throw new Error("<ViewProduct>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ViewProduct>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\views\ViewPresentacion.svelte generated by Svelte v3.52.0 */

    const file$4 = "src\\views\\ViewPresentacion.svelte";

    function create_fragment$4(ctx) {
    	let t0;
    	let link0;
    	let link1;
    	let script0;
    	let script0_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t1;
    	let main;
    	let div78;
    	let header;
    	let div9;
    	let div8;
    	let div1;
    	let div0;
    	let a0;
    	let span0;
    	let img0;
    	let img0_src_value;
    	let t2;
    	let span1;
    	let img1;
    	let img1_src_value;
    	let t3;
    	let a1;
    	let span2;
    	let img2;
    	let img2_src_value;
    	let t4;
    	let span3;
    	let img3;
    	let img3_src_value;
    	let t5;
    	let div7;
    	let div2;
    	let button0;
    	let i0;
    	let t6;
    	let div3;
    	let button1;
    	let i1;
    	let t7;
    	let div6;
    	let button2;
    	let span7;
    	let img4;
    	let img4_src_value;
    	let t8;
    	let span6;
    	let span4;
    	let t10;
    	let span5;
    	let t12;
    	let div5;
    	let h6;
    	let t14;
    	let a2;
    	let i2;
    	let t15;
    	let span8;
    	let t17;
    	let div4;
    	let t18;
    	let a3;
    	let i3;
    	let t19;
    	let span9;
    	let t21;
    	let div15;
    	let div10;
    	let a4;
    	let span10;
    	let img5;
    	let img5_src_value;
    	let t22;
    	let span11;
    	let img6;
    	let img6_src_value;
    	let t23;
    	let a5;
    	let span12;
    	let img7;
    	let img7_src_value;
    	let t24;
    	let span13;
    	let img8;
    	let img8_src_value;
    	let t25;
    	let button3;
    	let i4;
    	let t26;
    	let div13;
    	let div12;
    	let div11;
    	let t27;
    	let ul0;
    	let li0;
    	let span14;
    	let t29;
    	let li1;
    	let a6;
    	let i5;
    	let t30;
    	let span15;
    	let t32;
    	let li2;
    	let a7;
    	let i6;
    	let t33;
    	let span16;
    	let t35;
    	let li3;
    	let a8;
    	let i7;
    	let t36;
    	let span17;
    	let t38;
    	let li4;
    	let a9;
    	let i8;
    	let t39;
    	let span18;
    	let t41;
    	let li5;
    	let a10;
    	let i9;
    	let t42;
    	let span19;
    	let t44;
    	let li6;
    	let a11;
    	let i10;
    	let t45;
    	let span20;
    	let t47;
    	let div14;
    	let t48;
    	let div16;
    	let t49;
    	let div77;
    	let div75;
    	let div74;
    	let div20;
    	let div19;
    	let div18;
    	let h40;
    	let t51;
    	let div17;
    	let ol;
    	let li7;
    	let a12;
    	let t53;
    	let li8;
    	let t55;
    	let div73;
    	let div72;
    	let div71;
    	let div70;
    	let div69;
    	let div40;
    	let div39;
    	let div28;
    	let div25;
    	let div21;
    	let img9;
    	let img9_src_value;
    	let t56;
    	let div22;
    	let img10;
    	let img10_src_value;
    	let t57;
    	let div23;
    	let img11;
    	let img11_src_value;
    	let t58;
    	let div24;
    	let img12;
    	let img12_src_value;
    	let t59;
    	let div26;
    	let t60;
    	let div27;
    	let t61;
    	let div38;
    	let div37;
    	let div30;
    	let div29;
    	let img13;
    	let img13_src_value;
    	let t62;
    	let div32;
    	let div31;
    	let img14;
    	let img14_src_value;
    	let t63;
    	let div34;
    	let div33;
    	let img15;
    	let img15_src_value;
    	let t64;
    	let div36;
    	let div35;
    	let img16;
    	let img16_src_value;
    	let t65;
    	let div68;
    	let div67;
    	let div42;
    	let div41;
    	let h41;
    	let t67;
    	let div61;
    	let div48;
    	let div47;
    	let div46;
    	let div44;
    	let div43;
    	let i11;
    	let t68;
    	let div45;
    	let p0;
    	let t70;
    	let h50;
    	let t72;
    	let div54;
    	let div53;
    	let div52;
    	let div50;
    	let div49;
    	let i12;
    	let t73;
    	let div51;
    	let p1;
    	let t75;
    	let h51;
    	let t77;
    	let div60;
    	let div59;
    	let div58;
    	let div56;
    	let div55;
    	let i13;
    	let t78;
    	let div57;
    	let p2;
    	let t80;
    	let h52;
    	let t82;
    	let div62;
    	let h53;
    	let t84;
    	let p3;
    	let t86;
    	let div66;
    	let h54;
    	let t88;
    	let nav;
    	let ul1;
    	let li9;
    	let a13;
    	let t90;
    	let div65;
    	let div64;
    	let div63;
    	let table;
    	let tbody;
    	let tr0;
    	let th0;
    	let t92;
    	let td0;
    	let t94;
    	let tr1;
    	let th1;
    	let t96;
    	let td1;
    	let t98;
    	let tr2;
    	let th2;
    	let t100;
    	let td2;
    	let t102;
    	let tr3;
    	let th3;
    	let t104;
    	let td3;
    	let t106;
    	let tr4;
    	let th4;
    	let t108;
    	let td4;
    	let t110;
    	let tr5;
    	let th5;
    	let t112;
    	let td5;
    	let t114;
    	let div76;
    	let script1;
    	let script1_src_value;
    	let t115;
    	let script2;
    	let script2_src_value;
    	let t116;
    	let script3;
    	let script3_src_value;
    	let t117;
    	let script4;
    	let script4_src_value;
    	let t118;
    	let script5;
    	let script5_src_value;
    	let t119;
    	let script6;
    	let script6_src_value;
    	let t120;
    	let script7;
    	let script7_src_value;
    	let t121;
    	let script8;
    	let script8_src_value;
    	let t122;
    	let script9;
    	let script9_src_value;

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			link0 = element("link");
    			link1 = element("link");
    			script0 = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t1 = space();
    			main = element("main");
    			div78 = element("div");
    			header = element("header");
    			div9 = element("div");
    			div8 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			span0 = element("span");
    			img0 = element("img");
    			t2 = space();
    			span1 = element("span");
    			img1 = element("img");
    			t3 = space();
    			a1 = element("a");
    			span2 = element("span");
    			img2 = element("img");
    			t4 = space();
    			span3 = element("span");
    			img3 = element("img");
    			t5 = space();
    			div7 = element("div");
    			div2 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t6 = space();
    			div3 = element("div");
    			button1 = element("button");
    			i1 = element("i");
    			t7 = space();
    			div6 = element("div");
    			button2 = element("button");
    			span7 = element("span");
    			img4 = element("img");
    			t8 = space();
    			span6 = element("span");
    			span4 = element("span");
    			span4.textContent = "Anna Adame";
    			t10 = space();
    			span5 = element("span");
    			span5.textContent = "Founder";
    			t12 = space();
    			div5 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Bienvenida Anna!";
    			t14 = space();
    			a2 = element("a");
    			i2 = element("i");
    			t15 = space();
    			span8 = element("span");
    			span8.textContent = "Perfil";
    			t17 = space();
    			div4 = element("div");
    			t18 = space();
    			a3 = element("a");
    			i3 = element("i");
    			t19 = space();
    			span9 = element("span");
    			span9.textContent = "Salir";
    			t21 = space();
    			div15 = element("div");
    			div10 = element("div");
    			a4 = element("a");
    			span10 = element("span");
    			img5 = element("img");
    			t22 = space();
    			span11 = element("span");
    			img6 = element("img");
    			t23 = space();
    			a5 = element("a");
    			span12 = element("span");
    			img7 = element("img");
    			t24 = space();
    			span13 = element("span");
    			img8 = element("img");
    			t25 = space();
    			button3 = element("button");
    			i4 = element("i");
    			t26 = space();
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			t27 = space();
    			ul0 = element("ul");
    			li0 = element("li");
    			span14 = element("span");
    			span14.textContent = "Menú";
    			t29 = space();
    			li1 = element("li");
    			a6 = element("a");
    			i5 = element("i");
    			t30 = space();
    			span15 = element("span");
    			span15.textContent = "Usuarios";
    			t32 = space();
    			li2 = element("li");
    			a7 = element("a");
    			i6 = element("i");
    			t33 = space();
    			span16 = element("span");
    			span16.textContent = "Clientes";
    			t35 = space();
    			li3 = element("li");
    			a8 = element("a");
    			i7 = element("i");
    			t36 = space();
    			span17 = element("span");
    			span17.textContent = "Productos";
    			t38 = space();
    			li4 = element("li");
    			a9 = element("a");
    			i8 = element("i");
    			t39 = space();
    			span18 = element("span");
    			span18.textContent = "Catálogos";
    			t41 = space();
    			li5 = element("li");
    			a10 = element("a");
    			i9 = element("i");
    			t42 = space();
    			span19 = element("span");
    			span19.textContent = "Cupones";
    			t44 = space();
    			li6 = element("li");
    			a11 = element("a");
    			i10 = element("i");
    			t45 = space();
    			span20 = element("span");
    			span20.textContent = "Ordenes";
    			t47 = space();
    			div14 = element("div");
    			t48 = space();
    			div16 = element("div");
    			t49 = space();
    			div77 = element("div");
    			div75 = element("div");
    			div74 = element("div");
    			div20 = element("div");
    			div19 = element("div");
    			div18 = element("div");
    			h40 = element("h4");
    			h40.textContent = "Vista de Detalle Presentaciones";
    			t51 = space();
    			div17 = element("div");
    			ol = element("ol");
    			li7 = element("li");
    			a12 = element("a");
    			a12.textContent = "Productos";
    			t53 = space();
    			li8 = element("li");
    			li8.textContent = "Vista de Detalle Presentaciones";
    			t55 = space();
    			div73 = element("div");
    			div72 = element("div");
    			div71 = element("div");
    			div70 = element("div");
    			div69 = element("div");
    			div40 = element("div");
    			div39 = element("div");
    			div28 = element("div");
    			div25 = element("div");
    			div21 = element("div");
    			img9 = element("img");
    			t56 = space();
    			div22 = element("div");
    			img10 = element("img");
    			t57 = space();
    			div23 = element("div");
    			img11 = element("img");
    			t58 = space();
    			div24 = element("div");
    			img12 = element("img");
    			t59 = space();
    			div26 = element("div");
    			t60 = space();
    			div27 = element("div");
    			t61 = space();
    			div38 = element("div");
    			div37 = element("div");
    			div30 = element("div");
    			div29 = element("div");
    			img13 = element("img");
    			t62 = space();
    			div32 = element("div");
    			div31 = element("div");
    			img14 = element("img");
    			t63 = space();
    			div34 = element("div");
    			div33 = element("div");
    			img15 = element("img");
    			t64 = space();
    			div36 = element("div");
    			div35 = element("div");
    			img16 = element("img");
    			t65 = space();
    			div68 = element("div");
    			div67 = element("div");
    			div42 = element("div");
    			div41 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Sudadera de Manga Completa para Hombre (Rosa)";
    			t67 = space();
    			div61 = element("div");
    			div48 = element("div");
    			div47 = element("div");
    			div46 = element("div");
    			div44 = element("div");
    			div43 = element("div");
    			i11 = element("i");
    			t68 = space();
    			div45 = element("div");
    			p0 = element("p");
    			p0.textContent = "Precio:";
    			t70 = space();
    			h50 = element("h5");
    			h50.textContent = "$120.40";
    			t72 = space();
    			div54 = element("div");
    			div53 = element("div");
    			div52 = element("div");
    			div50 = element("div");
    			div49 = element("div");
    			i12 = element("i");
    			t73 = space();
    			div51 = element("div");
    			p1 = element("p");
    			p1.textContent = "No. de Ordenes :";
    			t75 = space();
    			h51 = element("h5");
    			h51.textContent = "2,234";
    			t77 = space();
    			div60 = element("div");
    			div59 = element("div");
    			div58 = element("div");
    			div56 = element("div");
    			div55 = element("div");
    			i13 = element("i");
    			t78 = space();
    			div57 = element("div");
    			p2 = element("p");
    			p2.textContent = "Stock Disponible :";
    			t80 = space();
    			h52 = element("h5");
    			h52.textContent = "1,230";
    			t82 = space();
    			div62 = element("div");
    			h53 = element("h5");
    			h53.textContent = "Descripción :";
    			t84 = space();
    			p3 = element("p");
    			p3.textContent = "Sudadera rosa de rayas de hombre Tommy Hilfiger. Confeccionado con algodón. La composición del material es 100%\r\n                                                algodón orgánico. Esta es una de las marcas de estilo de vida de diseñadores líderes en el mundo y es reconocida\r\n                                                internacionalmente por celebrar la esencia del estilo cool estadounidense clásico, presentando diseños preppy con un giro.";
    			t86 = space();
    			div66 = element("div");
    			h54 = element("h5");
    			h54.textContent = "Descripción del Producto en su Presentación";
    			t88 = space();
    			nav = element("nav");
    			ul1 = element("ul");
    			li9 = element("li");
    			a13 = element("a");
    			a13.textContent = "Especificaciones";
    			t90 = space();
    			div65 = element("div");
    			div64 = element("div");
    			div63 = element("div");
    			table = element("table");
    			tbody = element("tbody");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Código de la presentación";
    			t92 = space();
    			td0 = element("td");
    			td0.textContent = "2101";
    			t94 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Peso en gramos";
    			t96 = space();
    			td1 = element("td");
    			td1.textContent = "T-Shirt";
    			t98 = space();
    			tr2 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Estatus";
    			t100 = space();
    			td2 = element("td");
    			td2.textContent = "Active";
    			t102 = space();
    			tr3 = element("tr");
    			th3 = element("th");
    			th3.textContent = "Stock";
    			t104 = space();
    			td3 = element("td");
    			td3.textContent = "750";
    			t106 = space();
    			tr4 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Stock mínimo";
    			t108 = space();
    			td4 = element("td");
    			td4.textContent = "5";
    			t110 = space();
    			tr5 = element("tr");
    			th5 = element("th");
    			th5.textContent = "Stock máximo";
    			t112 = space();
    			td5 = element("td");
    			td5.textContent = "100";
    			t114 = space();
    			div76 = element("div");
    			script1 = element("script");
    			t115 = space();
    			script2 = element("script");
    			t116 = space();
    			script3 = element("script");
    			t117 = space();
    			script4 = element("script");
    			t118 = space();
    			script5 = element("script");
    			t119 = space();
    			script6 = element("script");
    			t120 = space();
    			script7 = element("script");
    			t121 = space();
    			script8 = element("script");
    			t122 = space();
    			script9 = element("script");
    			document.title = "DevEcommerce | Vista Detalle Presentaciones";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$4, 12, 5, 301);
    			attr_dev(link1, "href", "http://localhost:8080/libs/swiper/swiper-bundle.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$4, 15, 5, 415);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$4, 18, 5, 561);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$4, 20, 5, 655);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$4, 22, 5, 779);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$4, 24, 5, 896);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$4, 26, 5, 1014);
    			if (!src_url_equal(img0.src, img0_src_value = "http://localhost:8080/public/images/logo-sm.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "");
    			attr_dev(img0, "height", "22");
    			add_location(img0, file$4, 42, 28, 1559);
    			attr_dev(span0, "class", "logo-sm");
    			add_location(span0, file$4, 41, 24, 1507);
    			if (!src_url_equal(img1.src, img1_src_value = "http://localhost:8080/public/images/logo-dark.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "");
    			attr_dev(img1, "height", "17");
    			add_location(img1, file$4, 45, 28, 1748);
    			attr_dev(span1, "class", "logo-lg");
    			add_location(span1, file$4, 44, 24, 1696);
    			attr_dev(a0, "href", "index.html");
    			attr_dev(a0, "class", "logo logo-dark");
    			add_location(a0, file$4, 40, 20, 1437);
    			if (!src_url_equal(img2.src, img2_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "");
    			attr_dev(img2, "height", "22");
    			add_location(img2, file$4, 51, 28, 2034);
    			attr_dev(span2, "class", "logo-sm");
    			add_location(span2, file$4, 50, 24, 1982);
    			if (!src_url_equal(img3.src, img3_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "");
    			attr_dev(img3, "height", "17");
    			add_location(img3, file$4, 54, 28, 2216);
    			attr_dev(span3, "class", "logo-lg");
    			add_location(span3, file$4, 53, 24, 2164);
    			attr_dev(a1, "href", "index.html");
    			attr_dev(a1, "class", "logo logo-light");
    			add_location(a1, file$4, 49, 20, 1911);
    			attr_dev(div0, "class", "navbar-brand-box horizontal-logo");
    			add_location(div0, file$4, 39, 16, 1369);
    			attr_dev(div1, "class", "d-flex");
    			add_location(div1, file$4, 37, 12, 1300);
    			attr_dev(i0, "class", "bx bx-fullscreen fs-22");
    			add_location(i0, file$4, 63, 20, 2675);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-icon btn-topbar btn-ghost-secondary rounded-circle shadow-none");
    			attr_dev(button0, "data-toggle", "fullscreen");
    			add_location(button0, file$4, 62, 16, 2527);
    			attr_dev(div2, "class", "ms-1 header-item d-none d-sm-flex");
    			add_location(div2, file$4, 61, 12, 2462);
    			attr_dev(i1, "class", "bx bx-moon fs-22");
    			add_location(i1, file$4, 69, 20, 2980);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-icon btn-topbar btn-ghost-secondary rounded-circle light-dark-mode shadow-none");
    			add_location(button1, file$4, 68, 16, 2841);
    			attr_dev(div3, "class", "ms-1 header-item d-none d-sm-flex");
    			add_location(div3, file$4, 67, 12, 2776);
    			attr_dev(img4, "class", "rounded-circle header-profile-user");
    			if (!src_url_equal(img4.src, img4_src_value = "http://localhost:8080/images/users/avatar-1.jpg")) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "Header Avatar");
    			add_location(img4, file$4, 76, 28, 3397);
    			attr_dev(span4, "class", "d-none d-xl-inline-block ms-1 fw-medium user-name-text");
    			add_location(span4, file$4, 78, 32, 3616);
    			attr_dev(span5, "class", "d-none d-xl-block ms-1 fs-12 text-muted user-name-sub-text");
    			add_location(span5, file$4, 79, 32, 3736);
    			attr_dev(span6, "class", "text-start ms-xl-2");
    			add_location(span6, file$4, 77, 28, 3549);
    			attr_dev(span7, "class", "d-flex align-items-center");
    			add_location(span7, file$4, 75, 24, 3327);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn shadow-none");
    			attr_dev(button2, "id", "page-header-user-dropdown");
    			attr_dev(button2, "data-bs-toggle", "dropdown");
    			attr_dev(button2, "aria-haspopup", "true");
    			attr_dev(button2, "aria-expanded", "false");
    			add_location(button2, file$4, 74, 20, 3155);
    			attr_dev(h6, "class", "dropdown-header");
    			add_location(h6, file$4, 85, 24, 4055);
    			attr_dev(i2, "class", "mdi mdi-account-circle text-muted fs-16 align-middle me-1");
    			add_location(i2, file$4, 86, 75, 4181);
    			attr_dev(span8, "class", "align-middle");
    			add_location(span8, file$4, 86, 149, 4255);
    			attr_dev(a2, "class", "dropdown-item");
    			attr_dev(a2, "href", "pages-profile.html");
    			add_location(a2, file$4, 86, 24, 4130);
    			attr_dev(div4, "class", "dropdown-divider");
    			add_location(div4, file$4, 88, 24, 4347);
    			attr_dev(i3, "class", "mdi mdi-logout text-muted fs-16 align-middle me-1");
    			add_location(i3, file$4, 90, 79, 4490);
    			attr_dev(span9, "class", "align-middle");
    			attr_dev(span9, "data-key", "t-logout");
    			add_location(span9, file$4, 90, 145, 4556);
    			attr_dev(a3, "class", "dropdown-item");
    			attr_dev(a3, "href", "auth-logout-basic.html");
    			add_location(a3, file$4, 90, 24, 4435);
    			attr_dev(div5, "class", "dropdown-menu dropdown-menu-end");
    			add_location(div5, file$4, 83, 20, 3946);
    			attr_dev(div6, "class", "dropdown ms-sm-3 header-item topbar-user");
    			add_location(div6, file$4, 73, 16, 3079);
    			attr_dev(div7, "class", "d-flex align-items-center");
    			add_location(div7, file$4, 60, 12, 2409);
    			attr_dev(div8, "class", "navbar-header");
    			add_location(div8, file$4, 36, 8, 1259);
    			attr_dev(div9, "class", "layout-width");
    			add_location(div9, file$4, 35, 4, 1223);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$4, 34, 4, 1192);
    			if (!src_url_equal(img5.src, img5_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img5, "src", img5_src_value);
    			attr_dev(img5, "alt", "");
    			attr_dev(img5, "height", "22");
    			add_location(img5, file$4, 105, 20, 5035);
    			attr_dev(span10, "class", "logo-sm");
    			add_location(span10, file$4, 104, 16, 4991);
    			if (!src_url_equal(img6.src, img6_src_value = "http://localhost:8080/images/logo-dark.png")) attr_dev(img6, "src", img6_src_value);
    			attr_dev(img6, "alt", "");
    			attr_dev(img6, "height", "17");
    			add_location(img6, file$4, 108, 20, 5193);
    			attr_dev(span11, "class", "logo-lg");
    			add_location(span11, file$4, 107, 16, 5149);
    			attr_dev(a4, "href", "index.html");
    			attr_dev(a4, "class", "logo logo-dark");
    			add_location(a4, file$4, 103, 12, 4929);
    			if (!src_url_equal(img7.src, img7_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img7, "src", img7_src_value);
    			attr_dev(img7, "alt", "");
    			attr_dev(img7, "height", "22");
    			add_location(img7, file$4, 114, 20, 5462);
    			attr_dev(span12, "class", "logo-sm");
    			add_location(span12, file$4, 113, 16, 5418);
    			if (!src_url_equal(img8.src, img8_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img8, "src", img8_src_value);
    			attr_dev(img8, "alt", "");
    			attr_dev(img8, "height", "17");
    			add_location(img8, file$4, 117, 20, 5620);
    			attr_dev(span13, "class", "logo-lg");
    			add_location(span13, file$4, 116, 16, 5576);
    			attr_dev(a5, "href", "index.html");
    			attr_dev(a5, "class", "logo logo-light");
    			add_location(a5, file$4, 112, 12, 5355);
    			attr_dev(i4, "class", "ri-record-circle-line");
    			add_location(i4, file$4, 121, 16, 5884);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "btn btn-sm p-0 fs-20 header-item float-end btn-vertical-sm-hover");
    			attr_dev(button3, "id", "vertical-hover");
    			add_location(button3, file$4, 120, 12, 5751);
    			attr_dev(div10, "class", "navbar-brand-box");
    			add_location(div10, file$4, 101, 8, 4854);
    			attr_dev(div11, "id", "two-column-menu");
    			add_location(div11, file$4, 128, 16, 6055);
    			attr_dev(span14, "data-key", "t-menu");
    			add_location(span14, file$4, 131, 43, 6207);
    			attr_dev(li0, "class", "menu-title");
    			add_location(li0, file$4, 131, 20, 6184);
    			attr_dev(i5, "class", "mdi mdi-speedometer");
    			add_location(i5, file$4, 134, 28, 6402);
    			attr_dev(span15, "data-key", "t-dashboards");
    			add_location(span15, file$4, 134, 64, 6438);
    			attr_dev(a6, "class", "nav-link menu-link");
    			attr_dev(a6, "href", "#sidebarDashboards");
    			add_location(a6, file$4, 133, 24, 6316);
    			attr_dev(li1, "class", "nav-item");
    			add_location(li1, file$4, 132, 20, 6269);
    			attr_dev(i6, "class", "mdi mdi-view-grid-plus-outline");
    			add_location(i6, file$4, 140, 28, 6717);
    			attr_dev(span16, "data-key", "t-apps");
    			add_location(span16, file$4, 140, 75, 6764);
    			attr_dev(a7, "class", "nav-link menu-link");
    			attr_dev(a7, "href", "#sidebarApps");
    			add_location(a7, file$4, 139, 24, 6636);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$4, 138, 20, 6589);
    			attr_dev(i7, "class", "mdi mdi-view-carousel-outline");
    			add_location(i7, file$4, 149, 28, 7116);
    			attr_dev(span17, "data-key", "t-layouts");
    			add_location(span17, file$4, 149, 74, 7162);
    			attr_dev(a8, "class", "nav-link menu-link");
    			attr_dev(a8, "href", "#sidebarLayouts");
    			add_location(a8, file$4, 148, 24, 7033);
    			attr_dev(li3, "class", "nav-item");
    			add_location(li3, file$4, 147, 20, 6986);
    			attr_dev(i8, "class", "mdi mdi-account-circle-outline");
    			add_location(i8, file$4, 158, 28, 7464);
    			attr_dev(span18, "data-key", "t-authentication");
    			add_location(span18, file$4, 158, 75, 7511);
    			attr_dev(a9, "class", "nav-link menu-link");
    			attr_dev(a9, "href", "#sidebarAuth");
    			add_location(a9, file$4, 157, 24, 7384);
    			attr_dev(li4, "class", "nav-item");
    			add_location(li4, file$4, 156, 20, 7337);
    			attr_dev(i9, "class", "mdi mdi-sticker-text-outline");
    			add_location(i9, file$4, 167, 28, 7800);
    			attr_dev(span19, "data-key", "t-pages");
    			add_location(span19, file$4, 167, 73, 7845);
    			attr_dev(a10, "class", "nav-link menu-link");
    			attr_dev(a10, "href", "#sidebarPages");
    			add_location(a10, file$4, 166, 24, 7719);
    			attr_dev(li5, "class", "nav-item");
    			add_location(li5, file$4, 165, 20, 7672);
    			attr_dev(i10, "class", "ri-rocket-line");
    			add_location(i10, file$4, 174, 28, 8121);
    			attr_dev(span20, "data-key", "t-landing");
    			add_location(span20, file$4, 174, 59, 8152);
    			attr_dev(a11, "class", "nav-link menu-link");
    			attr_dev(a11, "href", "#sidebarLanding");
    			add_location(a11, file$4, 173, 24, 8038);
    			attr_dev(li6, "class", "nav-item");
    			add_location(li6, file$4, 172, 20, 7991);
    			attr_dev(ul0, "class", "navbar-nav");
    			attr_dev(ul0, "id", "navbar-nav");
    			add_location(ul0, file$4, 130, 16, 6123);
    			attr_dev(div12, "class", "container-fluid");
    			add_location(div12, file$4, 126, 12, 6006);
    			attr_dev(div13, "id", "scrollbar");
    			add_location(div13, file$4, 125, 8, 5972);
    			attr_dev(div14, "class", "sidebar-background");
    			add_location(div14, file$4, 185, 8, 8381);
    			attr_dev(div15, "class", "app-menu navbar-menu");
    			add_location(div15, file$4, 99, 4, 4787);
    			attr_dev(div16, "class", "vertical-overlay");
    			add_location(div16, file$4, 189, 4, 8498);
    			attr_dev(h40, "class", "mb-sm-0");
    			add_location(h40, file$4, 203, 28, 9103);
    			attr_dev(a12, "href", "#!");
    			add_location(a12, file$4, 207, 64, 9348);
    			attr_dev(li7, "class", "breadcrumb-item");
    			add_location(li7, file$4, 207, 36, 9320);
    			attr_dev(li8, "class", "breadcrumb-item active");
    			add_location(li8, file$4, 208, 36, 9417);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$4, 206, 32, 9255);
    			attr_dev(div17, "class", "page-title-right");
    			add_location(div17, file$4, 205, 28, 9191);
    			attr_dev(div18, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div18, file$4, 202, 24, 8992);
    			attr_dev(div19, "class", "col-12");
    			add_location(div19, file$4, 201, 20, 8946);
    			attr_dev(div20, "class", "row");
    			add_location(div20, file$4, 200, 17, 8907);
    			if (!src_url_equal(img9.src, img9_src_value = "http://localhost:8080/images/products/img-8.png")) attr_dev(img9, "src", img9_src_value);
    			attr_dev(img9, "alt", "");
    			attr_dev(img9, "class", "img-fluid d-block");
    			add_location(img9, file$4, 227, 56, 10423);
    			attr_dev(div21, "class", "swiper-slide");
    			add_location(div21, file$4, 226, 52, 10339);
    			if (!src_url_equal(img10.src, img10_src_value = "http://localhost:8080/images/products/img-6.png")) attr_dev(img10, "src", img10_src_value);
    			attr_dev(img10, "alt", "");
    			attr_dev(img10, "class", "img-fluid d-block");
    			add_location(img10, file$4, 230, 56, 10715);
    			attr_dev(div22, "class", "swiper-slide");
    			add_location(div22, file$4, 229, 52, 10631);
    			if (!src_url_equal(img11.src, img11_src_value = "http://localhost:8080/images/products/img-1.png")) attr_dev(img11, "src", img11_src_value);
    			attr_dev(img11, "alt", "");
    			attr_dev(img11, "class", "img-fluid d-block");
    			add_location(img11, file$4, 233, 56, 11007);
    			attr_dev(div23, "class", "swiper-slide");
    			add_location(div23, file$4, 232, 52, 10923);
    			if (!src_url_equal(img12.src, img12_src_value = "http://localhost:8080/images/products/img-8.png")) attr_dev(img12, "src", img12_src_value);
    			attr_dev(img12, "alt", "");
    			attr_dev(img12, "class", "img-fluid d-block");
    			add_location(img12, file$4, 236, 56, 11299);
    			attr_dev(div24, "class", "swiper-slide");
    			add_location(div24, file$4, 235, 52, 11215);
    			attr_dev(div25, "class", "swiper-wrapper");
    			add_location(div25, file$4, 225, 48, 10257);
    			attr_dev(div26, "class", "swiper-button-next bg-white shadow");
    			add_location(div26, file$4, 239, 48, 11559);
    			attr_dev(div27, "class", "swiper-button-prev bg-white shadow");
    			add_location(div27, file$4, 240, 48, 11663);
    			attr_dev(div28, "class", "swiper product-thumbnail-slider p-2 rounded bg-light");
    			add_location(div28, file$4, 224, 44, 10141);
    			if (!src_url_equal(img13.src, img13_src_value = "http://localhost:8080/images/products/img-8.png")) attr_dev(img13, "src", img13_src_value);
    			attr_dev(img13, "alt", "");
    			attr_dev(img13, "class", "img-fluid d-block");
    			add_location(img13, file$4, 247, 60, 12246);
    			attr_dev(div29, "class", "nav-slide-item");
    			add_location(div29, file$4, 246, 56, 12156);
    			attr_dev(div30, "class", "swiper-slide");
    			add_location(div30, file$4, 245, 52, 12072);
    			if (!src_url_equal(img14.src, img14_src_value = "http://localhost:8080/images/products/img-6.png")) attr_dev(img14, "src", img14_src_value);
    			attr_dev(img14, "alt", "");
    			attr_dev(img14, "class", "img-fluid d-block");
    			add_location(img14, file$4, 252, 60, 12692);
    			attr_dev(div31, "class", "nav-slide-item");
    			add_location(div31, file$4, 251, 56, 12602);
    			attr_dev(div32, "class", "swiper-slide");
    			add_location(div32, file$4, 250, 52, 12518);
    			if (!src_url_equal(img15.src, img15_src_value = "http://localhost:8080/images/products/img-1.png")) attr_dev(img15, "src", img15_src_value);
    			attr_dev(img15, "alt", "");
    			attr_dev(img15, "class", "img-fluid d-block");
    			add_location(img15, file$4, 257, 60, 13138);
    			attr_dev(div33, "class", "nav-slide-item");
    			add_location(div33, file$4, 256, 56, 13048);
    			attr_dev(div34, "class", "swiper-slide");
    			add_location(div34, file$4, 255, 52, 12964);
    			if (!src_url_equal(img16.src, img16_src_value = "http://localhost:8080/images/products/img-8.png")) attr_dev(img16, "src", img16_src_value);
    			attr_dev(img16, "alt", "");
    			attr_dev(img16, "class", "img-fluid d-block");
    			add_location(img16, file$4, 262, 60, 13584);
    			attr_dev(div35, "class", "nav-slide-item");
    			add_location(div35, file$4, 261, 56, 13494);
    			attr_dev(div36, "class", "swiper-slide");
    			add_location(div36, file$4, 260, 52, 13410);
    			attr_dev(div37, "class", "swiper-wrapper");
    			add_location(div37, file$4, 244, 48, 11990);
    			attr_dev(div38, "class", "swiper product-nav-slider mt-2");
    			add_location(div38, file$4, 243, 44, 11896);
    			attr_dev(div39, "class", "product-img-slider sticky-side-div");
    			add_location(div39, file$4, 223, 40, 10047);
    			attr_dev(div40, "class", "col-xl-4 col-md-8 mx-auto");
    			add_location(div40, file$4, 222, 36, 9966);
    			add_location(h41, file$4, 276, 52, 14456);
    			attr_dev(div41, "class", "flex-grow-1");
    			add_location(div41, file$4, 275, 48, 14377);
    			attr_dev(div42, "class", "d-flex");
    			add_location(div42, file$4, 274, 44, 14307);
    			attr_dev(i11, "class", "ri-money-dollar-circle-fill");
    			add_location(i11, file$4, 289, 68, 15366);
    			attr_dev(div43, "class", "avatar-title rounded bg-transparent text-success fs-24");
    			add_location(div43, file$4, 288, 64, 15228);
    			attr_dev(div44, "class", "avatar-sm me-2");
    			add_location(div44, file$4, 287, 60, 15134);
    			attr_dev(p0, "class", "text-muted mb-1");
    			add_location(p0, file$4, 293, 64, 15702);
    			attr_dev(h50, "class", "mb-0");
    			add_location(h50, file$4, 294, 64, 15806);
    			attr_dev(div45, "class", "flex-grow-1");
    			add_location(div45, file$4, 292, 60, 15611);
    			attr_dev(div46, "class", "d-flex align-items-center");
    			add_location(div46, file$4, 286, 56, 15033);
    			attr_dev(div47, "class", "p-2 border border-dashed rounded");
    			add_location(div47, file$4, 285, 52, 14929);
    			attr_dev(div48, "class", "col-lg-3 col-sm-6");
    			add_location(div48, file$4, 284, 48, 14844);
    			attr_dev(i12, "class", "ri-file-copy-2-fill");
    			add_location(i12, file$4, 305, 68, 16721);
    			attr_dev(div49, "class", "avatar-title rounded bg-transparent text-success fs-24");
    			add_location(div49, file$4, 304, 64, 16583);
    			attr_dev(div50, "class", "avatar-sm me-2");
    			add_location(div50, file$4, 303, 60, 16489);
    			attr_dev(p1, "class", "text-muted mb-1");
    			add_location(p1, file$4, 309, 64, 17049);
    			attr_dev(h51, "class", "mb-0");
    			add_location(h51, file$4, 310, 64, 17162);
    			attr_dev(div51, "class", "flex-grow-1");
    			add_location(div51, file$4, 308, 60, 16958);
    			attr_dev(div52, "class", "d-flex align-items-center");
    			add_location(div52, file$4, 302, 56, 16388);
    			attr_dev(div53, "class", "p-2 border border-dashed rounded");
    			add_location(div53, file$4, 301, 52, 16284);
    			attr_dev(div54, "class", "col-lg-3 col-sm-6");
    			add_location(div54, file$4, 300, 48, 16199);
    			attr_dev(i13, "class", "ri-stack-fill");
    			add_location(i13, file$4, 321, 68, 18075);
    			attr_dev(div55, "class", "avatar-title rounded bg-transparent text-success fs-24");
    			add_location(div55, file$4, 320, 64, 17937);
    			attr_dev(div56, "class", "avatar-sm me-2");
    			add_location(div56, file$4, 319, 60, 17843);
    			attr_dev(p2, "class", "text-muted mb-1");
    			add_location(p2, file$4, 325, 64, 18397);
    			attr_dev(h52, "class", "mb-0");
    			add_location(h52, file$4, 326, 64, 18512);
    			attr_dev(div57, "class", "flex-grow-1");
    			add_location(div57, file$4, 324, 60, 18306);
    			attr_dev(div58, "class", "d-flex align-items-center");
    			add_location(div58, file$4, 318, 56, 17742);
    			attr_dev(div59, "class", "p-2 border border-dashed rounded");
    			add_location(div59, file$4, 317, 52, 17638);
    			attr_dev(div60, "class", "col-lg-3 col-sm-6");
    			add_location(div60, file$4, 316, 48, 17553);
    			attr_dev(div61, "class", "row mt-4");
    			add_location(div61, file$4, 283, 44, 14772);
    			attr_dev(h53, "class", "fs-14");
    			add_location(h53, file$4, 336, 48, 19075);
    			add_location(p3, file$4, 337, 48, 19161);
    			attr_dev(div62, "class", "mt-4 text-muted");
    			add_location(div62, file$4, 335, 44, 18996);
    			attr_dev(h54, "class", "fs-14 mb-3");
    			add_location(h54, file$4, 346, 48, 19846);
    			attr_dev(a13, "class", "nav-link active");
    			attr_dev(a13, "id", "nav-speci-tab");
    			attr_dev(a13, "data-bs-toggle", "tab");
    			attr_dev(a13, "href", "#nav-speci");
    			attr_dev(a13, "role", "tab");
    			attr_dev(a13, "aria-controls", "nav-speci");
    			attr_dev(a13, "aria-selected", "true");
    			add_location(a13, file$4, 350, 60, 20248);
    			attr_dev(li9, "class", "nav-item");
    			add_location(li9, file$4, 349, 56, 20165);
    			attr_dev(ul1, "class", "nav nav-tabs nav-tabs-custom nav-success");
    			attr_dev(ul1, "id", "nav-tab");
    			attr_dev(ul1, "role", "tablist");
    			add_location(ul1, file$4, 348, 52, 20026);
    			add_location(nav, file$4, 347, 48, 19967);
    			attr_dev(th0, "scope", "row");
    			set_style(th0, "width", "200px");
    			add_location(th0, file$4, 361, 72, 21318);
    			add_location(td0, file$4, 362, 72, 21460);
    			add_location(tr0, file$4, 360, 68, 21240);
    			attr_dev(th1, "scope", "row");
    			set_style(th1, "width", "200px");
    			add_location(th1, file$4, 365, 72, 21696);
    			add_location(td1, file$4, 366, 72, 21827);
    			add_location(tr1, file$4, 364, 68, 21618);
    			attr_dev(th2, "scope", "row");
    			set_style(th2, "width", "200px");
    			add_location(th2, file$4, 369, 72, 22066);
    			add_location(td2, file$4, 370, 72, 22190);
    			add_location(tr2, file$4, 368, 68, 21988);
    			attr_dev(th3, "scope", "row");
    			set_style(th3, "width", "200px");
    			add_location(th3, file$4, 373, 72, 22428);
    			add_location(td3, file$4, 374, 72, 22550);
    			add_location(tr3, file$4, 372, 68, 22350);
    			attr_dev(th4, "scope", "row");
    			set_style(th4, "width", "200px");
    			add_location(th4, file$4, 377, 72, 22785);
    			add_location(td4, file$4, 378, 72, 22914);
    			add_location(tr4, file$4, 376, 68, 22707);
    			attr_dev(th5, "scope", "row");
    			set_style(th5, "width", "200px");
    			add_location(th5, file$4, 381, 72, 23147);
    			add_location(td5, file$4, 382, 72, 23276);
    			add_location(tr5, file$4, 380, 68, 23069);
    			add_location(tbody, file$4, 359, 64, 21163);
    			attr_dev(table, "class", "table mb-0");
    			add_location(table, file$4, 358, 60, 21071);
    			attr_dev(div63, "class", "table-responsive");
    			add_location(div63, file$4, 357, 56, 20979);
    			attr_dev(div64, "class", "tab-pane fade show active");
    			attr_dev(div64, "id", "nav-speci");
    			attr_dev(div64, "role", "tabpanel");
    			attr_dev(div64, "aria-labelledby", "nav-speci-tab");
    			add_location(div64, file$4, 356, 52, 20819);
    			attr_dev(div65, "class", "tab-content border border-top-0 p-4");
    			attr_dev(div65, "id", "nav-tabContent");
    			add_location(div65, file$4, 355, 48, 20696);
    			attr_dev(div66, "class", "product-content mt-5");
    			add_location(div66, file$4, 345, 44, 19762);
    			attr_dev(div67, "class", "mt-xl-0 mt-5");
    			add_location(div67, file$4, 273, 40, 14235);
    			attr_dev(div68, "class", "col-xl-8");
    			add_location(div68, file$4, 272, 36, 14171);
    			attr_dev(div69, "class", "row gx-lg-5");
    			add_location(div69, file$4, 221, 32, 9903);
    			attr_dev(div70, "class", "card-body");
    			add_location(div70, file$4, 220, 28, 9846);
    			attr_dev(div71, "class", "card");
    			add_location(div71, file$4, 219, 24, 9798);
    			attr_dev(div72, "class", "col-lg-12");
    			add_location(div72, file$4, 218, 20, 9749);
    			attr_dev(div73, "class", "row");
    			add_location(div73, file$4, 217, 16, 9710);
    			attr_dev(div74, "class", "container-fluid");
    			add_location(div74, file$4, 197, 12, 8813);
    			attr_dev(div75, "class", "page-content");
    			add_location(div75, file$4, 196, 8, 8773);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$4, 432, 4, 24771);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$4, 433, 4, 24864);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$4, 434, 4, 24947);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$4, 435, 4, 25027);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$4, 436, 4, 25112);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$4, 437, 4, 25199);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/swiper/swiper-bundle.min.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$4, 440, 4, 25295);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/pages/ecommerce-product-details.init.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$4, 443, 4, 25426);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/app.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$4, 446, 4, 25543);
    			add_location(div76, file$4, 427, 0, 24592);
    			attr_dev(div77, "class", "main-content");
    			add_location(div77, file$4, 194, 4, 8735);
    			attr_dev(div78, "id", "layout-wrapper");
    			add_location(div78, file$4, 32, 0, 1159);
    			add_location(main, file$4, 30, 0, 1125);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script0);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div78);
    			append_dev(div78, header);
    			append_dev(header, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(a0, span0);
    			append_dev(span0, img0);
    			append_dev(a0, t2);
    			append_dev(a0, span1);
    			append_dev(span1, img1);
    			append_dev(div0, t3);
    			append_dev(div0, a1);
    			append_dev(a1, span2);
    			append_dev(span2, img2);
    			append_dev(a1, t4);
    			append_dev(a1, span3);
    			append_dev(span3, img3);
    			append_dev(div8, t5);
    			append_dev(div8, div7);
    			append_dev(div7, div2);
    			append_dev(div2, button0);
    			append_dev(button0, i0);
    			append_dev(div7, t6);
    			append_dev(div7, div3);
    			append_dev(div3, button1);
    			append_dev(button1, i1);
    			append_dev(div7, t7);
    			append_dev(div7, div6);
    			append_dev(div6, button2);
    			append_dev(button2, span7);
    			append_dev(span7, img4);
    			append_dev(span7, t8);
    			append_dev(span7, span6);
    			append_dev(span6, span4);
    			append_dev(span6, t10);
    			append_dev(span6, span5);
    			append_dev(div6, t12);
    			append_dev(div6, div5);
    			append_dev(div5, h6);
    			append_dev(div5, t14);
    			append_dev(div5, a2);
    			append_dev(a2, i2);
    			append_dev(a2, t15);
    			append_dev(a2, span8);
    			append_dev(div5, t17);
    			append_dev(div5, div4);
    			append_dev(div5, t18);
    			append_dev(div5, a3);
    			append_dev(a3, i3);
    			append_dev(a3, t19);
    			append_dev(a3, span9);
    			append_dev(div78, t21);
    			append_dev(div78, div15);
    			append_dev(div15, div10);
    			append_dev(div10, a4);
    			append_dev(a4, span10);
    			append_dev(span10, img5);
    			append_dev(a4, t22);
    			append_dev(a4, span11);
    			append_dev(span11, img6);
    			append_dev(div10, t23);
    			append_dev(div10, a5);
    			append_dev(a5, span12);
    			append_dev(span12, img7);
    			append_dev(a5, t24);
    			append_dev(a5, span13);
    			append_dev(span13, img8);
    			append_dev(div10, t25);
    			append_dev(div10, button3);
    			append_dev(button3, i4);
    			append_dev(div15, t26);
    			append_dev(div15, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div12, t27);
    			append_dev(div12, ul0);
    			append_dev(ul0, li0);
    			append_dev(li0, span14);
    			append_dev(ul0, t29);
    			append_dev(ul0, li1);
    			append_dev(li1, a6);
    			append_dev(a6, i5);
    			append_dev(a6, t30);
    			append_dev(a6, span15);
    			append_dev(ul0, t32);
    			append_dev(ul0, li2);
    			append_dev(li2, a7);
    			append_dev(a7, i6);
    			append_dev(a7, t33);
    			append_dev(a7, span16);
    			append_dev(ul0, t35);
    			append_dev(ul0, li3);
    			append_dev(li3, a8);
    			append_dev(a8, i7);
    			append_dev(a8, t36);
    			append_dev(a8, span17);
    			append_dev(ul0, t38);
    			append_dev(ul0, li4);
    			append_dev(li4, a9);
    			append_dev(a9, i8);
    			append_dev(a9, t39);
    			append_dev(a9, span18);
    			append_dev(ul0, t41);
    			append_dev(ul0, li5);
    			append_dev(li5, a10);
    			append_dev(a10, i9);
    			append_dev(a10, t42);
    			append_dev(a10, span19);
    			append_dev(ul0, t44);
    			append_dev(ul0, li6);
    			append_dev(li6, a11);
    			append_dev(a11, i10);
    			append_dev(a11, t45);
    			append_dev(a11, span20);
    			append_dev(div15, t47);
    			append_dev(div15, div14);
    			append_dev(div78, t48);
    			append_dev(div78, div16);
    			append_dev(div78, t49);
    			append_dev(div78, div77);
    			append_dev(div77, div75);
    			append_dev(div75, div74);
    			append_dev(div74, div20);
    			append_dev(div20, div19);
    			append_dev(div19, div18);
    			append_dev(div18, h40);
    			append_dev(div18, t51);
    			append_dev(div18, div17);
    			append_dev(div17, ol);
    			append_dev(ol, li7);
    			append_dev(li7, a12);
    			append_dev(ol, t53);
    			append_dev(ol, li8);
    			append_dev(div74, t55);
    			append_dev(div74, div73);
    			append_dev(div73, div72);
    			append_dev(div72, div71);
    			append_dev(div71, div70);
    			append_dev(div70, div69);
    			append_dev(div69, div40);
    			append_dev(div40, div39);
    			append_dev(div39, div28);
    			append_dev(div28, div25);
    			append_dev(div25, div21);
    			append_dev(div21, img9);
    			append_dev(div25, t56);
    			append_dev(div25, div22);
    			append_dev(div22, img10);
    			append_dev(div25, t57);
    			append_dev(div25, div23);
    			append_dev(div23, img11);
    			append_dev(div25, t58);
    			append_dev(div25, div24);
    			append_dev(div24, img12);
    			append_dev(div28, t59);
    			append_dev(div28, div26);
    			append_dev(div28, t60);
    			append_dev(div28, div27);
    			append_dev(div39, t61);
    			append_dev(div39, div38);
    			append_dev(div38, div37);
    			append_dev(div37, div30);
    			append_dev(div30, div29);
    			append_dev(div29, img13);
    			append_dev(div37, t62);
    			append_dev(div37, div32);
    			append_dev(div32, div31);
    			append_dev(div31, img14);
    			append_dev(div37, t63);
    			append_dev(div37, div34);
    			append_dev(div34, div33);
    			append_dev(div33, img15);
    			append_dev(div37, t64);
    			append_dev(div37, div36);
    			append_dev(div36, div35);
    			append_dev(div35, img16);
    			append_dev(div69, t65);
    			append_dev(div69, div68);
    			append_dev(div68, div67);
    			append_dev(div67, div42);
    			append_dev(div42, div41);
    			append_dev(div41, h41);
    			append_dev(div67, t67);
    			append_dev(div67, div61);
    			append_dev(div61, div48);
    			append_dev(div48, div47);
    			append_dev(div47, div46);
    			append_dev(div46, div44);
    			append_dev(div44, div43);
    			append_dev(div43, i11);
    			append_dev(div46, t68);
    			append_dev(div46, div45);
    			append_dev(div45, p0);
    			append_dev(div45, t70);
    			append_dev(div45, h50);
    			append_dev(div61, t72);
    			append_dev(div61, div54);
    			append_dev(div54, div53);
    			append_dev(div53, div52);
    			append_dev(div52, div50);
    			append_dev(div50, div49);
    			append_dev(div49, i12);
    			append_dev(div52, t73);
    			append_dev(div52, div51);
    			append_dev(div51, p1);
    			append_dev(div51, t75);
    			append_dev(div51, h51);
    			append_dev(div61, t77);
    			append_dev(div61, div60);
    			append_dev(div60, div59);
    			append_dev(div59, div58);
    			append_dev(div58, div56);
    			append_dev(div56, div55);
    			append_dev(div55, i13);
    			append_dev(div58, t78);
    			append_dev(div58, div57);
    			append_dev(div57, p2);
    			append_dev(div57, t80);
    			append_dev(div57, h52);
    			append_dev(div67, t82);
    			append_dev(div67, div62);
    			append_dev(div62, h53);
    			append_dev(div62, t84);
    			append_dev(div62, p3);
    			append_dev(div67, t86);
    			append_dev(div67, div66);
    			append_dev(div66, h54);
    			append_dev(div66, t88);
    			append_dev(div66, nav);
    			append_dev(nav, ul1);
    			append_dev(ul1, li9);
    			append_dev(li9, a13);
    			append_dev(div66, t90);
    			append_dev(div66, div65);
    			append_dev(div65, div64);
    			append_dev(div64, div63);
    			append_dev(div63, table);
    			append_dev(table, tbody);
    			append_dev(tbody, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t92);
    			append_dev(tr0, td0);
    			append_dev(tbody, t94);
    			append_dev(tbody, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t96);
    			append_dev(tr1, td1);
    			append_dev(tbody, t98);
    			append_dev(tbody, tr2);
    			append_dev(tr2, th2);
    			append_dev(tr2, t100);
    			append_dev(tr2, td2);
    			append_dev(tbody, t102);
    			append_dev(tbody, tr3);
    			append_dev(tr3, th3);
    			append_dev(tr3, t104);
    			append_dev(tr3, td3);
    			append_dev(tbody, t106);
    			append_dev(tbody, tr4);
    			append_dev(tr4, th4);
    			append_dev(tr4, t108);
    			append_dev(tr4, td4);
    			append_dev(tbody, t110);
    			append_dev(tbody, tr5);
    			append_dev(tr5, th5);
    			append_dev(tr5, t112);
    			append_dev(tr5, td5);
    			append_dev(div77, t114);
    			append_dev(div77, div76);
    			append_dev(div76, script1);
    			append_dev(div76, t115);
    			append_dev(div76, script2);
    			append_dev(div76, t116);
    			append_dev(div76, script3);
    			append_dev(div76, t117);
    			append_dev(div76, script4);
    			append_dev(div76, t118);
    			append_dev(div76, script5);
    			append_dev(div76, t119);
    			append_dev(div76, script6);
    			append_dev(div76, t120);
    			append_dev(div76, script7);
    			append_dev(div76, t121);
    			append_dev(div76, script8);
    			append_dev(div76, t122);
    			append_dev(div76, script9);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script0);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(main);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ViewPresentacion', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ViewPresentacion> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class ViewPresentacion extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ViewPresentacion",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src\views\ViewOrder.svelte generated by Svelte v3.52.0 */

    const { console: console_1 } = globals;
    const file$3 = "src\\views\\ViewOrder.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (502:0) {:catch error}
    function create_catch_block_2(ctx) {
    	let t_value = /*error*/ ctx[10] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_2.name,
    		type: "catch",
    		source: "(502:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (107:0) {:then data}
    function create_then_block$1(ctx) {
    	let main;
    	let div14;
    	let headerapp;
    	let t0;
    	let div0;
    	let sidebar;
    	let t1;
    	let div1;
    	let t2;
    	let div13;
    	let div12;
    	let div11;
    	let div5;
    	let div4;
    	let div3;
    	let h4;
    	let t4;
    	let div2;
    	let ol;
    	let li0;
    	let a0;
    	let t6;
    	let li1;
    	let t8;
    	let div9;
    	let div7;
    	let div6;
    	let img;
    	let img_src_value;
    	let t9;
    	let div8;
    	let ul;
    	let li2;
    	let a1;
    	let i;
    	let t10;
    	let span;
    	let t12;
    	let t13;
    	let div10;
    	let script0;
    	let script0_src_value;
    	let t14;
    	let script1;
    	let script1_src_value;
    	let t15;
    	let script2;
    	let script2_src_value;
    	let t16;
    	let script3;
    	let script3_src_value;
    	let t17;
    	let script4;
    	let script4_src_value;
    	let t18;
    	let script5;
    	let script5_src_value;
    	let t19;
    	let script6;
    	let script6_src_value;
    	let t20;
    	let script7;
    	let script7_src_value;
    	let t21;
    	let script8;
    	let script8_src_value;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[8] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1$1,
    		then: create_then_block_1$1,
    		catch: create_catch_block_1$1,
    		value: 9,
    		error: 10
    	};

    	handle_promise(/*getOrderById*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div14 = element("div");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Vista de Detalle Ordenes";
    			t4 = space();
    			div2 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "Clientes";
    			t6 = space();
    			li1 = element("li");
    			li1.textContent = "Vista de Detalle Ordenes";
    			t8 = space();
    			div9 = element("div");
    			div7 = element("div");
    			div6 = element("div");
    			img = element("img");
    			t9 = space();
    			div8 = element("div");
    			ul = element("ul");
    			li2 = element("li");
    			a1 = element("a");
    			i = element("i");
    			t10 = space();
    			span = element("span");
    			span.textContent = "Vista de Detalle";
    			t12 = space();
    			info.block.c();
    			t13 = space();
    			div10 = element("div");
    			script0 = element("script");
    			t14 = space();
    			script1 = element("script");
    			t15 = space();
    			script2 = element("script");
    			t16 = space();
    			script3 = element("script");
    			t17 = space();
    			script4 = element("script");
    			t18 = space();
    			script5 = element("script");
    			t19 = space();
    			script6 = element("script");
    			t20 = space();
    			script7 = element("script");
    			t21 = space();
    			script8 = element("script");
    			attr_dev(div0, "class", "app-menu navbar-menu");
    			add_location(div0, file$3, 113, 9, 3355);
    			attr_dev(div1, "class", "vertical-overlay");
    			add_location(div1, file$3, 119, 9, 3540);
    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$3, 132, 27, 4194);
    			attr_dev(a0, "href", "#!");
    			add_location(a0, file$3, 137, 36, 4464);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$3, 136, 33, 4398);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$3, 139, 33, 4564);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$3, 135, 30, 4336);
    			attr_dev(div2, "class", "page-title-right");
    			add_location(div2, file$3, 134, 27, 4274);
    			attr_dev(div3, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div3, file$3, 130, 24, 4056);
    			attr_dev(div4, "class", "col-12");
    			add_location(div4, file$3, 129, 21, 4010);
    			attr_dev(div5, "class", "row");
    			add_location(div5, file$3, 128, 18, 3970);
    			if (!src_url_equal(img.src, img_src_value = "http://localhost:8080/images/profile-bg.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "profile-wid-img");
    			add_location(img, file$3, 153, 27, 5147);
    			attr_dev(div6, "class", "profile-wid-bg");
    			add_location(div6, file$3, 152, 24, 5090);
    			attr_dev(div7, "class", "profile-foreground position-relative mx-n4 mt-n4");
    			add_location(div7, file$3, 150, 21, 4977);
    			attr_dev(i, "class", "ri-airplay-fill d-inline-block d-md-none");
    			add_location(i, file$3, 171, 33, 5997);
    			attr_dev(span, "class", "d-none d-md-inline-block");
    			add_location(span, file$3, 173, 33, 6123);
    			attr_dev(a1, "class", "nav-link fs-14 active");
    			attr_dev(a1, "data-bs-toggle", "tab");
    			attr_dev(a1, "href", "#overview-tab");
    			attr_dev(a1, "role", "tab");
    			add_location(a1, file$3, 166, 30, 5740);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$3, 165, 27, 5687);
    			attr_dev(ul, "class", "nav nav-pills animation-nav profile-nav gap-2 gap-lg-3 flex-grow-1");
    			attr_dev(ul, "role", "tablist");
    			add_location(ul, file$3, 162, 24, 5508);
    			attr_dev(div8, "class", "d-flex pt-3");
    			add_location(div8, file$3, 160, 21, 5414);
    			attr_dev(div9, "class", "container-fluid");
    			add_location(div9, file$3, 149, 18, 4925);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$3, 473, 21, 27686);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$3, 475, 21, 27821);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$3, 477, 21, 27946);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$3, 479, 21, 28068);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$3, 481, 21, 28195);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$3, 483, 21, 28324);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/swiper/swiper-bundle.min.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$3, 486, 21, 28449);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/js/pages/profile.init.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$3, 490, 21, 28624);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$3, 494, 21, 28782);
    			add_location(div10, file$3, 468, 18, 27421);
    			attr_dev(div11, "class", "container-fluid");
    			add_location(div11, file$3, 126, 15, 3876);
    			attr_dev(div12, "class", "page-content");
    			add_location(div12, file$3, 125, 12, 3833);
    			attr_dev(div13, "class", "main-content");
    			add_location(div13, file$3, 124, 9, 3793);
    			attr_dev(div14, "id", "layout-wrapper");
    			add_location(div14, file$3, 109, 6, 3236);
    			add_location(main, file$3, 107, 3, 3195);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div14);
    			mount_component(headerapp, div14, null);
    			append_dev(div14, t0);
    			append_dev(div14, div0);
    			mount_component(sidebar, div0, null);
    			append_dev(div14, t1);
    			append_dev(div14, div1);
    			append_dev(div14, t2);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h4);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a0);
    			append_dev(ol, t6);
    			append_dev(ol, li1);
    			append_dev(div11, t8);
    			append_dev(div11, div9);
    			append_dev(div9, div7);
    			append_dev(div7, div6);
    			append_dev(div6, img);
    			append_dev(div9, t9);
    			append_dev(div9, div8);
    			append_dev(div8, ul);
    			append_dev(ul, li2);
    			append_dev(li2, a1);
    			append_dev(a1, i);
    			append_dev(a1, t10);
    			append_dev(a1, span);
    			append_dev(div9, t12);
    			info.block.m(div9, info.anchor = null);
    			info.mount = () => div9;
    			info.anchor = null;
    			append_dev(div11, t13);
    			append_dev(div11, div10);
    			append_dev(div10, script0);
    			append_dev(div10, t14);
    			append_dev(div10, script1);
    			append_dev(div10, t15);
    			append_dev(div10, script2);
    			append_dev(div10, t16);
    			append_dev(div10, script3);
    			append_dev(div10, t17);
    			append_dev(div10, script4);
    			append_dev(div10, t18);
    			append_dev(div10, script5);
    			append_dev(div10, t19);
    			append_dev(div10, script6);
    			append_dev(div10, t20);
    			append_dev(div10, script7);
    			append_dev(div10, t21);
    			append_dev(div10, script8);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$1.name,
    		type: "then",
    		source: "(107:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (460:21) {:catch error}
    function create_catch_block_1$1(ctx) {
    	let t_value = /*error*/ ctx[10] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1$1.name,
    		type: "catch",
    		source: "(460:21) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (183:21) {:then order}
    function create_then_block_1$1(ctx) {
    	let div14;
    	let div8;
    	let div7;
    	let div6;
    	let div5;
    	let div4;
    	let h50;
    	let t1;
    	let div3;
    	let table2;
    	let tbody2;
    	let tr3;
    	let th0;
    	let t3;
    	let div1;
    	let div0;
    	let table0;
    	let thead0;
    	let tr0;
    	let th1;
    	let t5;
    	let th2;
    	let t7;
    	let th3;
    	let t9;
    	let th4;
    	let t11;
    	let th5;
    	let t13;
    	let th6;
    	let t15;
    	let tbody0;
    	let t16;
    	let div2;
    	let th7;
    	let t18;
    	let table1;
    	let thead1;
    	let tr1;
    	let th8;
    	let t20;
    	let th9;
    	let t22;
    	let th10;
    	let t24;
    	let th11;
    	let t26;
    	let th12;
    	let t28;
    	let tbody1;
    	let tr2;
    	let td0;
    	let t29_value = /*order*/ ctx[9].address.street_and_use_number + "";
    	let t29;
    	let t30;
    	let td1;
    	let t31_value = /*order*/ ctx[9].address.postal_code + "";
    	let t31;
    	let t32;
    	let td2;
    	let t33_value = /*order*/ ctx[9].address.city + "";
    	let t33;
    	let t34;
    	let td3;
    	let t35_value = /*order*/ ctx[9].address.province + "";
    	let t35;
    	let t36;
    	let td4;
    	let t37_value = /*order*/ ctx[9].address.phone_number + "";
    	let t37;
    	let t38;
    	let div13;
    	let div12;
    	let div11;
    	let div10;
    	let h51;
    	let t40;
    	let div9;
    	let each_value = /*order*/ ctx[9].presentations;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_2,
    		then: create_then_block_2,
    		catch: create_catch_block$1,
    		value: 8,
    		error: 10
    	};

    	handle_promise(/*getDataClientOrder*/ ctx[2](/*order*/ ctx[9].client_id), info);

    	const block = {
    		c: function create() {
    			div14 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Detalles Orden";
    			t1 = space();
    			div3 = element("div");
    			table2 = element("table");
    			tbody2 = element("tbody");
    			tr3 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Orden:";
    			t3 = space();
    			div1 = element("div");
    			div0 = element("div");
    			table0 = element("table");
    			thead0 = element("thead");
    			tr0 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Foto";
    			t5 = space();
    			th2 = element("th");
    			th2.textContent = "Descripción";
    			t7 = space();
    			th3 = element("th");
    			th3.textContent = "Código";
    			t9 = space();
    			th4 = element("th");
    			th4.textContent = "Peso en\r\n                                                                        gramos";
    			t11 = space();
    			th5 = element("th");
    			th5.textContent = "Estatus";
    			t13 = space();
    			th6 = element("th");
    			th6.textContent = "Acción";
    			t15 = space();
    			tbody0 = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t16 = space();
    			div2 = element("div");
    			th7 = element("th");
    			th7.textContent = "Dirección de envío:";
    			t18 = space();
    			table1 = element("table");
    			thead1 = element("thead");
    			tr1 = element("tr");
    			th8 = element("th");
    			th8.textContent = "Calle y\r\n                                                                     número";
    			t20 = space();
    			th9 = element("th");
    			th9.textContent = "Código\r\n                                                                     Postal";
    			t22 = space();
    			th10 = element("th");
    			th10.textContent = "Ciudad";
    			t24 = space();
    			th11 = element("th");
    			th11.textContent = "Provincia";
    			t26 = space();
    			th12 = element("th");
    			th12.textContent = "Teléfono";
    			t28 = space();
    			tbody1 = element("tbody");
    			tr2 = element("tr");
    			td0 = element("td");
    			t29 = text(t29_value);
    			t30 = space();
    			td1 = element("td");
    			t31 = text(t31_value);
    			t32 = space();
    			td2 = element("td");
    			t33 = text(t33_value);
    			t34 = space();
    			td3 = element("td");
    			t35 = text(t35_value);
    			t36 = space();
    			td4 = element("td");
    			t37 = text(t37_value);
    			t38 = space();
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Detalles Cliente";
    			t40 = space();
    			div9 = element("div");
    			info.block.c();
    			attr_dev(h50, "class", "card-title mb-3");
    			add_location(h50, file$3, 193, 42, 7041);
    			attr_dev(th0, "class", "ps-0");
    			attr_dev(th0, "scope", "row");
    			add_location(th0, file$3, 201, 54, 7562);
    			attr_dev(th1, "data-sort", "folio");
    			add_location(th1, file$3, 213, 69, 8528);
    			attr_dev(th2, "data-sort", "descripcion");
    			add_location(th2, file$3, 216, 69, 8777);
    			attr_dev(th3, "data-sort", "codigo");
    			add_location(th3, file$3, 219, 69, 9039);
    			attr_dev(th4, "data-sort", "peso en gramos");
    			add_location(th4, file$3, 223, 69, 9293);
    			attr_dev(th5, "data-sort", "estatus");
    			add_location(th5, file$3, 227, 69, 9634);
    			attr_dev(th6, "data-sort", "action");
    			add_location(th6, file$3, 231, 69, 9890);
    			add_location(tr0, file$3, 212, 66, 8453);
    			attr_dev(thead0, "class", "table-light");
    			add_location(thead0, file$3, 210, 63, 8291);
    			attr_dev(tbody0, "class", "list form-check-all");
    			add_location(tbody0, file$3, 236, 63, 10282);
    			attr_dev(table0, "class", "table align-middle table-nowrap");
    			attr_dev(table0, "id", "customerTable");
    			add_location(table0, file$3, 207, 60, 8032);
    			attr_dev(div0, "class", "table-responsive table-card mt-3 mb-1");
    			add_location(div0, file$3, 205, 57, 7858);
    			attr_dev(div1, "class", "col-sm-auto");
    			add_location(div1, file$3, 204, 54, 7774);
    			attr_dev(th7, "class", "ps-0");
    			attr_dev(th7, "scope", "row");
    			add_location(th7, file$3, 286, 57, 14780);
    			attr_dev(th8, "data-sort", "street");
    			add_location(th8, file$3, 297, 66, 15556);
    			attr_dev(th9, "data-sort", "code");
    			add_location(th9, file$3, 301, 66, 15877);
    			attr_dev(th10, "data-sort", "city");
    			add_location(th10, file$3, 305, 66, 16195);
    			attr_dev(th11, "data-sort", "province");
    			add_location(th11, file$3, 309, 66, 16438);
    			attr_dev(th12, "data-sort", "telefono");
    			add_location(th12, file$3, 312, 66, 16686);
    			add_location(tr1, file$3, 296, 63, 15484);
    			attr_dev(thead1, "class", "table-light");
    			add_location(thead1, file$3, 294, 60, 15328);
    			attr_dev(td0, "class", "street");
    			add_location(td0, file$3, 324, 66, 17557);
    			attr_dev(td1, "class", "code");
    			add_location(td1, file$3, 329, 66, 17975);
    			attr_dev(td2, "class", "city");
    			add_location(td2, file$3, 334, 66, 18381);
    			attr_dev(td3, "class", "province");
    			add_location(td3, file$3, 339, 66, 18780);
    			attr_dev(td4, "class", "telefono");
    			add_location(td4, file$3, 344, 66, 19187);
    			add_location(tr2, file$3, 323, 63, 17485);
    			attr_dev(tbody1, "class", "list form-check-all");
    			add_location(tbody1, file$3, 321, 60, 17321);
    			attr_dev(table1, "class", "table align-middle table-nowrap");
    			attr_dev(table1, "id", "customerTable");
    			add_location(table1, file$3, 291, 57, 15078);
    			attr_dev(div2, "class", "table-responsive table-card mt-3 mb-1");
    			add_location(div2, file$3, 284, 54, 14612);
    			add_location(tr3, file$3, 200, 51, 7502);
    			add_location(tbody2, file$3, 199, 48, 7442);
    			attr_dev(table2, "class", "table table-borderless mb-0");
    			add_location(table2, file$3, 197, 45, 7300);
    			attr_dev(div3, "class", "table-responsive");
    			add_location(div3, file$3, 196, 42, 7223);
    			attr_dev(div4, "class", "card-body");
    			add_location(div4, file$3, 192, 39, 6974);
    			attr_dev(div5, "class", "card");
    			add_location(div5, file$3, 191, 36, 6915);
    			attr_dev(div6, "class", "col-xxl-12");
    			add_location(div6, file$3, 190, 33, 6853);
    			attr_dev(div7, "class", "row");
    			add_location(div7, file$3, 189, 30, 6801);
    			attr_dev(div8, "class", "tab-pane active");
    			attr_dev(div8, "id", "overview-tab");
    			attr_dev(div8, "role", "tabpanel");
    			add_location(div8, file$3, 185, 27, 6613);
    			attr_dev(h51, "class", "card-title mb-3");
    			add_location(h51, file$3, 367, 39, 20484);
    			attr_dev(div9, "class", "table-responsive");
    			add_location(div9, file$3, 370, 39, 20659);
    			attr_dev(div10, "class", "card-body");
    			add_location(div10, file$3, 366, 36, 20420);
    			attr_dev(div11, "class", "card");
    			add_location(div11, file$3, 365, 33, 20364);
    			attr_dev(div12, "class", "col-xxl-12");
    			add_location(div12, file$3, 364, 30, 20305);
    			attr_dev(div13, "class", "row");
    			add_location(div13, file$3, 363, 27, 20256);
    			attr_dev(div14, "class", "tab-content pt-4 text-muted");
    			add_location(div14, file$3, 184, 24, 6543);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div14, anchor);
    			append_dev(div14, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h50);
    			append_dev(div4, t1);
    			append_dev(div4, div3);
    			append_dev(div3, table2);
    			append_dev(table2, tbody2);
    			append_dev(tbody2, tr3);
    			append_dev(tr3, th0);
    			append_dev(tr3, t3);
    			append_dev(tr3, div1);
    			append_dev(div1, div0);
    			append_dev(div0, table0);
    			append_dev(table0, thead0);
    			append_dev(thead0, tr0);
    			append_dev(tr0, th1);
    			append_dev(tr0, t5);
    			append_dev(tr0, th2);
    			append_dev(tr0, t7);
    			append_dev(tr0, th3);
    			append_dev(tr0, t9);
    			append_dev(tr0, th4);
    			append_dev(tr0, t11);
    			append_dev(tr0, th5);
    			append_dev(tr0, t13);
    			append_dev(tr0, th6);
    			append_dev(table0, t15);
    			append_dev(table0, tbody0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody0, null);
    			}

    			append_dev(tr3, t16);
    			append_dev(tr3, div2);
    			append_dev(div2, th7);
    			append_dev(div2, t18);
    			append_dev(div2, table1);
    			append_dev(table1, thead1);
    			append_dev(thead1, tr1);
    			append_dev(tr1, th8);
    			append_dev(tr1, t20);
    			append_dev(tr1, th9);
    			append_dev(tr1, t22);
    			append_dev(tr1, th10);
    			append_dev(tr1, t24);
    			append_dev(tr1, th11);
    			append_dev(tr1, t26);
    			append_dev(tr1, th12);
    			append_dev(table1, t28);
    			append_dev(table1, tbody1);
    			append_dev(tbody1, tr2);
    			append_dev(tr2, td0);
    			append_dev(td0, t29);
    			append_dev(tr2, t30);
    			append_dev(tr2, td1);
    			append_dev(td1, t31);
    			append_dev(tr2, t32);
    			append_dev(tr2, td2);
    			append_dev(td2, t33);
    			append_dev(tr2, t34);
    			append_dev(tr2, td3);
    			append_dev(td3, t35);
    			append_dev(tr2, t36);
    			append_dev(tr2, td4);
    			append_dev(td4, t37);
    			append_dev(div14, t38);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, h51);
    			append_dev(div10, t40);
    			append_dev(div10, div9);
    			info.block.m(div9, info.anchor = null);
    			info.mount = () => div9;
    			info.anchor = null;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*getOrderById*/ 2) {
    				each_value = /*order*/ ctx[9].presentations;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			update_await_block_branch(info, ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div14);
    			destroy_each(each_blocks, detaching);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1$1.name,
    		type: "then",
    		source: "(183:21) {:then order}",
    		ctx
    	});

    	return block;
    }

    // (239:66) {#each order.presentations as singleOrder}
    function create_each_block$1(ctx) {
    	let tr;
    	let td0;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let td1;
    	let t1_value = /*singleOrder*/ ctx[11].description + "";
    	let t1;
    	let t2;
    	let td2;
    	let t3_value = /*singleOrder*/ ctx[11].code + "";
    	let t3;
    	let t4;
    	let td3;
    	let t5_value = /*singleOrder*/ ctx[11].weight_in_grams + "";
    	let t5;
    	let t6;
    	let td4;
    	let span;
    	let t7_value = /*singleOrder*/ ctx[11].status + "";
    	let t7;
    	let t8;
    	let td5;
    	let div2;
    	let div1;
    	let a;
    	let t9;
    	let t10;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			td1 = element("td");
    			t1 = text(t1_value);
    			t2 = space();
    			td2 = element("td");
    			t3 = text(t3_value);
    			t4 = space();
    			td3 = element("td");
    			t5 = text(t5_value);
    			t6 = space();
    			td4 = element("td");
    			span = element("span");
    			t7 = text(t7_value);
    			t8 = space();
    			td5 = element("td");
    			div2 = element("div");
    			div1 = element("div");
    			a = element("a");
    			t9 = text("Ver\r\n                                                                                    Detalles");
    			t10 = space();
    			if (!src_url_equal(img.src, img_src_value = /*singleOrder*/ ctx[11].cover)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "img-fluid d-block");
    			add_location(img, file$3, 244, 78, 11030);
    			attr_dev(div0, "class", "flex-shrink-0 avatar-md bg-light rounded p-1");
    			add_location(div0, file$3, 242, 75, 10813);
    			attr_dev(td0, "class", "foto");
    			add_location(td0, file$3, 240, 72, 10643);
    			attr_dev(td1, "class", "descripcion");
    			add_location(td1, file$3, 250, 72, 11576);
    			attr_dev(td2, "class", "codigo");
    			add_location(td2, file$3, 253, 72, 11857);
    			attr_dev(td3, "class", "peso");
    			add_location(td3, file$3, 256, 72, 12126);
    			attr_dev(span, "class", "badge badge-soft-warning text-uppercase");
    			add_location(span, file$3, 261, 76, 12576);
    			attr_dev(td4, "class", "status");
    			add_location(td4, file$3, 259, 72, 12404);
    			attr_dev(a, "class", "btn btn-sm btn-success edit-item-btn");
    			attr_dev(a, "href", "/viewProduct/" + /*singleOrder*/ ctx[11].product_id);
    			add_location(a, file$3, 269, 81, 13343);
    			attr_dev(div1, "class", "ver");
    			add_location(div1, file$3, 267, 78, 13161);
    			attr_dev(div2, "class", "d-flex gap-2");
    			add_location(div2, file$3, 265, 75, 12976);
    			add_location(td5, file$3, 264, 77, 12895);
    			add_location(tr, file$3, 239, 69, 10565);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, div0);
    			append_dev(div0, img);
    			append_dev(tr, t0);
    			append_dev(tr, td1);
    			append_dev(td1, t1);
    			append_dev(tr, t2);
    			append_dev(tr, td2);
    			append_dev(td2, t3);
    			append_dev(tr, t4);
    			append_dev(tr, td3);
    			append_dev(td3, t5);
    			append_dev(tr, t6);
    			append_dev(tr, td4);
    			append_dev(td4, span);
    			append_dev(span, t7);
    			append_dev(td4, t8);
    			append_dev(tr, td5);
    			append_dev(td5, div2);
    			append_dev(div2, div1);
    			append_dev(div1, a);
    			append_dev(a, t9);
    			append_dev(tr, t10);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(239:66) {#each order.presentations as singleOrder}",
    		ctx
    	});

    	return block;
    }

    // (449:42) {:catch error}
    function create_catch_block$1(ctx) {
    	let t_value = /*error*/ ctx[10] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$1.name,
    		type: "catch",
    		source: "(449:42) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (374:42) {:then data}
    function create_then_block_2(ctx) {
    	let table;
    	let div7;
    	let div6;
    	let div5;
    	let div4;
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div3;
    	let h50;
    	let t2;
    	let ul0;
    	let p0;
    	let t3_value = (/*data*/ ctx[8]?.name ?? "No client name") + "";
    	let t3;
    	let t4;
    	let h51;
    	let t6;
    	let ul1;
    	let p1;
    	let t7_value = (/*data*/ ctx[8]?.phone_number ?? "No client phone number") + "";
    	let t7;
    	let t8;
    	let h52;
    	let t10;
    	let ul2;
    	let p2;
    	let t11_value = (/*data*/ ctx[8]?.email ?? "No client email") + "";
    	let t11;
    	let t12;
    	let div2;
    	let a;
    	let i;
    	let t13;

    	const block = {
    		c: function create() {
    			table = element("table");
    			div7 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div3 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Nombre del\r\n                                                                  cliente";
    			t2 = space();
    			ul0 = element("ul");
    			p0 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			h51 = element("h5");
    			h51.textContent = "Número del\r\n                                                                  teléfono";
    			t6 = space();
    			ul1 = element("ul");
    			p1 = element("p");
    			t7 = text(t7_value);
    			t8 = space();
    			h52 = element("h5");
    			h52.textContent = "Correo del\r\n                                                                  cliente";
    			t10 = space();
    			ul2 = element("ul");
    			p2 = element("p");
    			t11 = text(t11_value);
    			t12 = space();
    			div2 = element("div");
    			a = element("a");
    			i = element("i");
    			t13 = text("Ver\r\n                                                                     perfil de\r\n                                                                     cliente");
    			if (!src_url_equal(img.src, img_src_value = "http://localhost:8080/images/users/user_no_photo.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "img-fluid d-block");
    			add_location(img, file$3, 384, 66, 21738);
    			attr_dev(div0, "class", "avatar-lg bg-light rounded p-1");
    			add_location(div0, file$3, 382, 63, 21559);
    			attr_dev(div1, "class", "col-sm-auto");
    			add_location(div1, file$3, 380, 60, 21405);
    			attr_dev(h50, "class", "fs-14 text-truncate");
    			add_location(h50, file$3, 391, 63, 22333);
    			attr_dev(p0, "class", "text-muted mb-1");
    			add_location(p0, file$3, 398, 66, 22890);
    			attr_dev(ul0, "class", "list-inline text-muted");
    			add_location(ul0, file$3, 396, 63, 22720);
    			attr_dev(h51, "class", "fs-14 text-truncate");
    			add_location(h51, file$3, 405, 63, 23372);
    			attr_dev(p1, "class", "text-muted mb-1");
    			add_location(p1, file$3, 412, 66, 23930);
    			attr_dev(ul1, "class", "list-inline text-muted");
    			add_location(ul1, file$3, 410, 63, 23760);
    			attr_dev(h52, "class", "fs-14 text-truncate");
    			add_location(h52, file$3, 419, 63, 24428);
    			attr_dev(p2, "class", "text-muted mb-1");
    			add_location(p2, file$3, 426, 66, 24985);
    			attr_dev(ul2, "class", "list-inline text-muted");
    			add_location(ul2, file$3, 424, 63, 24815);
    			attr_dev(i, "class", "ri-arrow-right-line label-icon align-bottom fs-16 ms-2");
    			add_location(i, file$3, 437, 70, 25929);
    			attr_dev(a, "href", "/client_info/" + /*order*/ ctx[9].client_id);
    			attr_dev(a, "class", "btn btn-success btn-label right ms-auto");
    			add_location(a, file$3, 434, 66, 25629);
    			attr_dev(div2, "class", "text-end mb-4");
    			add_location(div2, file$3, 432, 63, 25467);
    			attr_dev(div3, "class", "col-sm");
    			add_location(div3, file$3, 390, 60, 22248);
    			attr_dev(div4, "class", "row gy-3");
    			add_location(div4, file$3, 379, 57, 21321);
    			attr_dev(div5, "class", "card-body");
    			add_location(div5, file$3, 378, 54, 21239);
    			attr_dev(div6, "class", "card cliente");
    			add_location(div6, file$3, 377, 51, 21157);
    			attr_dev(div7, "class", "col-sm-auto");
    			add_location(div7, file$3, 376, 48, 21079);
    			attr_dev(table, "class", "table table-borderless mb-0");
    			add_location(table, file$3, 374, 45, 20937);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, div7);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div1);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div4, t0);
    			append_dev(div4, div3);
    			append_dev(div3, h50);
    			append_dev(div3, t2);
    			append_dev(div3, ul0);
    			append_dev(ul0, p0);
    			append_dev(p0, t3);
    			append_dev(div3, t4);
    			append_dev(div3, h51);
    			append_dev(div3, t6);
    			append_dev(div3, ul1);
    			append_dev(ul1, p1);
    			append_dev(p1, t7);
    			append_dev(div3, t8);
    			append_dev(div3, h52);
    			append_dev(div3, t10);
    			append_dev(div3, ul2);
    			append_dev(ul2, p2);
    			append_dev(p2, t11);
    			append_dev(div3, t12);
    			append_dev(div3, div2);
    			append_dev(div2, a);
    			append_dev(a, i);
    			append_dev(a, t13);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_2.name,
    		type: "then",
    		source: "(374:42) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (372:86)                                                Loading...                                            {:then data}
    function create_pending_block_2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_2.name,
    		type: "pending",
    		source: "(372:86)                                                Loading...                                            {:then data}",
    		ctx
    	});

    	return block;
    }

    // (181:44)                           Loading...                       {:then order}
    function create_pending_block_1$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1$1.name,
    		type: "pending",
    		source: "(181:44)                           Loading...                       {:then order}",
    		ctx
    	});

    	return block;
    }

    // (105:28)      Loading...  {:then data}
    function create_pending_block$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$1.name,
    		type: "pending",
    		source: "(105:28)      Loading...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let link0;
    	let link1;
    	let script;
    	let script_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$1,
    		then: create_then_block$1,
    		catch: create_catch_block_2,
    		value: 8,
    		error: 10,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[0](), info);

    	const block = {
    		c: function create() {
    			link0 = element("link");
    			link1 = element("link");
    			script = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Vista Detalle Ordenes";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$3, 72, 3, 2227);
    			attr_dev(link1, "href", "http://localhost:8080/libs/sweetalert2/sweetalert2.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$3, 75, 3, 2338);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$3, 81, 3, 2503);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$3, 83, 3, 2593);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$3, 88, 3, 2734);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$3, 93, 3, 2868);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$3, 98, 3, 3003);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(4, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ViewOrder', slots, []);
    	let { id } = $$props;
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = "/";
    	}

    	let myHeaders = new Headers();
    	myHeaders.append("Authorization", `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	let requestOptions = {
    		method: "GET",
    		headers: myHeaders,
    		redirect: "follow"
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	async function getOrderById() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/orders/details/${id}`, requestOptions);
    		const dataOrder = await response.json();
    		return dataOrder.data;
    	}

    	async function getDataClientOrder(idCliente) {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/orders/clients/${idCliente}`, requestOptions);
    		const dataCliente = await response.json();
    		console.log(dataCliente.data);
    		return dataCliente.data;
    	}

    	$$self.$$.on_mount.push(function () {
    		if (id === undefined && !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])) {
    			console_1.warn("<ViewOrder> was created without expected prop 'id'");
    		}
    	});

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<ViewOrder> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(3, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		id,
    		HeaderApp,
    		Sidebar,
    		Swal: sweetalert2_all,
    		fly,
    		fade,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		getOrderById,
    		getDataClientOrder,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(3, id = $$props.id);
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getDataUserLoggin, getOrderById, getDataClientOrder, id];
    }

    class ViewOrder extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { id: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ViewOrder",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get id() {
    		throw new Error("<ViewOrder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ViewOrder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\views\ViewDireccion.svelte generated by Svelte v3.52.0 */

    const file$2 = "src\\views\\ViewDireccion.svelte";

    function create_fragment$2(ctx) {
    	let t0;
    	let link0;
    	let link1;
    	let script0;
    	let script0_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t1;
    	let main;
    	let div36;
    	let header;
    	let div9;
    	let div8;
    	let div1;
    	let div0;
    	let a0;
    	let span0;
    	let img0;
    	let img0_src_value;
    	let t2;
    	let span1;
    	let img1;
    	let img1_src_value;
    	let t3;
    	let a1;
    	let span2;
    	let img2;
    	let img2_src_value;
    	let t4;
    	let span3;
    	let img3;
    	let img3_src_value;
    	let t5;
    	let div7;
    	let div2;
    	let button0;
    	let i0;
    	let t6;
    	let div3;
    	let button1;
    	let i1;
    	let t7;
    	let div6;
    	let button2;
    	let span7;
    	let img4;
    	let img4_src_value;
    	let t8;
    	let span6;
    	let span4;
    	let t10;
    	let span5;
    	let t12;
    	let div5;
    	let h6;
    	let t14;
    	let a2;
    	let i2;
    	let t15;
    	let span8;
    	let t17;
    	let div4;
    	let t18;
    	let a3;
    	let i3;
    	let t19;
    	let span9;
    	let t21;
    	let div15;
    	let div10;
    	let a4;
    	let span10;
    	let img5;
    	let img5_src_value;
    	let t22;
    	let span11;
    	let img6;
    	let img6_src_value;
    	let t23;
    	let a5;
    	let span12;
    	let img7;
    	let img7_src_value;
    	let t24;
    	let span13;
    	let img8;
    	let img8_src_value;
    	let t25;
    	let button3;
    	let i4;
    	let t26;
    	let div13;
    	let div12;
    	let div11;
    	let t27;
    	let ul0;
    	let li0;
    	let span14;
    	let t29;
    	let li1;
    	let a6;
    	let i5;
    	let t30;
    	let span15;
    	let t32;
    	let li2;
    	let a7;
    	let i6;
    	let t33;
    	let span16;
    	let t35;
    	let li3;
    	let a8;
    	let i7;
    	let t36;
    	let span17;
    	let t38;
    	let li4;
    	let a9;
    	let i8;
    	let t39;
    	let span18;
    	let t41;
    	let li5;
    	let a10;
    	let i9;
    	let t42;
    	let span19;
    	let t44;
    	let li6;
    	let a11;
    	let i10;
    	let t45;
    	let span20;
    	let t47;
    	let div14;
    	let t48;
    	let div16;
    	let t49;
    	let div34;
    	let div33;
    	let div32;
    	let div20;
    	let div19;
    	let div18;
    	let h4;
    	let t51;
    	let div17;
    	let ol;
    	let li7;
    	let a12;
    	let t53;
    	let li8;
    	let t55;
    	let div31;
    	let div22;
    	let div21;
    	let img9;
    	let img9_src_value;
    	let t56;
    	let div23;
    	let ul1;
    	let li9;
    	let a13;
    	let i11;
    	let t57;
    	let span21;
    	let t59;
    	let div30;
    	let div29;
    	let div28;
    	let div27;
    	let div26;
    	let div25;
    	let h5;
    	let t61;
    	let div24;
    	let table;
    	let tbody;
    	let tr0;
    	let th0;
    	let t63;
    	let td0;
    	let t65;
    	let tr1;
    	let th1;
    	let t67;
    	let td1;
    	let t69;
    	let tr2;
    	let th2;
    	let t71;
    	let td2;
    	let t73;
    	let tr3;
    	let th3;
    	let t75;
    	let td3;
    	let t77;
    	let tr4;
    	let th4;
    	let t79;
    	let td4;
    	let t81;
    	let tr5;
    	let th5;
    	let t83;
    	let td5;
    	let t85;
    	let tr6;
    	let th6;
    	let t87;
    	let td6;
    	let t89;
    	let tr7;
    	let th7;
    	let t91;
    	let td7;
    	let t93;
    	let tr8;
    	let th8;
    	let t95;
    	let td8;
    	let t97;
    	let div35;
    	let script1;
    	let script1_src_value;
    	let t98;
    	let script2;
    	let script2_src_value;
    	let t99;
    	let script3;
    	let script3_src_value;
    	let t100;
    	let script4;
    	let script4_src_value;
    	let t101;
    	let script5;
    	let script5_src_value;
    	let t102;
    	let script6;
    	let script6_src_value;
    	let t103;
    	let script7;
    	let script7_src_value;
    	let t104;
    	let script8;
    	let script8_src_value;
    	let t105;
    	let script9;
    	let script9_src_value;

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			link0 = element("link");
    			link1 = element("link");
    			script0 = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t1 = space();
    			main = element("main");
    			div36 = element("div");
    			header = element("header");
    			div9 = element("div");
    			div8 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			span0 = element("span");
    			img0 = element("img");
    			t2 = space();
    			span1 = element("span");
    			img1 = element("img");
    			t3 = space();
    			a1 = element("a");
    			span2 = element("span");
    			img2 = element("img");
    			t4 = space();
    			span3 = element("span");
    			img3 = element("img");
    			t5 = space();
    			div7 = element("div");
    			div2 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t6 = space();
    			div3 = element("div");
    			button1 = element("button");
    			i1 = element("i");
    			t7 = space();
    			div6 = element("div");
    			button2 = element("button");
    			span7 = element("span");
    			img4 = element("img");
    			t8 = space();
    			span6 = element("span");
    			span4 = element("span");
    			span4.textContent = "Anna Adame";
    			t10 = space();
    			span5 = element("span");
    			span5.textContent = "Founder";
    			t12 = space();
    			div5 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Bienvenida Anna!";
    			t14 = space();
    			a2 = element("a");
    			i2 = element("i");
    			t15 = space();
    			span8 = element("span");
    			span8.textContent = "Perfil";
    			t17 = space();
    			div4 = element("div");
    			t18 = space();
    			a3 = element("a");
    			i3 = element("i");
    			t19 = space();
    			span9 = element("span");
    			span9.textContent = "Salir";
    			t21 = space();
    			div15 = element("div");
    			div10 = element("div");
    			a4 = element("a");
    			span10 = element("span");
    			img5 = element("img");
    			t22 = space();
    			span11 = element("span");
    			img6 = element("img");
    			t23 = space();
    			a5 = element("a");
    			span12 = element("span");
    			img7 = element("img");
    			t24 = space();
    			span13 = element("span");
    			img8 = element("img");
    			t25 = space();
    			button3 = element("button");
    			i4 = element("i");
    			t26 = space();
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			t27 = space();
    			ul0 = element("ul");
    			li0 = element("li");
    			span14 = element("span");
    			span14.textContent = "Menú";
    			t29 = space();
    			li1 = element("li");
    			a6 = element("a");
    			i5 = element("i");
    			t30 = space();
    			span15 = element("span");
    			span15.textContent = "Usuarios";
    			t32 = space();
    			li2 = element("li");
    			a7 = element("a");
    			i6 = element("i");
    			t33 = space();
    			span16 = element("span");
    			span16.textContent = "Clientes";
    			t35 = space();
    			li3 = element("li");
    			a8 = element("a");
    			i7 = element("i");
    			t36 = space();
    			span17 = element("span");
    			span17.textContent = "Productos";
    			t38 = space();
    			li4 = element("li");
    			a9 = element("a");
    			i8 = element("i");
    			t39 = space();
    			span18 = element("span");
    			span18.textContent = "Catálogos";
    			t41 = space();
    			li5 = element("li");
    			a10 = element("a");
    			i9 = element("i");
    			t42 = space();
    			span19 = element("span");
    			span19.textContent = "Cupones";
    			t44 = space();
    			li6 = element("li");
    			a11 = element("a");
    			i10 = element("i");
    			t45 = space();
    			span20 = element("span");
    			span20.textContent = "Ordenes";
    			t47 = space();
    			div14 = element("div");
    			t48 = space();
    			div16 = element("div");
    			t49 = space();
    			div34 = element("div");
    			div33 = element("div");
    			div32 = element("div");
    			div20 = element("div");
    			div19 = element("div");
    			div18 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Vista de Detalle Direcciones";
    			t51 = space();
    			div17 = element("div");
    			ol = element("ol");
    			li7 = element("li");
    			a12 = element("a");
    			a12.textContent = "Clientes";
    			t53 = space();
    			li8 = element("li");
    			li8.textContent = "Vista de Detalle Direcciones";
    			t55 = space();
    			div31 = element("div");
    			div22 = element("div");
    			div21 = element("div");
    			img9 = element("img");
    			t56 = space();
    			div23 = element("div");
    			ul1 = element("ul");
    			li9 = element("li");
    			a13 = element("a");
    			i11 = element("i");
    			t57 = space();
    			span21 = element("span");
    			span21.textContent = "Vista de Detalle";
    			t59 = space();
    			div30 = element("div");
    			div29 = element("div");
    			div28 = element("div");
    			div27 = element("div");
    			div26 = element("div");
    			div25 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Info";
    			t61 = space();
    			div24 = element("div");
    			table = element("table");
    			tbody = element("tbody");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Nombre :";
    			t63 = space();
    			td0 = element("td");
    			td0.textContent = "Anna";
    			t65 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Apellidos :";
    			t67 = space();
    			td1 = element("td");
    			td1.textContent = "Cousar";
    			t69 = space();
    			tr2 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Calle y número:";
    			t71 = space();
    			td2 = element("td");
    			td2.textContent = "16 de Septiembre";
    			t73 = space();
    			tr3 = element("tr");
    			th3 = element("th");
    			th3.textContent = "Apartamento:";
    			t75 = space();
    			td3 = element("td");
    			td3.textContent = "X";
    			t77 = space();
    			tr4 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Código Postal:";
    			t79 = space();
    			td4 = element("td");
    			td4.textContent = "23000";
    			t81 = space();
    			tr5 = element("tr");
    			th5 = element("th");
    			th5.textContent = "Ciudad:";
    			t83 = space();
    			td5 = element("td");
    			td5.textContent = "La Paz";
    			t85 = space();
    			tr6 = element("tr");
    			th6 = element("th");
    			th6.textContent = "Provincia:";
    			t87 = space();
    			td6 = element("td");
    			td6.textContent = "BCS";
    			t89 = space();
    			tr7 = element("tr");
    			th7 = element("th");
    			th7.textContent = "Número de Teléfono:";
    			t91 = space();
    			td7 = element("td");
    			td7.textContent = "6121200000";
    			t93 = space();
    			tr8 = element("tr");
    			th8 = element("th");
    			th8.textContent = "Dirección de Factura:";
    			t95 = space();
    			td8 = element("td");
    			td8.textContent = "Sí";
    			t97 = space();
    			div35 = element("div");
    			script1 = element("script");
    			t98 = space();
    			script2 = element("script");
    			t99 = space();
    			script3 = element("script");
    			t100 = space();
    			script4 = element("script");
    			t101 = space();
    			script5 = element("script");
    			t102 = space();
    			script6 = element("script");
    			t103 = space();
    			script7 = element("script");
    			t104 = space();
    			script8 = element("script");
    			t105 = space();
    			script9 = element("script");
    			document.title = "DevEcommerce | Vista Detalle Ordenes";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$2, 14, 4, 430);
    			attr_dev(link1, "href", "http://localhost:8080/libs/sweetalert2/sweetalert2.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$2, 17, 4, 541);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$2, 20, 4, 687);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$2, 22, 4, 779);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$2, 24, 4, 901);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$2, 26, 4, 1016);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$2, 28, 4, 1132);
    			if (!src_url_equal(img0.src, img0_src_value = "http://localhost:8080/public/images/logo-sm.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "");
    			attr_dev(img0, "height", "22");
    			add_location(img0, file$2, 44, 32, 1717);
    			attr_dev(span0, "class", "logo-sm");
    			add_location(span0, file$2, 43, 28, 1661);
    			if (!src_url_equal(img1.src, img1_src_value = "http://localhost:8080/public/images/logo-dark.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "");
    			attr_dev(img1, "height", "17");
    			add_location(img1, file$2, 47, 32, 1918);
    			attr_dev(span1, "class", "logo-lg");
    			add_location(span1, file$2, 46, 28, 1862);
    			attr_dev(a0, "href", "index.html");
    			attr_dev(a0, "class", "logo logo-dark");
    			add_location(a0, file$2, 42, 24, 1587);
    			if (!src_url_equal(img2.src, img2_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "");
    			attr_dev(img2, "height", "22");
    			add_location(img2, file$2, 53, 32, 2224);
    			attr_dev(span2, "class", "logo-sm");
    			add_location(span2, file$2, 52, 28, 2168);
    			if (!src_url_equal(img3.src, img3_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "");
    			attr_dev(img3, "height", "17");
    			add_location(img3, file$2, 56, 32, 2418);
    			attr_dev(span3, "class", "logo-lg");
    			add_location(span3, file$2, 55, 28, 2362);
    			attr_dev(a1, "href", "index.html");
    			attr_dev(a1, "class", "logo logo-light");
    			add_location(a1, file$2, 51, 24, 2093);
    			attr_dev(div0, "class", "navbar-brand-box horizontal-logo");
    			add_location(div0, file$2, 41, 20, 1515);
    			attr_dev(div1, "class", "d-flex");
    			add_location(div1, file$2, 39, 16, 1438);
    			attr_dev(i0, "class", "bx bx-fullscreen fs-22");
    			add_location(i0, file$2, 65, 24, 2909);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn btn-icon btn-topbar btn-ghost-secondary rounded-circle shadow-none");
    			attr_dev(button0, "data-toggle", "fullscreen");
    			add_location(button0, file$2, 64, 20, 2757);
    			attr_dev(div2, "class", "ms-1 header-item d-none d-sm-flex");
    			add_location(div2, file$2, 63, 16, 2688);
    			attr_dev(i1, "class", "bx bx-moon fs-22");
    			add_location(i1, file$2, 71, 24, 3234);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-icon btn-topbar btn-ghost-secondary rounded-circle light-dark-mode shadow-none");
    			add_location(button1, file$2, 70, 20, 3091);
    			attr_dev(div3, "class", "ms-1 header-item d-none d-sm-flex");
    			add_location(div3, file$2, 69, 16, 3022);
    			attr_dev(img4, "class", "rounded-circle header-profile-user");
    			if (!src_url_equal(img4.src, img4_src_value = "http://localhost:8080/images/users/avatar-1.jpg")) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "Header Avatar");
    			add_location(img4, file$2, 78, 32, 3675);
    			attr_dev(span4, "class", "d-none d-xl-inline-block ms-1 fw-medium user-name-text");
    			add_location(span4, file$2, 80, 36, 3902);
    			attr_dev(span5, "class", "d-none d-xl-block ms-1 fs-12 text-muted user-name-sub-text");
    			add_location(span5, file$2, 81, 36, 4026);
    			attr_dev(span6, "class", "text-start ms-xl-2");
    			add_location(span6, file$2, 79, 32, 3831);
    			attr_dev(span7, "class", "d-flex align-items-center");
    			add_location(span7, file$2, 77, 28, 3601);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn shadow-none");
    			attr_dev(button2, "id", "page-header-user-dropdown");
    			attr_dev(button2, "data-bs-toggle", "dropdown");
    			attr_dev(button2, "aria-haspopup", "true");
    			attr_dev(button2, "aria-expanded", "false");
    			add_location(button2, file$2, 76, 24, 3425);
    			attr_dev(h6, "class", "dropdown-header");
    			add_location(h6, file$2, 87, 28, 4369);
    			attr_dev(i2, "class", "mdi mdi-account-circle text-muted fs-16 align-middle me-1");
    			add_location(i2, file$2, 88, 79, 4499);
    			attr_dev(span8, "class", "align-middle");
    			add_location(span8, file$2, 88, 153, 4573);
    			attr_dev(a2, "class", "dropdown-item");
    			attr_dev(a2, "href", "pages-profile.html");
    			add_location(a2, file$2, 88, 28, 4448);
    			attr_dev(div4, "class", "dropdown-divider");
    			add_location(div4, file$2, 90, 28, 4673);
    			attr_dev(i3, "class", "mdi mdi-logout text-muted fs-16 align-middle me-1");
    			add_location(i3, file$2, 92, 83, 4824);
    			attr_dev(span9, "class", "align-middle");
    			attr_dev(span9, "data-key", "t-logout");
    			add_location(span9, file$2, 92, 149, 4890);
    			attr_dev(a3, "class", "dropdown-item");
    			attr_dev(a3, "href", "auth-logout-basic.html");
    			add_location(a3, file$2, 92, 28, 4769);
    			attr_dev(div5, "class", "dropdown-menu dropdown-menu-end");
    			add_location(div5, file$2, 85, 24, 4252);
    			attr_dev(div6, "class", "dropdown ms-sm-3 header-item topbar-user");
    			add_location(div6, file$2, 75, 20, 3345);
    			attr_dev(div7, "class", "d-flex align-items-center");
    			add_location(div7, file$2, 62, 16, 2631);
    			attr_dev(div8, "class", "navbar-header");
    			add_location(div8, file$2, 38, 12, 1393);
    			attr_dev(div9, "class", "layout-width");
    			add_location(div9, file$2, 37, 8, 1353);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$2, 36, 4, 1318);
    			if (!src_url_equal(img5.src, img5_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img5, "src", img5_src_value);
    			attr_dev(img5, "alt", "");
    			attr_dev(img5, "height", "22");
    			add_location(img5, file$2, 107, 28, 5453);
    			attr_dev(span10, "class", "logo-sm");
    			add_location(span10, file$2, 106, 24, 5401);
    			if (!src_url_equal(img6.src, img6_src_value = "http://localhost:8080/images/logo-dark.png")) attr_dev(img6, "src", img6_src_value);
    			attr_dev(img6, "alt", "");
    			attr_dev(img6, "height", "17");
    			add_location(img6, file$2, 110, 28, 5635);
    			attr_dev(span11, "class", "logo-lg");
    			add_location(span11, file$2, 109, 24, 5583);
    			attr_dev(a4, "href", "index.html");
    			attr_dev(a4, "class", "logo logo-dark");
    			add_location(a4, file$2, 105, 20, 5331);
    			if (!src_url_equal(img7.src, img7_src_value = "http://localhost:8080/images/logo-sm.png")) attr_dev(img7, "src", img7_src_value);
    			attr_dev(img7, "alt", "");
    			attr_dev(img7, "height", "22");
    			add_location(img7, file$2, 116, 28, 5952);
    			attr_dev(span12, "class", "logo-sm");
    			add_location(span12, file$2, 115, 24, 5900);
    			if (!src_url_equal(img8.src, img8_src_value = "http://localhost:8080/images/logo-light.png")) attr_dev(img8, "src", img8_src_value);
    			attr_dev(img8, "alt", "");
    			attr_dev(img8, "height", "17");
    			add_location(img8, file$2, 119, 28, 6134);
    			attr_dev(span13, "class", "logo-lg");
    			add_location(span13, file$2, 118, 24, 6082);
    			attr_dev(a5, "href", "index.html");
    			attr_dev(a5, "class", "logo logo-light");
    			add_location(a5, file$2, 114, 20, 5829);
    			attr_dev(i4, "class", "ri-record-circle-line");
    			add_location(i4, file$2, 123, 24, 6430);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "btn btn-sm p-0 fs-20 header-item float-end btn-vertical-sm-hover");
    			attr_dev(button3, "id", "vertical-hover");
    			add_location(button3, file$2, 122, 20, 6289);
    			attr_dev(div10, "class", "navbar-brand-box");
    			add_location(div10, file$2, 103, 16, 5240);
    			attr_dev(div11, "id", "two-column-menu");
    			add_location(div11, file$2, 130, 24, 6641);
    			attr_dev(span14, "data-key", "t-menu");
    			add_location(span14, file$2, 133, 51, 6817);
    			attr_dev(li0, "class", "menu-title");
    			add_location(li0, file$2, 133, 28, 6794);
    			attr_dev(i5, "class", "mdi mdi-speedometer");
    			add_location(i5, file$2, 136, 36, 7036);
    			attr_dev(span15, "data-key", "t-dashboards");
    			add_location(span15, file$2, 136, 72, 7072);
    			attr_dev(a6, "class", "nav-link menu-link");
    			attr_dev(a6, "href", "#sidebarDashboards");
    			add_location(a6, file$2, 135, 32, 6942);
    			attr_dev(li1, "class", "nav-item");
    			add_location(li1, file$2, 134, 28, 6887);
    			attr_dev(i6, "class", "mdi mdi-view-grid-plus-outline");
    			add_location(i6, file$2, 142, 36, 7399);
    			attr_dev(span16, "data-key", "t-apps");
    			add_location(span16, file$2, 142, 83, 7446);
    			attr_dev(a7, "class", "nav-link menu-link");
    			attr_dev(a7, "href", "#sidebarApps");
    			add_location(a7, file$2, 141, 32, 7310);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$2, 140, 28, 7255);
    			attr_dev(i7, "class", "mdi mdi-view-carousel-outline");
    			add_location(i7, file$2, 151, 36, 7862);
    			attr_dev(span17, "data-key", "t-layouts");
    			add_location(span17, file$2, 151, 82, 7908);
    			attr_dev(a8, "class", "nav-link menu-link");
    			attr_dev(a8, "href", "#sidebarLayouts");
    			add_location(a8, file$2, 150, 32, 7771);
    			attr_dev(li3, "class", "nav-item");
    			add_location(li3, file$2, 149, 28, 7716);
    			attr_dev(i8, "class", "mdi mdi-account-circle-outline");
    			add_location(i8, file$2, 160, 36, 8266);
    			attr_dev(span18, "data-key", "t-authentication");
    			add_location(span18, file$2, 160, 83, 8313);
    			attr_dev(a9, "class", "nav-link menu-link");
    			attr_dev(a9, "href", "#sidebarAuth");
    			add_location(a9, file$2, 159, 32, 8178);
    			attr_dev(li4, "class", "nav-item");
    			add_location(li4, file$2, 158, 28, 8123);
    			attr_dev(i9, "class", "mdi mdi-sticker-text-outline");
    			add_location(i9, file$2, 169, 36, 8650);
    			attr_dev(span19, "data-key", "t-pages");
    			add_location(span19, file$2, 169, 81, 8695);
    			attr_dev(a10, "class", "nav-link menu-link");
    			attr_dev(a10, "href", "#sidebarPages");
    			add_location(a10, file$2, 168, 32, 8561);
    			attr_dev(li5, "class", "nav-item");
    			add_location(li5, file$2, 167, 28, 8506);
    			attr_dev(i10, "class", "ri-rocket-line");
    			add_location(i10, file$2, 176, 36, 9019);
    			attr_dev(span20, "data-key", "t-landing");
    			add_location(span20, file$2, 176, 67, 9050);
    			attr_dev(a11, "class", "nav-link menu-link");
    			attr_dev(a11, "href", "#sidebarLanding");
    			add_location(a11, file$2, 175, 32, 8928);
    			attr_dev(li6, "class", "nav-item");
    			add_location(li6, file$2, 174, 28, 8873);
    			attr_dev(ul0, "class", "navbar-nav");
    			attr_dev(ul0, "id", "navbar-nav");
    			add_location(ul0, file$2, 132, 24, 6725);
    			attr_dev(div12, "class", "container-fluid");
    			add_location(div12, file$2, 128, 20, 6584);
    			attr_dev(div13, "id", "scrollbar");
    			add_location(div13, file$2, 127, 16, 6542);
    			attr_dev(div14, "class", "sidebar-background");
    			add_location(div14, file$2, 187, 16, 9343);
    			attr_dev(div15, "class", "app-menu navbar-menu");
    			add_location(div15, file$2, 101, 12, 5157);
    			attr_dev(div16, "class", "vertical-overlay");
    			add_location(div16, file$2, 191, 12, 9492);
    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$2, 205, 36, 10183);
    			attr_dev(a12, "href", "#!");
    			add_location(a12, file$2, 209, 72, 10449);
    			attr_dev(li7, "class", "breadcrumb-item");
    			add_location(li7, file$2, 209, 44, 10421);
    			attr_dev(li8, "class", "breadcrumb-item active");
    			add_location(li8, file$2, 210, 44, 10525);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$2, 208, 40, 10348);
    			attr_dev(div17, "class", "page-title-right");
    			add_location(div17, file$2, 207, 36, 10276);
    			attr_dev(div18, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div18, file$2, 204, 32, 10064);
    			attr_dev(div19, "class", "col-12");
    			add_location(div19, file$2, 203, 28, 10010);
    			attr_dev(div20, "class", "row");
    			add_location(div20, file$2, 202, 24, 9963);
    			if (!src_url_equal(img9.src, img9_src_value = "http://localhost:8080/images/profile-bg.jpg")) attr_dev(img9, "src", img9_src_value);
    			attr_dev(img9, "alt", "");
    			attr_dev(img9, "class", "profile-wid-img");
    			add_location(img9, file$2, 222, 36, 11092);
    			attr_dev(div21, "class", "profile-wid-bg");
    			add_location(div21, file$2, 221, 32, 11026);
    			attr_dev(div22, "class", "profile-foreground position-relative mx-n4 mt-n4");
    			add_location(div22, file$2, 220, 28, 10930);
    			attr_dev(i11, "class", "ri-airplay-fill d-inline-block d-md-none");
    			add_location(i11, file$2, 234, 56, 11883);
    			attr_dev(span21, "class", "d-none d-md-inline-block");
    			add_location(span21, file$2, 234, 113, 11940);
    			attr_dev(a13, "class", "nav-link fs-14 active");
    			attr_dev(a13, "data-bs-toggle", "tab");
    			attr_dev(a13, "href", "#overview-tab");
    			attr_dev(a13, "role", "tab");
    			add_location(a13, file$2, 233, 52, 11739);
    			attr_dev(li9, "class", "nav-item");
    			add_location(li9, file$2, 232, 48, 11664);
    			attr_dev(ul1, "class", "nav nav-pills animation-nav profile-nav gap-2 gap-lg-3 flex-grow-1");
    			attr_dev(ul1, "role", "tablist");
    			add_location(ul1, file$2, 231, 44, 11520);
    			attr_dev(div23, "class", "d-flex pt-3");
    			add_location(div23, file$2, 229, 40, 11386);
    			attr_dev(h5, "class", "card-title mb-3");
    			add_location(h5, file$2, 248, 64, 12895);
    			attr_dev(th0, "class", "ps-0");
    			attr_dev(th0, "scope", "row");
    			add_location(th0, file$2, 253, 80, 13386);
    			attr_dev(td0, "class", "text-muted");
    			add_location(td0, file$2, 254, 80, 13510);
    			add_location(tr0, file$2, 252, 76, 13300);
    			attr_dev(th1, "class", "ps-0");
    			attr_dev(th1, "scope", "row");
    			add_location(th1, file$2, 257, 80, 13789);
    			attr_dev(td1, "class", "text-muted");
    			add_location(td1, file$2, 258, 80, 13916);
    			add_location(tr1, file$2, 256, 76, 13703);
    			attr_dev(th2, "class", "ps-0");
    			attr_dev(th2, "scope", "row");
    			add_location(th2, file$2, 263, 80, 14353);
    			attr_dev(td2, "class", "text-muted");
    			add_location(td2, file$2, 264, 80, 14484);
    			add_location(tr2, file$2, 262, 76, 14267);
    			attr_dev(th3, "class", "ps-0");
    			attr_dev(th3, "scope", "row");
    			add_location(th3, file$2, 267, 80, 14775);
    			attr_dev(td3, "class", "text-muted");
    			add_location(td3, file$2, 268, 80, 14903);
    			add_location(tr3, file$2, 266, 76, 14689);
    			attr_dev(th4, "class", "ps-0");
    			attr_dev(th4, "scope", "row");
    			add_location(th4, file$2, 272, 80, 15257);
    			attr_dev(td4, "class", "text-muted");
    			add_location(td4, file$2, 273, 80, 15387);
    			add_location(tr4, file$2, 271, 76, 15171);
    			attr_dev(th5, "class", "ps-0");
    			attr_dev(th5, "scope", "row");
    			add_location(th5, file$2, 276, 80, 15667);
    			attr_dev(td5, "class", "text-muted");
    			add_location(td5, file$2, 277, 80, 15790);
    			add_location(tr5, file$2, 275, 76, 15581);
    			attr_dev(th6, "class", "ps-0");
    			attr_dev(th6, "scope", "row");
    			add_location(th6, file$2, 280, 80, 16071);
    			attr_dev(td6, "class", "text-muted");
    			add_location(td6, file$2, 281, 80, 16197);
    			add_location(tr6, file$2, 279, 76, 15985);
    			attr_dev(th7, "class", "ps-0");
    			attr_dev(th7, "scope", "row");
    			add_location(th7, file$2, 284, 80, 16475);
    			attr_dev(td7, "class", "text-muted");
    			add_location(td7, file$2, 285, 80, 16610);
    			add_location(tr7, file$2, 283, 76, 16389);
    			attr_dev(th8, "class", "ps-0");
    			attr_dev(th8, "scope", "row");
    			add_location(th8, file$2, 288, 80, 16895);
    			attr_dev(td8, "class", "text-muted");
    			add_location(td8, file$2, 289, 80, 17032);
    			add_location(tr8, file$2, 287, 76, 16809);
    			add_location(tbody, file$2, 251, 72, 13215);
    			attr_dev(table, "class", "table table-borderless mb-0");
    			add_location(table, file$2, 250, 68, 13098);
    			attr_dev(div24, "class", "table-responsive");
    			add_location(div24, file$2, 249, 64, 12998);
    			attr_dev(div25, "class", "card-body");
    			add_location(div25, file$2, 247, 60, 12806);
    			attr_dev(div26, "class", "card");
    			add_location(div26, file$2, 246, 56, 12726);
    			attr_dev(div27, "class", "col-xxl-3");
    			add_location(div27, file$2, 243, 52, 12585);
    			attr_dev(div28, "class", "row");
    			add_location(div28, file$2, 242, 48, 12514);
    			attr_dev(div29, "class", "tab-pane active");
    			attr_dev(div29, "id", "overview-tab");
    			attr_dev(div29, "role", "tabpanel");
    			add_location(div29, file$2, 241, 44, 12401);
    			attr_dev(div30, "class", "tab-content pt-4 text-muted");
    			add_location(div30, file$2, 240, 40, 12314);
    			attr_dev(div31, "class", "container-fluid");
    			add_location(div31, file$2, 219, 24, 10871);
    			attr_dev(div32, "class", "container-fluid");
    			add_location(div32, file$2, 199, 20, 9855);
    			attr_dev(div33, "class", "page-content");
    			add_location(div33, file$2, 198, 16, 9807);
    			attr_dev(div34, "class", "main-content");
    			add_location(div34, file$2, 196, 12, 9761);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$2, 322, 5, 18466);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$2, 323, 5, 18560);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$2, 324, 5, 18644);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$2, 325, 5, 18725);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$2, 326, 5, 18811);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$2, 327, 5, 18899);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/libs/swiper/swiper-bundle.min.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$2, 330, 5, 18993);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/pages/profile.init.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$2, 333, 5, 19112);
    			if (!src_url_equal(script9.src, script9_src_value = "http://localhost:8080/js/app.js")) attr_dev(script9, "src", script9_src_value);
    			add_location(script9, file$2, 336, 5, 19214);
    			add_location(div35, file$2, 317, 0, 18284);
    			attr_dev(div36, "id", "layout-wrapper");
    			add_location(div36, file$2, 34, 0, 1285);
    			add_location(main, file$2, 32, 0, 1243);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script0);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div36);
    			append_dev(div36, header);
    			append_dev(header, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(a0, span0);
    			append_dev(span0, img0);
    			append_dev(a0, t2);
    			append_dev(a0, span1);
    			append_dev(span1, img1);
    			append_dev(div0, t3);
    			append_dev(div0, a1);
    			append_dev(a1, span2);
    			append_dev(span2, img2);
    			append_dev(a1, t4);
    			append_dev(a1, span3);
    			append_dev(span3, img3);
    			append_dev(div8, t5);
    			append_dev(div8, div7);
    			append_dev(div7, div2);
    			append_dev(div2, button0);
    			append_dev(button0, i0);
    			append_dev(div7, t6);
    			append_dev(div7, div3);
    			append_dev(div3, button1);
    			append_dev(button1, i1);
    			append_dev(div7, t7);
    			append_dev(div7, div6);
    			append_dev(div6, button2);
    			append_dev(button2, span7);
    			append_dev(span7, img4);
    			append_dev(span7, t8);
    			append_dev(span7, span6);
    			append_dev(span6, span4);
    			append_dev(span6, t10);
    			append_dev(span6, span5);
    			append_dev(div6, t12);
    			append_dev(div6, div5);
    			append_dev(div5, h6);
    			append_dev(div5, t14);
    			append_dev(div5, a2);
    			append_dev(a2, i2);
    			append_dev(a2, t15);
    			append_dev(a2, span8);
    			append_dev(div5, t17);
    			append_dev(div5, div4);
    			append_dev(div5, t18);
    			append_dev(div5, a3);
    			append_dev(a3, i3);
    			append_dev(a3, t19);
    			append_dev(a3, span9);
    			append_dev(div36, t21);
    			append_dev(div36, div15);
    			append_dev(div15, div10);
    			append_dev(div10, a4);
    			append_dev(a4, span10);
    			append_dev(span10, img5);
    			append_dev(a4, t22);
    			append_dev(a4, span11);
    			append_dev(span11, img6);
    			append_dev(div10, t23);
    			append_dev(div10, a5);
    			append_dev(a5, span12);
    			append_dev(span12, img7);
    			append_dev(a5, t24);
    			append_dev(a5, span13);
    			append_dev(span13, img8);
    			append_dev(div10, t25);
    			append_dev(div10, button3);
    			append_dev(button3, i4);
    			append_dev(div15, t26);
    			append_dev(div15, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div12, t27);
    			append_dev(div12, ul0);
    			append_dev(ul0, li0);
    			append_dev(li0, span14);
    			append_dev(ul0, t29);
    			append_dev(ul0, li1);
    			append_dev(li1, a6);
    			append_dev(a6, i5);
    			append_dev(a6, t30);
    			append_dev(a6, span15);
    			append_dev(ul0, t32);
    			append_dev(ul0, li2);
    			append_dev(li2, a7);
    			append_dev(a7, i6);
    			append_dev(a7, t33);
    			append_dev(a7, span16);
    			append_dev(ul0, t35);
    			append_dev(ul0, li3);
    			append_dev(li3, a8);
    			append_dev(a8, i7);
    			append_dev(a8, t36);
    			append_dev(a8, span17);
    			append_dev(ul0, t38);
    			append_dev(ul0, li4);
    			append_dev(li4, a9);
    			append_dev(a9, i8);
    			append_dev(a9, t39);
    			append_dev(a9, span18);
    			append_dev(ul0, t41);
    			append_dev(ul0, li5);
    			append_dev(li5, a10);
    			append_dev(a10, i9);
    			append_dev(a10, t42);
    			append_dev(a10, span19);
    			append_dev(ul0, t44);
    			append_dev(ul0, li6);
    			append_dev(li6, a11);
    			append_dev(a11, i10);
    			append_dev(a11, t45);
    			append_dev(a11, span20);
    			append_dev(div15, t47);
    			append_dev(div15, div14);
    			append_dev(div36, t48);
    			append_dev(div36, div16);
    			append_dev(div36, t49);
    			append_dev(div36, div34);
    			append_dev(div34, div33);
    			append_dev(div33, div32);
    			append_dev(div32, div20);
    			append_dev(div20, div19);
    			append_dev(div19, div18);
    			append_dev(div18, h4);
    			append_dev(div18, t51);
    			append_dev(div18, div17);
    			append_dev(div17, ol);
    			append_dev(ol, li7);
    			append_dev(li7, a12);
    			append_dev(ol, t53);
    			append_dev(ol, li8);
    			append_dev(div32, t55);
    			append_dev(div32, div31);
    			append_dev(div31, div22);
    			append_dev(div22, div21);
    			append_dev(div21, img9);
    			append_dev(div31, t56);
    			append_dev(div31, div23);
    			append_dev(div23, ul1);
    			append_dev(ul1, li9);
    			append_dev(li9, a13);
    			append_dev(a13, i11);
    			append_dev(a13, t57);
    			append_dev(a13, span21);
    			append_dev(div31, t59);
    			append_dev(div31, div30);
    			append_dev(div30, div29);
    			append_dev(div29, div28);
    			append_dev(div28, div27);
    			append_dev(div27, div26);
    			append_dev(div26, div25);
    			append_dev(div25, h5);
    			append_dev(div25, t61);
    			append_dev(div25, div24);
    			append_dev(div24, table);
    			append_dev(table, tbody);
    			append_dev(tbody, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t63);
    			append_dev(tr0, td0);
    			append_dev(tbody, t65);
    			append_dev(tbody, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t67);
    			append_dev(tr1, td1);
    			append_dev(tbody, t69);
    			append_dev(tbody, tr2);
    			append_dev(tr2, th2);
    			append_dev(tr2, t71);
    			append_dev(tr2, td2);
    			append_dev(tbody, t73);
    			append_dev(tbody, tr3);
    			append_dev(tr3, th3);
    			append_dev(tr3, t75);
    			append_dev(tr3, td3);
    			append_dev(tbody, t77);
    			append_dev(tbody, tr4);
    			append_dev(tr4, th4);
    			append_dev(tr4, t79);
    			append_dev(tr4, td4);
    			append_dev(tbody, t81);
    			append_dev(tbody, tr5);
    			append_dev(tr5, th5);
    			append_dev(tr5, t83);
    			append_dev(tr5, td5);
    			append_dev(tbody, t85);
    			append_dev(tbody, tr6);
    			append_dev(tr6, th6);
    			append_dev(tr6, t87);
    			append_dev(tr6, td6);
    			append_dev(tbody, t89);
    			append_dev(tbody, tr7);
    			append_dev(tr7, th7);
    			append_dev(tr7, t91);
    			append_dev(tr7, td7);
    			append_dev(tbody, t93);
    			append_dev(tbody, tr8);
    			append_dev(tr8, th8);
    			append_dev(tr8, t95);
    			append_dev(tr8, td8);
    			append_dev(div36, t97);
    			append_dev(div36, div35);
    			append_dev(div35, script1);
    			append_dev(div35, t98);
    			append_dev(div35, script2);
    			append_dev(div35, t99);
    			append_dev(div35, script3);
    			append_dev(div35, t100);
    			append_dev(div35, script4);
    			append_dev(div35, t101);
    			append_dev(div35, script5);
    			append_dev(div35, t102);
    			append_dev(div35, script6);
    			append_dev(div35, t103);
    			append_dev(div35, script7);
    			append_dev(div35, t104);
    			append_dev(div35, script8);
    			append_dev(div35, t105);
    			append_dev(div35, script9);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script0);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(main);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ViewDireccion', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ViewDireccion> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class ViewDireccion extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ViewDireccion",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\views\ViewCupones.svelte generated by Svelte v3.52.0 */
    const file$1 = "src\\views\\ViewCupones.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (390:0) {:catch error}
    function create_catch_block_1(ctx) {
    	let t_value = /*error*/ ctx[11] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1.name,
    		type: "catch",
    		source: "(390:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (94:0) {:then data}
    function create_then_block(ctx) {
    	let main;
    	let div3;
    	let header;
    	let div0;
    	let headerapp;
    	let t0;
    	let div1;
    	let sidebar;
    	let t1;
    	let div2;
    	let t2;
    	let t3;
    	let div4;
    	let script0;
    	let script0_src_value;
    	let t4;
    	let script1;
    	let script1_src_value;
    	let t5;
    	let script2;
    	let script2_src_value;
    	let t6;
    	let script3;
    	let script3_src_value;
    	let t7;
    	let script4;
    	let script4_src_value;
    	let t8;
    	let script5;
    	let script5_src_value;
    	let t9;
    	let script6;
    	let script6_src_value;
    	let t10;
    	let script7;
    	let script7_src_value;
    	let t11;
    	let script8;
    	let script8_src_value;
    	let current;

    	headerapp = new HeaderApp({
    			props: { data: /*data*/ ctx[7] },
    			$$inline: true
    		});

    	sidebar = new Sidebar({ $$inline: true });

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block_1,
    		then: create_then_block_1,
    		catch: create_catch_block,
    		value: 7,
    		error: 11
    	};

    	handle_promise(/*getDataSingleCoupon*/ ctx[1](), info);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div3 = element("div");
    			header = element("header");
    			div0 = element("div");
    			create_component(headerapp.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			info.block.c();
    			t3 = space();
    			div4 = element("div");
    			script0 = element("script");
    			t4 = space();
    			script1 = element("script");
    			t5 = space();
    			script2 = element("script");
    			t6 = space();
    			script3 = element("script");
    			t7 = space();
    			script4 = element("script");
    			t8 = space();
    			script5 = element("script");
    			t9 = space();
    			script6 = element("script");
    			t10 = space();
    			script7 = element("script");
    			t11 = space();
    			script8 = element("script");
    			attr_dev(div0, "class", "layout-width");
    			add_location(div0, file$1, 98, 12, 2869);
    			attr_dev(header, "id", "page-topbar");
    			add_location(header, file$1, 97, 9, 2830);
    			attr_dev(div1, "class", "app-menu navbar-menu");
    			add_location(div1, file$1, 104, 9, 3035);
    			attr_dev(div2, "class", "vertical-overlay");
    			add_location(div2, file$1, 110, 9, 3220);
    			attr_dev(div3, "id", "layout-wrapper");
    			add_location(div3, file$1, 96, 6, 2794);
    			if (!src_url_equal(script0.src, script0_src_value = "http://localhost:8080/libs/bootstrap/js/bootstrap.bundle.min.js")) attr_dev(script0, "src", script0_src_value);
    			add_location(script0, file$1, 366, 9, 17849);
    			if (!src_url_equal(script1.src, script1_src_value = "http://localhost:8080/libs/simplebar/simplebar.min.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$1, 368, 9, 17960);
    			if (!src_url_equal(script2.src, script2_src_value = "http://localhost:8080/libs/node-waves/waves.min.js")) attr_dev(script2, "src", script2_src_value);
    			add_location(script2, file$1, 370, 9, 18061);
    			if (!src_url_equal(script3.src, script3_src_value = "http://localhost:8080/libs/feather-icons/feather.min.js")) attr_dev(script3, "src", script3_src_value);
    			add_location(script3, file$1, 372, 9, 18159);
    			if (!src_url_equal(script4.src, script4_src_value = "http://localhost:8080/js/pages/plugins/lord-icon-2.1.0.js")) attr_dev(script4, "src", script4_src_value);
    			add_location(script4, file$1, 374, 9, 18262);
    			if (!src_url_equal(script5.src, script5_src_value = "http://localhost:8080/js/plugins.js")) attr_dev(script5, "src", script5_src_value);
    			add_location(script5, file$1, 376, 9, 18367);
    			if (!src_url_equal(script6.src, script6_src_value = "http://localhost:8080/libs/swiper/swiper-bundle.min.js")) attr_dev(script6, "src", script6_src_value);
    			add_location(script6, file$1, 379, 9, 18468);
    			if (!src_url_equal(script7.src, script7_src_value = "http://localhost:8080/js/pages/profile.init.js")) attr_dev(script7, "src", script7_src_value);
    			add_location(script7, file$1, 383, 9, 18607);
    			if (!src_url_equal(script8.src, script8_src_value = "http://localhost:8080/js/app.js")) attr_dev(script8, "src", script8_src_value);
    			add_location(script8, file$1, 386, 9, 18716);
    			add_location(div4, file$1, 361, 6, 17644);
    			add_location(main, file$1, 94, 3, 2753);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div3);
    			append_dev(div3, header);
    			append_dev(header, div0);
    			mount_component(headerapp, div0, null);
    			append_dev(div3, t0);
    			append_dev(div3, div1);
    			mount_component(sidebar, div1, null);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div3, t2);
    			info.block.m(div3, info.anchor = null);
    			info.mount = () => div3;
    			info.anchor = null;
    			append_dev(main, t3);
    			append_dev(main, div4);
    			append_dev(div4, script0);
    			append_dev(div4, t4);
    			append_dev(div4, script1);
    			append_dev(div4, t5);
    			append_dev(div4, script2);
    			append_dev(div4, t6);
    			append_dev(div4, script3);
    			append_dev(div4, t7);
    			append_dev(div4, script4);
    			append_dev(div4, t8);
    			append_dev(div4, script5);
    			append_dev(div4, t9);
    			append_dev(div4, script6);
    			append_dev(div4, t10);
    			append_dev(div4, script7);
    			append_dev(div4, t11);
    			append_dev(div4, script8);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headerapp.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headerapp.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(headerapp);
    			destroy_component(sidebar);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(94:0) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (353:9) {:catch error}
    function create_catch_block(ctx) {
    	const block = { c: noop$1, m: noop$1, p: noop$1, d: noop$1 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(353:9) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (119:9) {:then data}
    function create_then_block_1(ctx) {
    	let div23;
    	let div22;
    	let div21;
    	let div3;
    	let div2;
    	let div1;
    	let h4;
    	let t1;
    	let div0;
    	let ol;
    	let li0;
    	let a0;
    	let t3;
    	let li1;
    	let t5;
    	let div20;
    	let div5;
    	let div4;
    	let img;
    	let img_src_value;
    	let t6;
    	let div6;
    	let ul;
    	let li2;
    	let a1;
    	let i;
    	let t7;
    	let span;
    	let t9;
    	let div14;
    	let div13;
    	let div12;
    	let div11;
    	let div10;
    	let div9;
    	let h50;
    	let t11;
    	let div8;
    	let div7;
    	let table0;
    	let tbody0;
    	let tr0;
    	let th0;
    	let t13;
    	let td0;
    	let t14_value = /*data*/ ctx[7].name + "";
    	let t14;
    	let t15;
    	let tr1;
    	let th1;
    	let t17;
    	let td1;
    	let t18_value = /*data*/ ctx[7].code + "";
    	let t18;
    	let t19;
    	let tr2;
    	let th2;
    	let t21;
    	let td2;
    	let t22_value = /*data*/ ctx[7].couponable_type + "";
    	let t22;
    	let t23;
    	let tr3;
    	let th3;
    	let t25;
    	let td3;
    	let t26_value = /*data*/ ctx[7].percentage_discount + "";
    	let t26;
    	let t27;
    	let t28;
    	let tr4;
    	let th4;
    	let t30;
    	let td4;
    	let t31_value = /*data*/ ctx[7].count_uses + "";
    	let t31;
    	let t32;
    	let tr5;
    	let th5;
    	let t34;
    	let td5;
    	let t35_value = /*data*/ ctx[7].max_uses + "";
    	let t35;
    	let t36;
    	let tr6;
    	let th6;
    	let t38;
    	let td6;
    	let t39_value = /*data*/ ctx[7].min_amount_required + "";
    	let t39;
    	let t40;
    	let tr7;
    	let th7;
    	let t42;
    	let td7;
    	let t43_value = /*data*/ ctx[7].min_product_required + "";
    	let t43;
    	let t44;
    	let tr8;
    	let th8;
    	let t46;
    	let td8;
    	let t47_value = /*data*/ ctx[7].start_date + "";
    	let t47;
    	let t48;
    	let tr9;
    	let th9;
    	let t50;
    	let td9;
    	let t51_value = /*data*/ ctx[7].end_date + "";
    	let t51;
    	let t52;
    	let tr10;
    	let th10;
    	let t54;
    	let td10;
    	let t55_value = /*data*/ ctx[7].status + "";
    	let t55;
    	let t56;
    	let div19;
    	let div18;
    	let div17;
    	let div15;
    	let h51;
    	let t58;
    	let div16;
    	let table1;
    	let thead;
    	let tr11;
    	let th11;
    	let t60;
    	let th12;
    	let t62;
    	let th13;
    	let t64;
    	let th14;
    	let t66;
    	let th15;
    	let t68;
    	let tbody1;
    	let each_value = /*data*/ ctx[7].orders;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div23 = element("div");
    			div22 = element("div");
    			div21 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Vista de Detalle Cupón";
    			t1 = space();
    			div0 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "Cupones";
    			t3 = space();
    			li1 = element("li");
    			li1.textContent = "Vista de Detalle Cupón";
    			t5 = space();
    			div20 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			img = element("img");
    			t6 = space();
    			div6 = element("div");
    			ul = element("ul");
    			li2 = element("li");
    			a1 = element("a");
    			i = element("i");
    			t7 = space();
    			span = element("span");
    			span.textContent = "Vista de Detalle";
    			t9 = space();
    			div14 = element("div");
    			div13 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			div9 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Informacion del cupon";
    			t11 = space();
    			div8 = element("div");
    			div7 = element("div");
    			table0 = element("table");
    			tbody0 = element("tbody");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Nombre del cupón:";
    			t13 = space();
    			td0 = element("td");
    			t14 = text(t14_value);
    			t15 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Código:";
    			t17 = space();
    			td1 = element("td");
    			t18 = text(t18_value);
    			t19 = space();
    			tr2 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Tipo de Cupón:";
    			t21 = space();
    			td2 = element("td");
    			t22 = text(t22_value);
    			t23 = space();
    			tr3 = element("tr");
    			th3 = element("th");
    			th3.textContent = "Porcentaje de\r\n                                                            descuento del cupón:";
    			t25 = space();
    			td3 = element("td");
    			t26 = text(t26_value);
    			t27 = text("%");
    			t28 = space();
    			tr4 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Usos:";
    			t30 = space();
    			td4 = element("td");
    			t31 = text(t31_value);
    			t32 = space();
    			tr5 = element("tr");
    			th5 = element("th");
    			th5.textContent = "Máximo de usos:";
    			t34 = space();
    			td5 = element("td");
    			t35 = text(t35_value);
    			t36 = space();
    			tr6 = element("tr");
    			th6 = element("th");
    			th6.textContent = "Mínimo de monto\r\n                                                            solicitado:";
    			t38 = space();
    			td6 = element("td");
    			t39 = text(t39_value);
    			t40 = space();
    			tr7 = element("tr");
    			th7 = element("th");
    			th7.textContent = "Mínimo de producto\r\n                                                            solicitado:";
    			t42 = space();
    			td7 = element("td");
    			t43 = text(t43_value);
    			t44 = space();
    			tr8 = element("tr");
    			th8 = element("th");
    			th8.textContent = "Fecha de inicio del\r\n                                                            cupón:";
    			t46 = space();
    			td8 = element("td");
    			t47 = text(t47_value);
    			t48 = space();
    			tr9 = element("tr");
    			th9 = element("th");
    			th9.textContent = "Fecha de caducidad\r\n                                                            del cupón:";
    			t50 = space();
    			td9 = element("td");
    			t51 = text(t51_value);
    			t52 = space();
    			tr10 = element("tr");
    			th10 = element("th");
    			th10.textContent = "Estado del cupón:";
    			t54 = space();
    			td10 = element("td");
    			t55 = text(t55_value);
    			t56 = space();
    			div19 = element("div");
    			div18 = element("div");
    			div17 = element("div");
    			div15 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Información de la Orden";
    			t58 = space();
    			div16 = element("div");
    			table1 = element("table");
    			thead = element("thead");
    			tr11 = element("tr");
    			th11 = element("th");
    			th11.textContent = "ID de la orden";
    			t60 = space();
    			th12 = element("th");
    			th12.textContent = "Cliente";
    			t62 = space();
    			th13 = element("th");
    			th13.textContent = "Estado de la orden";
    			t64 = space();
    			th14 = element("th");
    			th14.textContent = "Monto";
    			t66 = space();
    			th15 = element("th");
    			th15.textContent = "Metodo de pago";
    			t68 = space();
    			tbody1 = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h4, "class", "mb-sm-0");
    			add_location(h4, file$1, 127, 30, 4008);
    			attr_dev(a0, "href", "/cupones");
    			add_location(a0, file$1, 132, 39, 4288);
    			attr_dev(li0, "class", "breadcrumb-item");
    			add_location(li0, file$1, 131, 36, 4219);
    			attr_dev(li1, "class", "breadcrumb-item active");
    			add_location(li1, file$1, 134, 36, 4399);
    			attr_dev(ol, "class", "breadcrumb m-0");
    			add_location(ol, file$1, 130, 33, 4154);
    			attr_dev(div0, "class", "page-title-right");
    			add_location(div0, file$1, 129, 30, 4089);
    			attr_dev(div1, "class", "page-title-box d-sm-flex align-items-center justify-content-between");
    			add_location(div1, file$1, 125, 27, 3864);
    			attr_dev(div2, "class", "col-12");
    			add_location(div2, file$1, 124, 24, 3815);
    			attr_dev(div3, "class", "row");
    			add_location(div3, file$1, 123, 21, 3772);
    			if (!src_url_equal(img.src, img_src_value = "http://localhost:8080/images/profile-bg.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "profile-wid-img");
    			add_location(img, file$1, 148, 30, 5019);
    			attr_dev(div4, "class", "profile-wid-bg");
    			add_location(div4, file$1, 147, 27, 4959);
    			attr_dev(div5, "class", "profile-foreground position-relative mx-n4 mt-n4");
    			add_location(div5, file$1, 145, 24, 4840);
    			attr_dev(i, "class", "ri-airplay-fill d-inline-block d-md-none");
    			add_location(i, file$1, 166, 36, 5920);
    			attr_dev(span, "class", "d-none d-md-inline-block");
    			add_location(span, file$1, 168, 36, 6052);
    			attr_dev(a1, "class", "nav-link fs-14 active");
    			attr_dev(a1, "data-bs-toggle", "tab");
    			attr_dev(a1, "href", "#overview-tab");
    			attr_dev(a1, "role", "tab");
    			add_location(a1, file$1, 161, 33, 5648);
    			attr_dev(li2, "class", "nav-item");
    			add_location(li2, file$1, 160, 30, 5592);
    			attr_dev(ul, "class", "nav nav-pills animation-nav profile-nav gap-2 gap-lg-3 flex-grow-1");
    			attr_dev(ul, "role", "tablist");
    			add_location(ul, file$1, 157, 27, 5404);
    			attr_dev(div6, "class", "d-flex pt-3");
    			add_location(div6, file$1, 155, 24, 5304);
    			attr_dev(h50, "class", "card-title mb-3");
    			add_location(h50, file$1, 184, 42, 6865);
    			attr_dev(th0, "class", "ps-0");
    			attr_dev(th0, "scope", "row");
    			add_location(th0, file$1, 200, 57, 7827);
    			attr_dev(td0, "class", "text-muted");
    			add_location(td0, file$1, 204, 57, 8121);
    			add_location(tr0, file$1, 199, 54, 7764);
    			attr_dev(th1, "class", "ps-0");
    			attr_dev(th1, "scope", "row");
    			add_location(th1, file$1, 208, 57, 8402);
    			attr_dev(td1, "class", "text-muted");
    			add_location(td1, file$1, 212, 57, 8686);
    			add_location(tr1, file$1, 207, 54, 8339);
    			attr_dev(th2, "class", "ps-0");
    			attr_dev(th2, "scope", "row");
    			add_location(th2, file$1, 216, 57, 8967);
    			attr_dev(td2, "class", "text-muted");
    			add_location(td2, file$1, 220, 57, 9258);
    			add_location(tr2, file$1, 215, 54, 8904);
    			attr_dev(th3, "class", "ps-0");
    			attr_dev(th3, "scope", "row");
    			add_location(th3, file$1, 224, 57, 9550);
    			attr_dev(td3, "class", "text-muted");
    			add_location(td3, file$1, 229, 57, 9922);
    			add_location(tr3, file$1, 223, 54, 9487);
    			attr_dev(th4, "class", "ps-0");
    			attr_dev(th4, "scope", "row");
    			add_location(th4, file$1, 233, 57, 10219);
    			attr_dev(td4, "class", "text-muted");
    			add_location(td4, file$1, 237, 57, 10501);
    			add_location(tr4, file$1, 232, 54, 10156);
    			attr_dev(th5, "class", "ps-0");
    			attr_dev(th5, "scope", "row");
    			add_location(th5, file$1, 241, 57, 10788);
    			attr_dev(td5, "class", "text-muted");
    			add_location(td5, file$1, 245, 57, 11080);
    			add_location(tr5, file$1, 240, 54, 10725);
    			attr_dev(th6, "class", "ps-0");
    			attr_dev(th6, "scope", "row");
    			add_location(th6, file$1, 249, 57, 11365);
    			attr_dev(td6, "class", "text-muted");
    			add_location(td6, file$1, 254, 57, 11730);
    			add_location(tr6, file$1, 248, 54, 11302);
    			attr_dev(th7, "class", "ps-0");
    			attr_dev(th7, "scope", "row");
    			add_location(th7, file$1, 258, 57, 12026);
    			attr_dev(td7, "class", "text-muted");
    			add_location(td7, file$1, 263, 57, 12394);
    			add_location(tr7, file$1, 257, 54, 11963);
    			attr_dev(th8, "class", "ps-0");
    			attr_dev(th8, "scope", "row");
    			add_location(th8, file$1, 268, 57, 12693);
    			attr_dev(td8, "class", "text-muted");
    			add_location(td8, file$1, 273, 57, 13057);
    			add_location(tr8, file$1, 267, 54, 12630);
    			attr_dev(th9, "class", "ps-0");
    			attr_dev(th9, "scope", "row");
    			add_location(th9, file$1, 277, 57, 13344);
    			attr_dev(td9, "class", "text-muted");
    			add_location(td9, file$1, 282, 57, 13711);
    			add_location(tr9, file$1, 276, 54, 13281);
    			attr_dev(th10, "class", "ps-0");
    			attr_dev(th10, "scope", "row");
    			add_location(th10, file$1, 286, 57, 13996);
    			attr_dev(td10, "class", "text-muted");
    			add_location(td10, file$1, 290, 57, 14290);
    			add_location(tr10, file$1, 285, 54, 13933);
    			add_location(tbody0, file$1, 198, 51, 7701);
    			attr_dev(table0, "class", "table table-borderless mb-0");
    			add_location(table0, file$1, 196, 48, 7553);
    			attr_dev(div7, "class", "table-responsive");
    			set_style(div7, "width", "32%");
    			add_location(div7, file$1, 193, 45, 7355);
    			attr_dev(div8, "class", "content-page");
    			set_style(div8, "display", "flex");
    			set_style(div8, "gap", "30%");
    			set_style(div8, "align-items", "center");
    			add_location(div8, file$1, 188, 42, 7056);
    			attr_dev(div9, "class", "card-body");
    			add_location(div9, file$1, 183, 39, 6798);
    			attr_dev(div10, "class", "card");
    			add_location(div10, file$1, 182, 36, 6739);
    			attr_dev(div11, "class", "col-xxl-12");
    			add_location(div11, file$1, 181, 33, 6677);
    			attr_dev(div12, "class", "row");
    			add_location(div12, file$1, 180, 30, 6625);
    			attr_dev(div13, "class", "tab-pane active");
    			attr_dev(div13, "id", "overview-tab");
    			attr_dev(div13, "role", "tabpanel");
    			add_location(div13, file$1, 176, 27, 6437);
    			attr_dev(div14, "class", "tab-content pt-4 text-muted");
    			add_location(div14, file$1, 175, 24, 6367);
    			attr_dev(h51, "class", "card-title mb-0");
    			add_location(h51, file$1, 312, 36, 15334);
    			attr_dev(div15, "class", "card-header");
    			add_location(div15, file$1, 311, 33, 15271);
    			add_location(th11, file$1, 323, 45, 15956);
    			add_location(th12, file$1, 324, 45, 16026);
    			add_location(th13, file$1, 325, 45, 16089);
    			add_location(th14, file$1, 326, 45, 16163);
    			add_location(th15, file$1, 327, 45, 16224);
    			add_location(tr11, file$1, 322, 42, 15905);
    			add_location(thead, file$1, 321, 39, 15854);
    			add_location(tbody1, file$1, 330, 39, 16386);
    			attr_dev(table1, "id", "buttons-datatables");
    			attr_dev(table1, "class", "display table table-bordered");
    			set_style(table1, "width", "100%");
    			add_location(table1, file$1, 317, 36, 15606);
    			attr_dev(div16, "class", "card-body");
    			add_location(div16, file$1, 316, 33, 15545);
    			attr_dev(div17, "class", "card");
    			add_location(div17, file$1, 310, 30, 15218);
    			attr_dev(div18, "class", "col-lg-12");
    			add_location(div18, file$1, 309, 27, 15163);
    			attr_dev(div19, "class", "row");
    			add_location(div19, file$1, 308, 24, 15117);
    			attr_dev(div20, "class", "container-fluid");
    			add_location(div20, file$1, 144, 21, 4785);
    			attr_dev(div21, "class", "container-fluid");
    			add_location(div21, file$1, 121, 18, 3672);
    			attr_dev(div22, "class", "page-content");
    			add_location(div22, file$1, 120, 15, 3626);
    			attr_dev(div23, "class", "main-content");
    			add_location(div23, file$1, 119, 12, 3583);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div23, anchor);
    			append_dev(div23, div22);
    			append_dev(div22, div21);
    			append_dev(div21, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h4);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, ol);
    			append_dev(ol, li0);
    			append_dev(li0, a0);
    			append_dev(ol, t3);
    			append_dev(ol, li1);
    			append_dev(div21, t5);
    			append_dev(div21, div20);
    			append_dev(div20, div5);
    			append_dev(div5, div4);
    			append_dev(div4, img);
    			append_dev(div20, t6);
    			append_dev(div20, div6);
    			append_dev(div6, ul);
    			append_dev(ul, li2);
    			append_dev(li2, a1);
    			append_dev(a1, i);
    			append_dev(a1, t7);
    			append_dev(a1, span);
    			append_dev(div20, t9);
    			append_dev(div20, div14);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, h50);
    			append_dev(div9, t11);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, table0);
    			append_dev(table0, tbody0);
    			append_dev(tbody0, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t13);
    			append_dev(tr0, td0);
    			append_dev(td0, t14);
    			append_dev(tbody0, t15);
    			append_dev(tbody0, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t17);
    			append_dev(tr1, td1);
    			append_dev(td1, t18);
    			append_dev(tbody0, t19);
    			append_dev(tbody0, tr2);
    			append_dev(tr2, th2);
    			append_dev(tr2, t21);
    			append_dev(tr2, td2);
    			append_dev(td2, t22);
    			append_dev(tbody0, t23);
    			append_dev(tbody0, tr3);
    			append_dev(tr3, th3);
    			append_dev(tr3, t25);
    			append_dev(tr3, td3);
    			append_dev(td3, t26);
    			append_dev(td3, t27);
    			append_dev(tbody0, t28);
    			append_dev(tbody0, tr4);
    			append_dev(tr4, th4);
    			append_dev(tr4, t30);
    			append_dev(tr4, td4);
    			append_dev(td4, t31);
    			append_dev(tbody0, t32);
    			append_dev(tbody0, tr5);
    			append_dev(tr5, th5);
    			append_dev(tr5, t34);
    			append_dev(tr5, td5);
    			append_dev(td5, t35);
    			append_dev(tbody0, t36);
    			append_dev(tbody0, tr6);
    			append_dev(tr6, th6);
    			append_dev(tr6, t38);
    			append_dev(tr6, td6);
    			append_dev(td6, t39);
    			append_dev(tbody0, t40);
    			append_dev(tbody0, tr7);
    			append_dev(tr7, th7);
    			append_dev(tr7, t42);
    			append_dev(tr7, td7);
    			append_dev(td7, t43);
    			append_dev(tbody0, t44);
    			append_dev(tbody0, tr8);
    			append_dev(tr8, th8);
    			append_dev(tr8, t46);
    			append_dev(tr8, td8);
    			append_dev(td8, t47);
    			append_dev(tbody0, t48);
    			append_dev(tbody0, tr9);
    			append_dev(tr9, th9);
    			append_dev(tr9, t50);
    			append_dev(tr9, td9);
    			append_dev(td9, t51);
    			append_dev(tbody0, t52);
    			append_dev(tbody0, tr10);
    			append_dev(tr10, th10);
    			append_dev(tr10, t54);
    			append_dev(tr10, td10);
    			append_dev(td10, t55);
    			append_dev(div20, t56);
    			append_dev(div20, div19);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, div15);
    			append_dev(div15, h51);
    			append_dev(div17, t58);
    			append_dev(div17, div16);
    			append_dev(div16, table1);
    			append_dev(table1, thead);
    			append_dev(thead, tr11);
    			append_dev(tr11, th11);
    			append_dev(tr11, t60);
    			append_dev(tr11, th12);
    			append_dev(tr11, t62);
    			append_dev(tr11, th13);
    			append_dev(tr11, t64);
    			append_dev(tr11, th14);
    			append_dev(tr11, t66);
    			append_dev(tr11, th15);
    			append_dev(table1, t68);
    			append_dev(table1, tbody1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody1, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*getDataSingleCoupon*/ 2) {
    				each_value = /*data*/ ctx[7].orders;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div23);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1.name,
    		type: "then",
    		source: "(119:9) {:then data}",
    		ctx
    	});

    	return block;
    }

    // (332:42) {#each data.orders as couponsOrder}
    function create_each_block(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*couponsOrder*/ ctx[8].id + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*couponsOrder*/ ctx[8].client_id + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*couponsOrder*/ ctx[8].order_status_id + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*couponsOrder*/ ctx[8].total + "";
    	let t6;
    	let t7;
    	let td4;
    	let t8_value = /*couponsOrder*/ ctx[8].payment_type_id + "";
    	let t8;
    	let t9;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text(t6_value);
    			t7 = space();
    			td4 = element("td");
    			t8 = text(t8_value);
    			t9 = space();
    			add_location(td0, file$1, 333, 48, 16573);
    			add_location(td1, file$1, 334, 48, 16649);
    			add_location(td2, file$1, 335, 48, 16732);
    			add_location(td3, file$1, 336, 48, 16821);
    			add_location(td4, file$1, 337, 48, 16900);
    			add_location(tr, file$1, 332, 45, 16519);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, t8);
    			append_dev(tr, t9);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(332:42) {#each data.orders as couponsOrder}",
    		ctx
    	});

    	return block;
    }

    // (117:39)               <!-- promise is pending -->           {:then data}
    function create_pending_block_1(ctx) {
    	const block = { c: noop$1, m: noop$1, p: noop$1, d: noop$1 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1.name,
    		type: "pending",
    		source: "(117:39)               <!-- promise is pending -->           {:then data}",
    		ctx
    	});

    	return block;
    }

    // (92:28)      Loading...  {:then data}
    function create_pending_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(92:28)      Loading...  {:then data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let t0;
    	let link0;
    	let link1;
    	let script;
    	let script_src_value;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t1;
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block_1,
    		value: 7,
    		error: 11,
    		blocks: [,,,]
    	};

    	handle_promise(/*getDataUserLoggin*/ ctx[0](), info);

    	const block = {
    		c: function create() {
    			t0 = text("//verificado\r\n\r\n\r\n");
    			link0 = element("link");
    			link1 = element("link");
    			script = element("script");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t1 = space();
    			await_block_anchor = empty();
    			info.block.c();
    			document.title = "DevEcommerce | Vista Detalle Usuarios";
    			attr_dev(link0, "rel", "shortcut icon");
    			attr_dev(link0, "href", "http://localhost:8080/images/favicon.ico");
    			add_location(link0, file$1, 59, 3, 1785);
    			attr_dev(link1, "href", "http://localhost:8080/libs/sweetalert2/sweetalert2.min.css");
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			add_location(link1, file$1, 62, 3, 1896);
    			if (!src_url_equal(script.src, script_src_value = "http://localhost:8080/js/layout.js")) attr_dev(script, "src", script_src_value);
    			add_location(script, file$1, 68, 3, 2061);
    			attr_dev(link2, "href", "http://localhost:8080/css/bootstrap.min.css");
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			add_location(link2, file$1, 70, 3, 2151);
    			attr_dev(link3, "href", "http://localhost:8080/css/icons.min.css");
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "type", "text/css");
    			add_location(link3, file$1, 75, 3, 2292);
    			attr_dev(link4, "href", "http://localhost:8080/css/app.min.css");
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "type", "text/css");
    			add_location(link4, file$1, 80, 3, 2426);
    			attr_dev(link5, "href", "http://localhost:8080/css/custom.min.css");
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "type", "text/css");
    			add_location(link5, file$1, 85, 3, 2561);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, script);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(script);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $preferences;
    	validate_store(preferences, 'preferences');
    	component_subscribe($$self, preferences, $$value => $$invalidate(3, $preferences = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ViewCupones', slots, []);
    	let { id } = $$props;
    	get_store_value(preferences);

    	// Se guarda en una variable para poder usar la variable global
    	const number = $preferences;

    	// Si el numero es igual a 0 significa que no existe ninguna session activa y lo regresa al login
    	if (number == 0) {
    		location.href = "/";
    	}

    	var myHeaders = new Headers();
    	myHeaders.append("Authorization", `${'Bearer 1652|z3WkoTqsJHB5Mm5KM7kKtzpDPNzpamfptMyPKXFf'}`);

    	var requestOptions = {
    		method: "GET",
    		headers: myHeaders,
    		redirect: "follow"
    	};

    	async function getDataUserLoggin() {
    		const response = await fetch(`https://crud.jonathansoto.mx/api/users/${number}`, requestOptions);
    		const dataUser = await response.json();
    		return dataUser.data;
    	}

    	async function getDataSingleCoupon() {
    		const resp = await fetch(`https://crud.jonathansoto.mx/api/coupons/${id}`, requestOptions);
    		const data = await resp.json();
    		return data.data;
    	}

    	$$self.$$.on_mount.push(function () {
    		if (id === undefined && !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])) {
    			console.warn("<ViewCupones> was created without expected prop 'id'");
    		}
    	});

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ViewCupones> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		id,
    		Jumper,
    		Sidebar,
    		HeaderApp,
    		get: get_store_value,
    		preferences,
    		number,
    		myHeaders,
    		requestOptions,
    		getDataUserLoggin,
    		getDataSingleCoupon,
    		$preferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('myHeaders' in $$props) myHeaders = $$props.myHeaders;
    		if ('requestOptions' in $$props) requestOptions = $$props.requestOptions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getDataUserLoggin, getDataSingleCoupon, id];
    }

    class ViewCupones extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { id: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ViewCupones",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get id() {
    		throw new Error("<ViewCupones>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ViewCupones>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\App.svelte generated by Svelte v3.52.0 */
    const file = "src\\App.svelte";

    // (33:8) <Route path="/">
    function create_default_slot_7(ctx) {
    	let login;
    	let current;
    	login = new Login({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(login.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(login, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(login.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(login.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(login, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(33:8) <Route path=\\\"/\\\">",
    		ctx
    	});

    	return block;
    }

    // (45:8) <Route path="/users/:id" let:params>
    function create_default_slot_6(ctx) {
    	let usersview;
    	let current;

    	usersview = new UserDetails({
    			props: { id: /*params*/ ctx[0].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(usersview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(usersview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const usersview_changes = {};
    			if (dirty & /*params*/ 1) usersview_changes.id = /*params*/ ctx[0].id;
    			usersview.$set(usersview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usersview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usersview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(usersview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(45:8) <Route path=\\\"/users/:id\\\" let:params>",
    		ctx
    	});

    	return block;
    }

    // (49:8) <Route path="/users/settings/:id" let:params>
    function create_default_slot_5(ctx) {
    	let usersettings;
    	let current;

    	usersettings = new UserSettings({
    			props: { id: /*params*/ ctx[0].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(usersettings.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(usersettings, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const usersettings_changes = {};
    			if (dirty & /*params*/ 1) usersettings_changes.id = /*params*/ ctx[0].id;
    			usersettings.$set(usersettings_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usersettings.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usersettings.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(usersettings, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(49:8) <Route path=\\\"/users/settings/:id\\\" let:params>",
    		ctx
    	});

    	return block;
    }

    // (56:8) <Route path="/cupones/:id" let:params>
    function create_default_slot_4(ctx) {
    	let viewcupones;
    	let current;

    	viewcupones = new ViewCupones({
    			props: { id: /*params*/ ctx[0].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(viewcupones.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(viewcupones, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const viewcupones_changes = {};
    			if (dirty & /*params*/ 1) viewcupones_changes.id = /*params*/ ctx[0].id;
    			viewcupones.$set(viewcupones_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(viewcupones.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(viewcupones.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(viewcupones, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(56:8) <Route path=\\\"/cupones/:id\\\" let:params>",
    		ctx
    	});

    	return block;
    }

    // (64:8) <Route path="/client_info/:id" let:params>
    function create_default_slot_3(ctx) {
    	let viewcliente;
    	let current;

    	viewcliente = new ViewCliente({
    			props: { id: /*params*/ ctx[0].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(viewcliente.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(viewcliente, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const viewcliente_changes = {};
    			if (dirty & /*params*/ 1) viewcliente_changes.id = /*params*/ ctx[0].id;
    			viewcliente.$set(viewcliente_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(viewcliente.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(viewcliente.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(viewcliente, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(64:8) <Route path=\\\"/client_info/:id\\\" let:params>",
    		ctx
    	});

    	return block;
    }

    // (68:8) <Route path="/viewProduct/:id" let:params>
    function create_default_slot_2(ctx) {
    	let viewproduct;
    	let current;

    	viewproduct = new ViewProduct({
    			props: { id: /*params*/ ctx[0].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(viewproduct.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(viewproduct, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const viewproduct_changes = {};
    			if (dirty & /*params*/ 1) viewproduct_changes.id = /*params*/ ctx[0].id;
    			viewproduct.$set(viewproduct_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(viewproduct.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(viewproduct.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(viewproduct, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(68:8) <Route path=\\\"/viewProduct/:id\\\" let:params>",
    		ctx
    	});

    	return block;
    }

    // (76:8) <Route path="/viewOrder/:id" let:params>
    function create_default_slot_1(ctx) {
    	let vieworder;
    	let current;

    	vieworder = new ViewOrder({
    			props: { id: /*params*/ ctx[0].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(vieworder.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(vieworder, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const vieworder_changes = {};
    			if (dirty & /*params*/ 1) vieworder_changes.id = /*params*/ ctx[0].id;
    			vieworder.$set(vieworder_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(vieworder.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(vieworder.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(vieworder, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(76:8) <Route path=\\\"/viewOrder/:id\\\" let:params>",
    		ctx
    	});

    	return block;
    }

    // (30:0) <Router>
    function create_default_slot(ctx) {
    	let div;
    	let route0;
    	let t0;
    	let route1;
    	let t1;
    	let route2;
    	let t2;
    	let route3;
    	let t3;
    	let route4;
    	let t4;
    	let route5;
    	let t5;
    	let route6;
    	let t6;
    	let route7;
    	let t7;
    	let route8;
    	let t8;
    	let route9;
    	let t9;
    	let route10;
    	let t10;
    	let route11;
    	let t11;
    	let route12;
    	let t12;
    	let route13;
    	let t13;
    	let route14;
    	let t14;
    	let route15;
    	let t15;
    	let route16;
    	let t16;
    	let route17;
    	let t17;
    	let route18;
    	let t18;
    	let route19;
    	let t19;
    	let route20;
    	let current;

    	route0 = new Route({
    			props: {
    				path: "/",
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route1 = new Route({
    			props: { path: "/home", component: Home },
    			$$inline: true
    		});

    	route2 = new Route({
    			props: { path: "/logout", component: Logout },
    			$$inline: true
    		});

    	route3 = new Route({
    			props: { path: "/profile", component: Profile },
    			$$inline: true
    		});

    	route4 = new Route({
    			props: {
    				path: "/registerUser",
    				component: RegisterUser
    			},
    			$$inline: true
    		});

    	route5 = new Route({
    			props: {
    				path: "/profileSettings",
    				component: ProfileSettings
    			},
    			$$inline: true
    		});

    	route6 = new Route({
    			props: { path: "/users", component: Users },
    			$$inline: true
    		});

    	route7 = new Route({
    			props: { path: "/catalogos", component: Catalogos },
    			$$inline: true
    		});

    	route8 = new Route({
    			props: {
    				path: "/users/:id",
    				$$slots: {
    					default: [
    						create_default_slot_6,
    						({ params }) => ({ 0: params }),
    						({ params }) => params ? 1 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route9 = new Route({
    			props: {
    				path: "/users/settings/:id",
    				$$slots: {
    					default: [
    						create_default_slot_5,
    						({ params }) => ({ 0: params }),
    						({ params }) => params ? 1 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route10 = new Route({
    			props: { path: "/clientes", component: Clientes },
    			$$inline: true
    		});

    	route11 = new Route({
    			props: {
    				path: "/cupones/:id",
    				$$slots: {
    					default: [
    						create_default_slot_4,
    						({ params }) => ({ 0: params }),
    						({ params }) => params ? 1 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route12 = new Route({
    			props: { path: "/cupones", component: Cupones },
    			$$inline: true
    		});

    	route13 = new Route({
    			props: { path: "/products", component: Products },
    			$$inline: true
    		});

    	route14 = new Route({
    			props: {
    				path: "/client_info/:id",
    				$$slots: {
    					default: [
    						create_default_slot_3,
    						({ params }) => ({ 0: params }),
    						({ params }) => params ? 1 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route15 = new Route({
    			props: {
    				path: "/viewProduct/:id",
    				$$slots: {
    					default: [
    						create_default_slot_2,
    						({ params }) => ({ 0: params }),
    						({ params }) => params ? 1 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route16 = new Route({
    			props: {
    				path: "/viewPresentacion",
    				component: ViewPresentacion
    			},
    			$$inline: true
    		});

    	route17 = new Route({
    			props: { path: "/ordenes", component: Ordenes },
    			$$inline: true
    		});

    	route18 = new Route({
    			props: {
    				path: "/viewOrder/:id",
    				$$slots: {
    					default: [
    						create_default_slot_1,
    						({ params }) => ({ 0: params }),
    						({ params }) => params ? 1 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route19 = new Route({
    			props: {
    				path: "/viewDireccion",
    				component: ViewDireccion
    			},
    			$$inline: true
    		});

    	route20 = new Route({
    			props: { path: "/*", component: NotFound },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(route0.$$.fragment);
    			t0 = space();
    			create_component(route1.$$.fragment);
    			t1 = space();
    			create_component(route2.$$.fragment);
    			t2 = space();
    			create_component(route3.$$.fragment);
    			t3 = space();
    			create_component(route4.$$.fragment);
    			t4 = space();
    			create_component(route5.$$.fragment);
    			t5 = space();
    			create_component(route6.$$.fragment);
    			t6 = space();
    			create_component(route7.$$.fragment);
    			t7 = space();
    			create_component(route8.$$.fragment);
    			t8 = space();
    			create_component(route9.$$.fragment);
    			t9 = space();
    			create_component(route10.$$.fragment);
    			t10 = space();
    			create_component(route11.$$.fragment);
    			t11 = space();
    			create_component(route12.$$.fragment);
    			t12 = space();
    			create_component(route13.$$.fragment);
    			t13 = space();
    			create_component(route14.$$.fragment);
    			t14 = space();
    			create_component(route15.$$.fragment);
    			t15 = space();
    			create_component(route16.$$.fragment);
    			t16 = space();
    			create_component(route17.$$.fragment);
    			t17 = space();
    			create_component(route18.$$.fragment);
    			t18 = space();
    			create_component(route19.$$.fragment);
    			t19 = space();
    			create_component(route20.$$.fragment);
    			add_location(div, file, 30, 4, 1317);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(route0, div, null);
    			append_dev(div, t0);
    			mount_component(route1, div, null);
    			append_dev(div, t1);
    			mount_component(route2, div, null);
    			append_dev(div, t2);
    			mount_component(route3, div, null);
    			append_dev(div, t3);
    			mount_component(route4, div, null);
    			append_dev(div, t4);
    			mount_component(route5, div, null);
    			append_dev(div, t5);
    			mount_component(route6, div, null);
    			append_dev(div, t6);
    			mount_component(route7, div, null);
    			append_dev(div, t7);
    			mount_component(route8, div, null);
    			append_dev(div, t8);
    			mount_component(route9, div, null);
    			append_dev(div, t9);
    			mount_component(route10, div, null);
    			append_dev(div, t10);
    			mount_component(route11, div, null);
    			append_dev(div, t11);
    			mount_component(route12, div, null);
    			append_dev(div, t12);
    			mount_component(route13, div, null);
    			append_dev(div, t13);
    			mount_component(route14, div, null);
    			append_dev(div, t14);
    			mount_component(route15, div, null);
    			append_dev(div, t15);
    			mount_component(route16, div, null);
    			append_dev(div, t16);
    			mount_component(route17, div, null);
    			append_dev(div, t17);
    			mount_component(route18, div, null);
    			append_dev(div, t18);
    			mount_component(route19, div, null);
    			append_dev(div, t19);
    			mount_component(route20, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				route0_changes.$$scope = { dirty, ctx };
    			}

    			route0.$set(route0_changes);
    			const route8_changes = {};

    			if (dirty & /*$$scope, params*/ 3) {
    				route8_changes.$$scope = { dirty, ctx };
    			}

    			route8.$set(route8_changes);
    			const route9_changes = {};

    			if (dirty & /*$$scope, params*/ 3) {
    				route9_changes.$$scope = { dirty, ctx };
    			}

    			route9.$set(route9_changes);
    			const route11_changes = {};

    			if (dirty & /*$$scope, params*/ 3) {
    				route11_changes.$$scope = { dirty, ctx };
    			}

    			route11.$set(route11_changes);
    			const route14_changes = {};

    			if (dirty & /*$$scope, params*/ 3) {
    				route14_changes.$$scope = { dirty, ctx };
    			}

    			route14.$set(route14_changes);
    			const route15_changes = {};

    			if (dirty & /*$$scope, params*/ 3) {
    				route15_changes.$$scope = { dirty, ctx };
    			}

    			route15.$set(route15_changes);
    			const route18_changes = {};

    			if (dirty & /*$$scope, params*/ 3) {
    				route18_changes.$$scope = { dirty, ctx };
    			}

    			route18.$set(route18_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			transition_in(route4.$$.fragment, local);
    			transition_in(route5.$$.fragment, local);
    			transition_in(route6.$$.fragment, local);
    			transition_in(route7.$$.fragment, local);
    			transition_in(route8.$$.fragment, local);
    			transition_in(route9.$$.fragment, local);
    			transition_in(route10.$$.fragment, local);
    			transition_in(route11.$$.fragment, local);
    			transition_in(route12.$$.fragment, local);
    			transition_in(route13.$$.fragment, local);
    			transition_in(route14.$$.fragment, local);
    			transition_in(route15.$$.fragment, local);
    			transition_in(route16.$$.fragment, local);
    			transition_in(route17.$$.fragment, local);
    			transition_in(route18.$$.fragment, local);
    			transition_in(route19.$$.fragment, local);
    			transition_in(route20.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			transition_out(route4.$$.fragment, local);
    			transition_out(route5.$$.fragment, local);
    			transition_out(route6.$$.fragment, local);
    			transition_out(route7.$$.fragment, local);
    			transition_out(route8.$$.fragment, local);
    			transition_out(route9.$$.fragment, local);
    			transition_out(route10.$$.fragment, local);
    			transition_out(route11.$$.fragment, local);
    			transition_out(route12.$$.fragment, local);
    			transition_out(route13.$$.fragment, local);
    			transition_out(route14.$$.fragment, local);
    			transition_out(route15.$$.fragment, local);
    			transition_out(route16.$$.fragment, local);
    			transition_out(route17.$$.fragment, local);
    			transition_out(route18.$$.fragment, local);
    			transition_out(route19.$$.fragment, local);
    			transition_out(route20.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(route0);
    			destroy_component(route1);
    			destroy_component(route2);
    			destroy_component(route3);
    			destroy_component(route4);
    			destroy_component(route5);
    			destroy_component(route6);
    			destroy_component(route7);
    			destroy_component(route8);
    			destroy_component(route9);
    			destroy_component(route10);
    			destroy_component(route11);
    			destroy_component(route12);
    			destroy_component(route13);
    			destroy_component(route14);
    			destroy_component(route15);
    			destroy_component(route16);
    			destroy_component(route17);
    			destroy_component(route18);
    			destroy_component(route19);
    			destroy_component(route20);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(30:0) <Router>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let router;
    	let current;

    	router = new Router({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(router.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const router_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(router, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Router,
    		Route,
    		Login,
    		Home,
    		NotFound,
    		Logout,
    		Profile,
    		ProfileSettings,
    		RegisterUser,
    		Users,
    		UsersView: UserDetails,
    		UserSettings,
    		Clientes,
    		Cupones,
    		Products,
    		Ordenes,
    		ViewCliente,
    		Catalogos,
    		ViewProduct,
    		ViewPresentacion,
    		ViewOrder,
    		ViewDireccion,
    		ViewCupones
    	});

    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
    	target: document.body,
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
